=begin
#Stakkd API

## Introduction The Stakkd platform provides comprehensive data services that meet the business objectives of organizations ranging from Fortune 500 companies to startups. Our clients work in an array of industries, including insurance, financial, legal, travel, hospitality, retail, health, media, and telecommunications.  The Stakkd API is documented using the Open API 3.0.1 standard.  All endpoints are available at https://api.stakkd.io/v1. Detailed documentation for each endpoint is below, including the full URL for the endpoint.  # Account Types The API supports two different account types, each with different permissions.  ## Paid Account Paid accounts provide unlimited access to all of the URIs.  ## Trial Account Trial Accounts have a limited number of queries to the APIs. Keep in mind that queries which do not return results still count against the Trial Account query limits. Trial Accounts are temporary, but can be upgraded or extended by contacting [support@stakkd.io](mailto:support@stakkd.io) 

The version of the OpenAPI document: v1

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.4.0

=end

require 'cgi'

module OpenapiClient
  class AppendApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # @param content_type [String] 
    # @param x_api_key [String] 
    # @param demographics_append_request [DemographicsAppendRequest] 
    # @param [Hash] opts the optional parameters
    # @return [DemographicsAppendResponse]
    def append_demographics_post(content_type, x_api_key, demographics_append_request, opts = {})
      data, _status_code, _headers = append_demographics_post_with_http_info(content_type, x_api_key, demographics_append_request, opts)
      data
    end

    # @param content_type [String] 
    # @param x_api_key [String] 
    # @param demographics_append_request [DemographicsAppendRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(DemographicsAppendResponse, Integer, Hash)>] DemographicsAppendResponse data, response status code and response headers
    def append_demographics_post_with_http_info(content_type, x_api_key, demographics_append_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AppendApi.append_demographics_post ...'
      end
      # verify the required parameter 'content_type' is set
      if @api_client.config.client_side_validation && content_type.nil?
        fail ArgumentError, "Missing the required parameter 'content_type' when calling AppendApi.append_demographics_post"
      end
      # verify the required parameter 'x_api_key' is set
      if @api_client.config.client_side_validation && x_api_key.nil?
        fail ArgumentError, "Missing the required parameter 'x_api_key' when calling AppendApi.append_demographics_post"
      end
      # verify the required parameter 'demographics_append_request' is set
      if @api_client.config.client_side_validation && demographics_append_request.nil?
        fail ArgumentError, "Missing the required parameter 'demographics_append_request' when calling AppendApi.append_demographics_post"
      end
      # resource path
      local_var_path = '/append/demographics'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'Content-Type'] = content_type
      header_params[:'x-api-key'] = x_api_key

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(demographics_append_request)

      # return_type
      return_type = opts[:debug_return_type] || 'DemographicsAppendResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKey']

      new_options = opts.merge(
        :operation => :"AppendApi.append_demographics_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AppendApi#append_demographics_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param content_type [String] 
    # @param x_api_key [String] 
    # @param email_append_request [EmailAppendRequest] 
    # @param [Hash] opts the optional parameters
    # @return [EmailAppendResponse]
    def append_email_post(content_type, x_api_key, email_append_request, opts = {})
      data, _status_code, _headers = append_email_post_with_http_info(content_type, x_api_key, email_append_request, opts)
      data
    end

    # @param content_type [String] 
    # @param x_api_key [String] 
    # @param email_append_request [EmailAppendRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(EmailAppendResponse, Integer, Hash)>] EmailAppendResponse data, response status code and response headers
    def append_email_post_with_http_info(content_type, x_api_key, email_append_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AppendApi.append_email_post ...'
      end
      # verify the required parameter 'content_type' is set
      if @api_client.config.client_side_validation && content_type.nil?
        fail ArgumentError, "Missing the required parameter 'content_type' when calling AppendApi.append_email_post"
      end
      # verify the required parameter 'x_api_key' is set
      if @api_client.config.client_side_validation && x_api_key.nil?
        fail ArgumentError, "Missing the required parameter 'x_api_key' when calling AppendApi.append_email_post"
      end
      # verify the required parameter 'email_append_request' is set
      if @api_client.config.client_side_validation && email_append_request.nil?
        fail ArgumentError, "Missing the required parameter 'email_append_request' when calling AppendApi.append_email_post"
      end
      # resource path
      local_var_path = '/append/email'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'Content-Type'] = content_type
      header_params[:'x-api-key'] = x_api_key

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(email_append_request)

      # return_type
      return_type = opts[:debug_return_type] || 'EmailAppendResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKey']

      new_options = opts.merge(
        :operation => :"AppendApi.append_email_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AppendApi#append_email_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param content_type [String] 
    # @param x_api_key [String] 
    # @param mobile_append_request [MobileAppendRequest] 
    # @param [Hash] opts the optional parameters
    # @return [MobileAppendResponse]
    def append_mobile_post(content_type, x_api_key, mobile_append_request, opts = {})
      data, _status_code, _headers = append_mobile_post_with_http_info(content_type, x_api_key, mobile_append_request, opts)
      data
    end

    # @param content_type [String] 
    # @param x_api_key [String] 
    # @param mobile_append_request [MobileAppendRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(MobileAppendResponse, Integer, Hash)>] MobileAppendResponse data, response status code and response headers
    def append_mobile_post_with_http_info(content_type, x_api_key, mobile_append_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AppendApi.append_mobile_post ...'
      end
      # verify the required parameter 'content_type' is set
      if @api_client.config.client_side_validation && content_type.nil?
        fail ArgumentError, "Missing the required parameter 'content_type' when calling AppendApi.append_mobile_post"
      end
      # verify the required parameter 'x_api_key' is set
      if @api_client.config.client_side_validation && x_api_key.nil?
        fail ArgumentError, "Missing the required parameter 'x_api_key' when calling AppendApi.append_mobile_post"
      end
      # verify the required parameter 'mobile_append_request' is set
      if @api_client.config.client_side_validation && mobile_append_request.nil?
        fail ArgumentError, "Missing the required parameter 'mobile_append_request' when calling AppendApi.append_mobile_post"
      end
      # resource path
      local_var_path = '/append/mobile'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'Content-Type'] = content_type
      header_params[:'x-api-key'] = x_api_key

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(mobile_append_request)

      # return_type
      return_type = opts[:debug_return_type] || 'MobileAppendResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKey']

      new_options = opts.merge(
        :operation => :"AppendApi.append_mobile_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AppendApi#append_mobile_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param content_type [String] 
    # @param x_api_key [String] 
    # @param phone_append_request [PhoneAppendRequest] 
    # @param [Hash] opts the optional parameters
    # @return [PhoneAppendResponse]
    def append_phone_post(content_type, x_api_key, phone_append_request, opts = {})
      data, _status_code, _headers = append_phone_post_with_http_info(content_type, x_api_key, phone_append_request, opts)
      data
    end

    # @param content_type [String] 
    # @param x_api_key [String] 
    # @param phone_append_request [PhoneAppendRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PhoneAppendResponse, Integer, Hash)>] PhoneAppendResponse data, response status code and response headers
    def append_phone_post_with_http_info(content_type, x_api_key, phone_append_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AppendApi.append_phone_post ...'
      end
      # verify the required parameter 'content_type' is set
      if @api_client.config.client_side_validation && content_type.nil?
        fail ArgumentError, "Missing the required parameter 'content_type' when calling AppendApi.append_phone_post"
      end
      # verify the required parameter 'x_api_key' is set
      if @api_client.config.client_side_validation && x_api_key.nil?
        fail ArgumentError, "Missing the required parameter 'x_api_key' when calling AppendApi.append_phone_post"
      end
      # verify the required parameter 'phone_append_request' is set
      if @api_client.config.client_side_validation && phone_append_request.nil?
        fail ArgumentError, "Missing the required parameter 'phone_append_request' when calling AppendApi.append_phone_post"
      end
      # resource path
      local_var_path = '/append/phone'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'Content-Type'] = content_type
      header_params[:'x-api-key'] = x_api_key

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(phone_append_request)

      # return_type
      return_type = opts[:debug_return_type] || 'PhoneAppendResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKey']

      new_options = opts.merge(
        :operation => :"AppendApi.append_phone_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AppendApi#append_phone_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param content_type [String] 
    # @param x_api_key [String] 
    # @param vehicle_append_request [VehicleAppendRequest] 
    # @param [Hash] opts the optional parameters
    # @return [VehicleAppendResponse]
    def append_vehicle_post(content_type, x_api_key, vehicle_append_request, opts = {})
      data, _status_code, _headers = append_vehicle_post_with_http_info(content_type, x_api_key, vehicle_append_request, opts)
      data
    end

    # @param content_type [String] 
    # @param x_api_key [String] 
    # @param vehicle_append_request [VehicleAppendRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(VehicleAppendResponse, Integer, Hash)>] VehicleAppendResponse data, response status code and response headers
    def append_vehicle_post_with_http_info(content_type, x_api_key, vehicle_append_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AppendApi.append_vehicle_post ...'
      end
      # verify the required parameter 'content_type' is set
      if @api_client.config.client_side_validation && content_type.nil?
        fail ArgumentError, "Missing the required parameter 'content_type' when calling AppendApi.append_vehicle_post"
      end
      # verify the required parameter 'x_api_key' is set
      if @api_client.config.client_side_validation && x_api_key.nil?
        fail ArgumentError, "Missing the required parameter 'x_api_key' when calling AppendApi.append_vehicle_post"
      end
      # verify the required parameter 'vehicle_append_request' is set
      if @api_client.config.client_side_validation && vehicle_append_request.nil?
        fail ArgumentError, "Missing the required parameter 'vehicle_append_request' when calling AppendApi.append_vehicle_post"
      end
      # resource path
      local_var_path = '/append/vehicle'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'Content-Type'] = content_type
      header_params[:'x-api-key'] = x_api_key

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(vehicle_append_request)

      # return_type
      return_type = opts[:debug_return_type] || 'VehicleAppendResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKey']

      new_options = opts.merge(
        :operation => :"AppendApi.append_vehicle_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AppendApi#append_vehicle_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
