=begin
#Stakkd API

## Introduction The Stakkd platform provides comprehensive data services that meet the business objectives of organizations ranging from Fortune 500 companies to startups. Our clients work in an array of industries, including insurance, financial, legal, travel, hospitality, retail, health, media, and telecommunications.  The Stakkd API is documented using the Open API 3.0.1 standard.  All endpoints are available at https://api.stakkd.io/v1. Detailed documentation for each endpoint is below, including the full URL for the endpoint.  # Account Types The API supports two different account types, each with different permissions.  ## Paid Account Paid accounts provide unlimited access to all of the URIs.  ## Trial Account Trial Accounts have a limited number of queries to the APIs. Keep in mind that queries which do not return results still count against the Trial Account query limits. Trial Accounts are temporary, but can be upgraded or extended by contacting [support@stakkd.io](mailto:support@stakkd.io) 

The version of the OpenAPI document: v1

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.4.0

=end

require 'spec_helper'
require 'json'

# Unit tests for OpenapiClient::AppendApi
# Automatically generated by openapi-generator (https://openapi-generator.tech)
# Please update as you see appropriate
describe 'AppendApi' do
  before do
    # run before each test
    @api_instance = OpenapiClient::AppendApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of AppendApi' do
    it 'should create an instance of AppendApi' do
      expect(@api_instance).to be_instance_of(OpenapiClient::AppendApi)
    end
  end

  # unit tests for append_demographics_post
  # @param content_type 
  # @param x_api_key 
  # @param demographics_append_request 
  # @param [Hash] opts the optional parameters
  # @return [DemographicsAppendResponse]
  describe 'append_demographics_post test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for append_email_post
  # @param content_type 
  # @param x_api_key 
  # @param email_append_request 
  # @param [Hash] opts the optional parameters
  # @return [EmailAppendResponse]
  describe 'append_email_post test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for append_mobile_post
  # @param content_type 
  # @param x_api_key 
  # @param mobile_append_request 
  # @param [Hash] opts the optional parameters
  # @return [MobileAppendResponse]
  describe 'append_mobile_post test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for append_phone_post
  # @param content_type 
  # @param x_api_key 
  # @param phone_append_request 
  # @param [Hash] opts the optional parameters
  # @return [PhoneAppendResponse]
  describe 'append_phone_post test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for append_vehicle_post
  # @param content_type 
  # @param x_api_key 
  # @param vehicle_append_request 
  # @param [Hash] opts the optional parameters
  # @return [VehicleAppendResponse]
  describe 'append_vehicle_post test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

end
