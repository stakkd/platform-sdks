<?php
/**
 * DemographicsAppendResponseLifeStyles
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Stakkd API
 *
 * # Introduction The Stakkd platform provides comprehensive data services that meet the business objectives of organizations ranging from Fortune 500 companies to startups. Our clients work in an array of industries, including insurance, financial, legal, travel, hospitality, retail, health, media, and telecommunications.  The Stakkd API is documented using the Open API 3.0.1 standard.  All endpoints are available at https://api.stakkd.io/v1. Detailed documentation for each endpoint is below, including the full URL for the endpoint.  # Account Types The API supports two different account types, each with different permissions.  ## Paid Account Paid accounts provide unlimited access to all of the URIs.  ## Trial Account Trial Accounts have a limited number of queries to the APIs. Keep in mind that queries which do not return results still count against the Trial Account query limits. Trial Accounts are temporary, but can be upgraded or extended by contacting [support@stakkd.io](mailto:support@stakkd.io)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.4.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Stakkd.model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * DemographicsAppendResponseLifeStyles Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class DemographicsAppendResponseLifeStyles implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'demographicsAppendResponse_lifeStyles';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'book' => '\OpenAPI\Client\Stakkd.model\DemographicsAppendResponseLifeStylesBook',
        'apparel' => '\OpenAPI\Client\Stakkd.model\DemographicsAppendResponseLifeStylesApparel',
        'value_shopper' => 'bool',
        'interests' => '\OpenAPI\Client\Stakkd.model\DemographicsAppendResponseLifeStylesInterests',
        'pet' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'book' => null,
        'apparel' => null,
        'value_shopper' => null,
        'interests' => null,
        'pet' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'book' => 'book',
        'apparel' => 'apparel',
        'value_shopper' => 'valueShopper',
        'interests' => 'interests',
        'pet' => 'pet'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'book' => 'setBook',
        'apparel' => 'setApparel',
        'value_shopper' => 'setValueShopper',
        'interests' => 'setInterests',
        'pet' => 'setPet'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'book' => 'getBook',
        'apparel' => 'getApparel',
        'value_shopper' => 'getValueShopper',
        'interests' => 'getInterests',
        'pet' => 'getPet'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const PET_HASPETS = 'HASPETS';
    const PET_EQUESTRIAN = 'EQUESTRIAN';
    const PET_CAT = 'CAT';
    const PET_DOG = 'DOG';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPetAllowableValues()
    {
        return [
            self::PET_HASPETS,
            self::PET_EQUESTRIAN,
            self::PET_CAT,
            self::PET_DOG,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['book'] = $data['book'] ?? null;
        $this->container['apparel'] = $data['apparel'] ?? null;
        $this->container['value_shopper'] = $data['value_shopper'] ?? null;
        $this->container['interests'] = $data['interests'] ?? null;
        $this->container['pet'] = $data['pet'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getPetAllowableValues();
        if (!is_null($this->container['pet']) && !in_array($this->container['pet'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'pet', must be one of '%s'",
                $this->container['pet'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets book
     *
     * @return \OpenAPI\Client\Stakkd.model\DemographicsAppendResponseLifeStylesBook|null
     */
    public function getBook()
    {
        return $this->container['book'];
    }

    /**
     * Sets book
     *
     * @param \OpenAPI\Client\Stakkd.model\DemographicsAppendResponseLifeStylesBook|null $book book
     *
     * @return self
     */
    public function setBook($book)
    {
        $this->container['book'] = $book;

        return $this;
    }

    /**
     * Gets apparel
     *
     * @return \OpenAPI\Client\Stakkd.model\DemographicsAppendResponseLifeStylesApparel|null
     */
    public function getApparel()
    {
        return $this->container['apparel'];
    }

    /**
     * Sets apparel
     *
     * @param \OpenAPI\Client\Stakkd.model\DemographicsAppendResponseLifeStylesApparel|null $apparel apparel
     *
     * @return self
     */
    public function setApparel($apparel)
    {
        $this->container['apparel'] = $apparel;

        return $this;
    }

    /**
     * Gets value_shopper
     *
     * @return bool|null
     */
    public function getValueShopper()
    {
        return $this->container['value_shopper'];
    }

    /**
     * Sets value_shopper
     *
     * @param bool|null $value_shopper Indicates whether the person is flagged as a value shopper.
     *
     * @return self
     */
    public function setValueShopper($value_shopper)
    {
        $this->container['value_shopper'] = $value_shopper;

        return $this;
    }

    /**
     * Gets interests
     *
     * @return \OpenAPI\Client\Stakkd.model\DemographicsAppendResponseLifeStylesInterests|null
     */
    public function getInterests()
    {
        return $this->container['interests'];
    }

    /**
     * Sets interests
     *
     * @param \OpenAPI\Client\Stakkd.model\DemographicsAppendResponseLifeStylesInterests|null $interests interests
     *
     * @return self
     */
    public function setInterests($interests)
    {
        $this->container['interests'] = $interests;

        return $this;
    }

    /**
     * Gets pet
     *
     * @return string|null
     */
    public function getPet()
    {
        return $this->container['pet'];
    }

    /**
     * Sets pet
     *
     * @param string|null $pet The type of pet the person owns.
     *
     * @return self
     */
    public function setPet($pet)
    {
        $allowedValues = $this->getPetAllowableValues();
        if (!is_null($pet) && !in_array($pet, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'pet', must be one of '%s'",
                    $pet,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['pet'] = $pet;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


