<?php
/**
 * DemographicsAppendResponseLifeStylesInterests
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Stakkd API
 *
 * # Introduction The Stakkd platform provides comprehensive data services that meet the business objectives of organizations ranging from Fortune 500 companies to startups. Our clients work in an array of industries, including insurance, financial, legal, travel, hospitality, retail, health, media, and telecommunications.  The Stakkd API is documented using the Open API 3.0.1 standard.  All endpoints are available at https://api.stakkd.io/v1. Detailed documentation for each endpoint is below, including the full URL for the endpoint.  # Account Types The API supports two different account types, each with different permissions.  ## Paid Account Paid accounts provide unlimited access to all of the URIs.  ## Trial Account Trial Accounts have a limited number of queries to the APIs. Keep in mind that queries which do not return results still count against the Trial Account query limits. Trial Accounts are temporary, but can be upgraded or extended by contacting [support@stakkd.io](mailto:support@stakkd.io)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.4.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Stakkd.model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * DemographicsAppendResponseLifeStylesInterests Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class DemographicsAppendResponseLifeStylesInterests implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'demographicsAppendResponse_lifeStyles_interests';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'home_and_garden' => 'string',
        'motorcycling' => 'bool',
        'sports' => 'string',
        'self_improvement' => 'string',
        'gambling' => 'bool',
        'collectibles' => 'string',
        'technology' => 'bool',
        'outdoors' => 'string',
        'fitness' => 'string',
        'home_improvement' => 'string',
        'cooking' => 'string',
        'auto_parts' => 'bool',
        'investing' => 'bool',
        'boating' => 'bool',
        'travel' => 'string',
        'arts' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'home_and_garden' => null,
        'motorcycling' => null,
        'sports' => null,
        'self_improvement' => null,
        'gambling' => null,
        'collectibles' => null,
        'technology' => null,
        'outdoors' => null,
        'fitness' => null,
        'home_improvement' => null,
        'cooking' => null,
        'auto_parts' => null,
        'investing' => null,
        'boating' => null,
        'travel' => null,
        'arts' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'home_and_garden' => 'homeAndGarden',
        'motorcycling' => 'motorcycling',
        'sports' => 'sports',
        'self_improvement' => 'selfImprovement',
        'gambling' => 'gambling',
        'collectibles' => 'collectibles',
        'technology' => 'technology',
        'outdoors' => 'outdoors',
        'fitness' => 'fitness',
        'home_improvement' => 'homeImprovement',
        'cooking' => 'cooking',
        'auto_parts' => 'autoParts',
        'investing' => 'investing',
        'boating' => 'boating',
        'travel' => 'travel',
        'arts' => 'arts'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'home_and_garden' => 'setHomeAndGarden',
        'motorcycling' => 'setMotorcycling',
        'sports' => 'setSports',
        'self_improvement' => 'setSelfImprovement',
        'gambling' => 'setGambling',
        'collectibles' => 'setCollectibles',
        'technology' => 'setTechnology',
        'outdoors' => 'setOutdoors',
        'fitness' => 'setFitness',
        'home_improvement' => 'setHomeImprovement',
        'cooking' => 'setCooking',
        'auto_parts' => 'setAutoParts',
        'investing' => 'setInvesting',
        'boating' => 'setBoating',
        'travel' => 'setTravel',
        'arts' => 'setArts'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'home_and_garden' => 'getHomeAndGarden',
        'motorcycling' => 'getMotorcycling',
        'sports' => 'getSports',
        'self_improvement' => 'getSelfImprovement',
        'gambling' => 'getGambling',
        'collectibles' => 'getCollectibles',
        'technology' => 'getTechnology',
        'outdoors' => 'getOutdoors',
        'fitness' => 'getFitness',
        'home_improvement' => 'getHomeImprovement',
        'cooking' => 'getCooking',
        'auto_parts' => 'getAutoParts',
        'investing' => 'getInvesting',
        'boating' => 'getBoating',
        'travel' => 'getTravel',
        'arts' => 'getArts'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const HOME_AND_GARDEN_SEWINGANDKNITTING = 'SEWINGANDKNITTING';
    const HOME_AND_GARDEN_WOODWORKING = 'WOODWORKING';
    const HOME_AND_GARDEN_PHOTOGRAPHY = 'PHOTOGRAPHY';
    const HOME_AND_GARDEN_HOMEANDGARDEN = 'HOMEANDGARDEN';
    const SPORTS_GENERALINTEREST = 'GENERALINTEREST';
    const SPORTS_FOOTBALL = 'FOOTBALL';
    const SPORTS_BASEBALL = 'BASEBALL';
    const SPORTS_GOLF = 'GOLF';
    const SPORTS_TENNIS = 'TENNIS';
    const SPORTS_RACING = 'RACING';
    const SELF_IMPROVEMENT_HEALTHANDMEDICAL = 'HEALTHANDMEDICAL';
    const SELF_IMPROVEMENT_DIETINGWEIGHTLOSS = 'DIETINGWEIGHTLOSS';
    const SELF_IMPROVEMENT_SELFIMPROVEMENT = 'SELFIMPROVEMENT';
    const COLLECTIBLES_GENERALINTEREST = 'GENERALINTEREST';
    const COLLECTIBLES_ANTIQUESINTEREST = 'ANTIQUESINTEREST';
    const COLLECTIBLES_SPORTSINTEREST = 'SPORTSINTEREST';
    const OUTDOORS_GENERALINTEREST = 'GENERALINTEREST';
    const OUTDOORS_SNOWSPORTS = 'SNOWSPORTS';
    const OUTDOORS_WATERSPORTS = 'WATERSPORTS';
    const OUTDOORS_HUNTINGANDFISHING = 'HUNTINGANDFISHING';
    const FITNESS_HEALTHEXERCISE = 'HEALTHEXERCISE';
    const FITNESS_RUNNING = 'RUNNING';
    const FITNESS_WALKING = 'WALKING';
    const FITNESS_AEROBICS = 'AEROBICS';
    const HOME_IMPROVEMENT_GENERALINTEREST = 'GENERALINTEREST';
    const HOME_IMPROVEMENT_DIYINTEREST = 'DIYINTEREST';
    const COOKING_GOURMETFOODANDWINE = 'GOURMETFOODANDWINE';
    const COOKING_COOKING = 'COOKING';
    const COOKING_NATURALFOODS = 'NATURALFOODS';
    const TRAVEL_TRAVEL = 'TRAVEL';
    const TRAVEL_DOMESTIC = 'DOMESTIC';
    const TRAVEL_INTERNATIONAL = 'INTERNATIONAL';
    const TRAVEL_CRUISE = 'CRUISE';
    const ARTS_ARTSINTEREST = 'ARTSINTEREST';
    const ARTS_AVIDMUSICLISTENER = 'AVIDMUSICLISTENER';
    const ARTS_ANTIQUESINTEREST = 'ANTIQUESINTEREST';
    const ARTS_PERFORMINGARTSINTEREST = 'PERFORMINGARTSINTEREST';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getHomeAndGardenAllowableValues()
    {
        return [
            self::HOME_AND_GARDEN_SEWINGANDKNITTING,
            self::HOME_AND_GARDEN_WOODWORKING,
            self::HOME_AND_GARDEN_PHOTOGRAPHY,
            self::HOME_AND_GARDEN_HOMEANDGARDEN,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSportsAllowableValues()
    {
        return [
            self::SPORTS_GENERALINTEREST,
            self::SPORTS_FOOTBALL,
            self::SPORTS_BASEBALL,
            self::SPORTS_GOLF,
            self::SPORTS_TENNIS,
            self::SPORTS_RACING,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSelfImprovementAllowableValues()
    {
        return [
            self::SELF_IMPROVEMENT_HEALTHANDMEDICAL,
            self::SELF_IMPROVEMENT_DIETINGWEIGHTLOSS,
            self::SELF_IMPROVEMENT_SELFIMPROVEMENT,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getCollectiblesAllowableValues()
    {
        return [
            self::COLLECTIBLES_GENERALINTEREST,
            self::COLLECTIBLES_ANTIQUESINTEREST,
            self::COLLECTIBLES_SPORTSINTEREST,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getOutdoorsAllowableValues()
    {
        return [
            self::OUTDOORS_GENERALINTEREST,
            self::OUTDOORS_SNOWSPORTS,
            self::OUTDOORS_WATERSPORTS,
            self::OUTDOORS_HUNTINGANDFISHING,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getFitnessAllowableValues()
    {
        return [
            self::FITNESS_HEALTHEXERCISE,
            self::FITNESS_RUNNING,
            self::FITNESS_WALKING,
            self::FITNESS_AEROBICS,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getHomeImprovementAllowableValues()
    {
        return [
            self::HOME_IMPROVEMENT_GENERALINTEREST,
            self::HOME_IMPROVEMENT_DIYINTEREST,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getCookingAllowableValues()
    {
        return [
            self::COOKING_GOURMETFOODANDWINE,
            self::COOKING_COOKING,
            self::COOKING_NATURALFOODS,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTravelAllowableValues()
    {
        return [
            self::TRAVEL_TRAVEL,
            self::TRAVEL_DOMESTIC,
            self::TRAVEL_INTERNATIONAL,
            self::TRAVEL_CRUISE,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getArtsAllowableValues()
    {
        return [
            self::ARTS_ARTSINTEREST,
            self::ARTS_AVIDMUSICLISTENER,
            self::ARTS_ANTIQUESINTEREST,
            self::ARTS_PERFORMINGARTSINTEREST,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['home_and_garden'] = $data['home_and_garden'] ?? null;
        $this->container['motorcycling'] = $data['motorcycling'] ?? null;
        $this->container['sports'] = $data['sports'] ?? null;
        $this->container['self_improvement'] = $data['self_improvement'] ?? null;
        $this->container['gambling'] = $data['gambling'] ?? null;
        $this->container['collectibles'] = $data['collectibles'] ?? null;
        $this->container['technology'] = $data['technology'] ?? null;
        $this->container['outdoors'] = $data['outdoors'] ?? null;
        $this->container['fitness'] = $data['fitness'] ?? null;
        $this->container['home_improvement'] = $data['home_improvement'] ?? null;
        $this->container['cooking'] = $data['cooking'] ?? null;
        $this->container['auto_parts'] = $data['auto_parts'] ?? null;
        $this->container['investing'] = $data['investing'] ?? null;
        $this->container['boating'] = $data['boating'] ?? null;
        $this->container['travel'] = $data['travel'] ?? null;
        $this->container['arts'] = $data['arts'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getHomeAndGardenAllowableValues();
        if (!is_null($this->container['home_and_garden']) && !in_array($this->container['home_and_garden'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'home_and_garden', must be one of '%s'",
                $this->container['home_and_garden'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getSportsAllowableValues();
        if (!is_null($this->container['sports']) && !in_array($this->container['sports'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'sports', must be one of '%s'",
                $this->container['sports'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getSelfImprovementAllowableValues();
        if (!is_null($this->container['self_improvement']) && !in_array($this->container['self_improvement'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'self_improvement', must be one of '%s'",
                $this->container['self_improvement'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getCollectiblesAllowableValues();
        if (!is_null($this->container['collectibles']) && !in_array($this->container['collectibles'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'collectibles', must be one of '%s'",
                $this->container['collectibles'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getOutdoorsAllowableValues();
        if (!is_null($this->container['outdoors']) && !in_array($this->container['outdoors'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'outdoors', must be one of '%s'",
                $this->container['outdoors'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getFitnessAllowableValues();
        if (!is_null($this->container['fitness']) && !in_array($this->container['fitness'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'fitness', must be one of '%s'",
                $this->container['fitness'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getHomeImprovementAllowableValues();
        if (!is_null($this->container['home_improvement']) && !in_array($this->container['home_improvement'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'home_improvement', must be one of '%s'",
                $this->container['home_improvement'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getCookingAllowableValues();
        if (!is_null($this->container['cooking']) && !in_array($this->container['cooking'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'cooking', must be one of '%s'",
                $this->container['cooking'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getTravelAllowableValues();
        if (!is_null($this->container['travel']) && !in_array($this->container['travel'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'travel', must be one of '%s'",
                $this->container['travel'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getArtsAllowableValues();
        if (!is_null($this->container['arts']) && !in_array($this->container['arts'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'arts', must be one of '%s'",
                $this->container['arts'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets home_and_garden
     *
     * @return string|null
     */
    public function getHomeAndGarden()
    {
        return $this->container['home_and_garden'];
    }

    /**
     * Sets home_and_garden
     *
     * @param string|null $home_and_garden The type of home and garden activities the person has an interest in.
     *
     * @return self
     */
    public function setHomeAndGarden($home_and_garden)
    {
        $allowedValues = $this->getHomeAndGardenAllowableValues();
        if (!is_null($home_and_garden) && !in_array($home_and_garden, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'home_and_garden', must be one of '%s'",
                    $home_and_garden,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['home_and_garden'] = $home_and_garden;

        return $this;
    }

    /**
     * Gets motorcycling
     *
     * @return bool|null
     */
    public function getMotorcycling()
    {
        return $this->container['motorcycling'];
    }

    /**
     * Sets motorcycling
     *
     * @param bool|null $motorcycling Indicates whether the person is flagged as a having an interest in motorcycling.
     *
     * @return self
     */
    public function setMotorcycling($motorcycling)
    {
        $this->container['motorcycling'] = $motorcycling;

        return $this;
    }

    /**
     * Gets sports
     *
     * @return string|null
     */
    public function getSports()
    {
        return $this->container['sports'];
    }

    /**
     * Sets sports
     *
     * @param string|null $sports The type of sports the person has an interest in.
     *
     * @return self
     */
    public function setSports($sports)
    {
        $allowedValues = $this->getSportsAllowableValues();
        if (!is_null($sports) && !in_array($sports, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'sports', must be one of '%s'",
                    $sports,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['sports'] = $sports;

        return $this;
    }

    /**
     * Gets self_improvement
     *
     * @return string|null
     */
    public function getSelfImprovement()
    {
        return $this->container['self_improvement'];
    }

    /**
     * Sets self_improvement
     *
     * @param string|null $self_improvement The type of self improvement activities the person has an interest in.
     *
     * @return self
     */
    public function setSelfImprovement($self_improvement)
    {
        $allowedValues = $this->getSelfImprovementAllowableValues();
        if (!is_null($self_improvement) && !in_array($self_improvement, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'self_improvement', must be one of '%s'",
                    $self_improvement,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['self_improvement'] = $self_improvement;

        return $this;
    }

    /**
     * Gets gambling
     *
     * @return bool|null
     */
    public function getGambling()
    {
        return $this->container['gambling'];
    }

    /**
     * Sets gambling
     *
     * @param bool|null $gambling Indicates whether the person is flagged as a having an interest in gambling.
     *
     * @return self
     */
    public function setGambling($gambling)
    {
        $this->container['gambling'] = $gambling;

        return $this;
    }

    /**
     * Gets collectibles
     *
     * @return string|null
     */
    public function getCollectibles()
    {
        return $this->container['collectibles'];
    }

    /**
     * Sets collectibles
     *
     * @param string|null $collectibles The type of collectibles the person has an interest in.
     *
     * @return self
     */
    public function setCollectibles($collectibles)
    {
        $allowedValues = $this->getCollectiblesAllowableValues();
        if (!is_null($collectibles) && !in_array($collectibles, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'collectibles', must be one of '%s'",
                    $collectibles,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['collectibles'] = $collectibles;

        return $this;
    }

    /**
     * Gets technology
     *
     * @return bool|null
     */
    public function getTechnology()
    {
        return $this->container['technology'];
    }

    /**
     * Sets technology
     *
     * @param bool|null $technology Indicates whether the person is flagged as a having an interest in technology.
     *
     * @return self
     */
    public function setTechnology($technology)
    {
        $this->container['technology'] = $technology;

        return $this;
    }

    /**
     * Gets outdoors
     *
     * @return string|null
     */
    public function getOutdoors()
    {
        return $this->container['outdoors'];
    }

    /**
     * Sets outdoors
     *
     * @param string|null $outdoors The type of outdoors activities the person has an interest in.
     *
     * @return self
     */
    public function setOutdoors($outdoors)
    {
        $allowedValues = $this->getOutdoorsAllowableValues();
        if (!is_null($outdoors) && !in_array($outdoors, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'outdoors', must be one of '%s'",
                    $outdoors,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['outdoors'] = $outdoors;

        return $this;
    }

    /**
     * Gets fitness
     *
     * @return string|null
     */
    public function getFitness()
    {
        return $this->container['fitness'];
    }

    /**
     * Sets fitness
     *
     * @param string|null $fitness The type of fitness activities the person has an interest in.
     *
     * @return self
     */
    public function setFitness($fitness)
    {
        $allowedValues = $this->getFitnessAllowableValues();
        if (!is_null($fitness) && !in_array($fitness, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'fitness', must be one of '%s'",
                    $fitness,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['fitness'] = $fitness;

        return $this;
    }

    /**
     * Gets home_improvement
     *
     * @return string|null
     */
    public function getHomeImprovement()
    {
        return $this->container['home_improvement'];
    }

    /**
     * Sets home_improvement
     *
     * @param string|null $home_improvement The type of home improvement activities the person has an interest in.
     *
     * @return self
     */
    public function setHomeImprovement($home_improvement)
    {
        $allowedValues = $this->getHomeImprovementAllowableValues();
        if (!is_null($home_improvement) && !in_array($home_improvement, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'home_improvement', must be one of '%s'",
                    $home_improvement,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['home_improvement'] = $home_improvement;

        return $this;
    }

    /**
     * Gets cooking
     *
     * @return string|null
     */
    public function getCooking()
    {
        return $this->container['cooking'];
    }

    /**
     * Sets cooking
     *
     * @param string|null $cooking The type of food and cooking the person has an interest in.
     *
     * @return self
     */
    public function setCooking($cooking)
    {
        $allowedValues = $this->getCookingAllowableValues();
        if (!is_null($cooking) && !in_array($cooking, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'cooking', must be one of '%s'",
                    $cooking,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['cooking'] = $cooking;

        return $this;
    }

    /**
     * Gets auto_parts
     *
     * @return bool|null
     */
    public function getAutoParts()
    {
        return $this->container['auto_parts'];
    }

    /**
     * Sets auto_parts
     *
     * @param bool|null $auto_parts Indicates whether the person is flagged as a having an interest in automobile parts.
     *
     * @return self
     */
    public function setAutoParts($auto_parts)
    {
        $this->container['auto_parts'] = $auto_parts;

        return $this;
    }

    /**
     * Gets investing
     *
     * @return bool|null
     */
    public function getInvesting()
    {
        return $this->container['investing'];
    }

    /**
     * Sets investing
     *
     * @param bool|null $investing Indicates whether the person is flagged as a having an interest in investing.
     *
     * @return self
     */
    public function setInvesting($investing)
    {
        $this->container['investing'] = $investing;

        return $this;
    }

    /**
     * Gets boating
     *
     * @return bool|null
     */
    public function getBoating()
    {
        return $this->container['boating'];
    }

    /**
     * Sets boating
     *
     * @param bool|null $boating Indicates whether the person is flagged as a having an interest in boating.
     *
     * @return self
     */
    public function setBoating($boating)
    {
        $this->container['boating'] = $boating;

        return $this;
    }

    /**
     * Gets travel
     *
     * @return string|null
     */
    public function getTravel()
    {
        return $this->container['travel'];
    }

    /**
     * Sets travel
     *
     * @param string|null $travel The type of traveling the person has an interest in.
     *
     * @return self
     */
    public function setTravel($travel)
    {
        $allowedValues = $this->getTravelAllowableValues();
        if (!is_null($travel) && !in_array($travel, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'travel', must be one of '%s'",
                    $travel,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['travel'] = $travel;

        return $this;
    }

    /**
     * Gets arts
     *
     * @return string|null
     */
    public function getArts()
    {
        return $this->container['arts'];
    }

    /**
     * Sets arts
     *
     * @param string|null $arts The type of arts the person has an interest in.
     *
     * @return self
     */
    public function setArts($arts)
    {
        $allowedValues = $this->getArtsAllowableValues();
        if (!is_null($arts) && !in_array($arts, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'arts', must be one of '%s'",
                    $arts,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['arts'] = $arts;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


