<?php
/**
 * DemographicsAppendResponseDemographicsResidence
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Stakkd API
 *
 * # Introduction The Stakkd platform provides comprehensive data services that meet the business objectives of organizations ranging from Fortune 500 companies to startups. Our clients work in an array of industries, including insurance, financial, legal, travel, hospitality, retail, health, media, and telecommunications.  The Stakkd API is documented using the Open API 3.0.1 standard.  All endpoints are available at https://api.stakkd.io/v1. Detailed documentation for each endpoint is below, including the full URL for the endpoint.  # Account Types The API supports two different account types, each with different permissions.  ## Paid Account Paid accounts provide unlimited access to all of the URIs.  ## Trial Account Trial Accounts have a limited number of queries to the APIs. Keep in mind that queries which do not return results still count against the Trial Account query limits. Trial Accounts are temporary, but can be upgraded or extended by contacting [support@stakkd.io](mailto:support@stakkd.io)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.4.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Stakkd.model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * DemographicsAppendResponseDemographicsResidence Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class DemographicsAppendResponseDemographicsResidence implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'demographicsAppendResponse_demographics_residence';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'homeowner' => 'string',
        'has_pool' => 'bool',
        'estimated_market_value' => 'string',
        'length_of_residence' => 'int',
        'year_home_built' => 'int',
        'median_house_value' => 'string',
        'dwelling' => '\OpenAPI\Client\Stakkd.model\DemographicsAppendResponseDemographicsResidenceDwelling',
        'is_mobile_home' => 'bool',
        'has_fireplace' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'homeowner' => null,
        'has_pool' => null,
        'estimated_market_value' => null,
        'length_of_residence' => null,
        'year_home_built' => null,
        'median_house_value' => null,
        'dwelling' => null,
        'is_mobile_home' => null,
        'has_fireplace' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'homeowner' => 'homeowner',
        'has_pool' => 'hasPool',
        'estimated_market_value' => 'estimatedMarketValue',
        'length_of_residence' => 'lengthOfResidence',
        'year_home_built' => 'yearHomeBuilt',
        'median_house_value' => 'medianHouseValue',
        'dwelling' => 'dwelling',
        'is_mobile_home' => 'isMobileHome',
        'has_fireplace' => 'hasFireplace'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'homeowner' => 'setHomeowner',
        'has_pool' => 'setHasPool',
        'estimated_market_value' => 'setEstimatedMarketValue',
        'length_of_residence' => 'setLengthOfResidence',
        'year_home_built' => 'setYearHomeBuilt',
        'median_house_value' => 'setMedianHouseValue',
        'dwelling' => 'setDwelling',
        'is_mobile_home' => 'setIsMobileHome',
        'has_fireplace' => 'setHasFireplace'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'homeowner' => 'getHomeowner',
        'has_pool' => 'getHasPool',
        'estimated_market_value' => 'getEstimatedMarketValue',
        'length_of_residence' => 'getLengthOfResidence',
        'year_home_built' => 'getYearHomeBuilt',
        'median_house_value' => 'getMedianHouseValue',
        'dwelling' => 'getDwelling',
        'is_mobile_home' => 'getIsMobileHome',
        'has_fireplace' => 'getHasFireplace'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const HOMEOWNER_TENANT = 'TENANT';
    const HOMEOWNER_OWNER = 'OWNER';
    const ESTIMATED_MARKET_VALUE_A = 'A';
    const ESTIMATED_MARKET_VALUE_B = 'B';
    const ESTIMATED_MARKET_VALUE_C = 'C';
    const ESTIMATED_MARKET_VALUE_D = 'D';
    const ESTIMATED_MARKET_VALUE_E = 'E';
    const ESTIMATED_MARKET_VALUE_F = 'F';
    const ESTIMATED_MARKET_VALUE_G = 'G';
    const ESTIMATED_MARKET_VALUE_H = 'H';
    const ESTIMATED_MARKET_VALUE_I = 'I';
    const ESTIMATED_MARKET_VALUE_J = 'J';
    const ESTIMATED_MARKET_VALUE_K = 'K';
    const ESTIMATED_MARKET_VALUE_L = 'L';
    const ESTIMATED_MARKET_VALUE_M = 'M';
    const ESTIMATED_MARKET_VALUE_N = 'N';
    const ESTIMATED_MARKET_VALUE_O = 'O';
    const ESTIMATED_MARKET_VALUE_P = 'P';
    const ESTIMATED_MARKET_VALUE_Q = 'Q';
    const ESTIMATED_MARKET_VALUE_R = 'R';
    const ESTIMATED_MARKET_VALUE_S = 'S';
    const MEDIAN_HOUSE_VALUE_A = 'A';
    const MEDIAN_HOUSE_VALUE_B = 'B';
    const MEDIAN_HOUSE_VALUE_C = 'C';
    const MEDIAN_HOUSE_VALUE_D = 'D';
    const MEDIAN_HOUSE_VALUE_E = 'E';
    const MEDIAN_HOUSE_VALUE_F = 'F';
    const MEDIAN_HOUSE_VALUE_G = 'G';
    const MEDIAN_HOUSE_VALUE_H = 'H';
    const MEDIAN_HOUSE_VALUE_I = 'I';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getHomeownerAllowableValues()
    {
        return [
            self::HOMEOWNER_TENANT,
            self::HOMEOWNER_OWNER,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getEstimatedMarketValueAllowableValues()
    {
        return [
            self::ESTIMATED_MARKET_VALUE_A,
            self::ESTIMATED_MARKET_VALUE_B,
            self::ESTIMATED_MARKET_VALUE_C,
            self::ESTIMATED_MARKET_VALUE_D,
            self::ESTIMATED_MARKET_VALUE_E,
            self::ESTIMATED_MARKET_VALUE_F,
            self::ESTIMATED_MARKET_VALUE_G,
            self::ESTIMATED_MARKET_VALUE_H,
            self::ESTIMATED_MARKET_VALUE_I,
            self::ESTIMATED_MARKET_VALUE_J,
            self::ESTIMATED_MARKET_VALUE_K,
            self::ESTIMATED_MARKET_VALUE_L,
            self::ESTIMATED_MARKET_VALUE_M,
            self::ESTIMATED_MARKET_VALUE_N,
            self::ESTIMATED_MARKET_VALUE_O,
            self::ESTIMATED_MARKET_VALUE_P,
            self::ESTIMATED_MARKET_VALUE_Q,
            self::ESTIMATED_MARKET_VALUE_R,
            self::ESTIMATED_MARKET_VALUE_S,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getMedianHouseValueAllowableValues()
    {
        return [
            self::MEDIAN_HOUSE_VALUE_A,
            self::MEDIAN_HOUSE_VALUE_B,
            self::MEDIAN_HOUSE_VALUE_C,
            self::MEDIAN_HOUSE_VALUE_D,
            self::MEDIAN_HOUSE_VALUE_E,
            self::MEDIAN_HOUSE_VALUE_F,
            self::MEDIAN_HOUSE_VALUE_G,
            self::MEDIAN_HOUSE_VALUE_H,
            self::MEDIAN_HOUSE_VALUE_I,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['homeowner'] = $data['homeowner'] ?? null;
        $this->container['has_pool'] = $data['has_pool'] ?? null;
        $this->container['estimated_market_value'] = $data['estimated_market_value'] ?? null;
        $this->container['length_of_residence'] = $data['length_of_residence'] ?? null;
        $this->container['year_home_built'] = $data['year_home_built'] ?? null;
        $this->container['median_house_value'] = $data['median_house_value'] ?? null;
        $this->container['dwelling'] = $data['dwelling'] ?? null;
        $this->container['is_mobile_home'] = $data['is_mobile_home'] ?? null;
        $this->container['has_fireplace'] = $data['has_fireplace'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getHomeownerAllowableValues();
        if (!is_null($this->container['homeowner']) && !in_array($this->container['homeowner'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'homeowner', must be one of '%s'",
                $this->container['homeowner'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getEstimatedMarketValueAllowableValues();
        if (!is_null($this->container['estimated_market_value']) && !in_array($this->container['estimated_market_value'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'estimated_market_value', must be one of '%s'",
                $this->container['estimated_market_value'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getMedianHouseValueAllowableValues();
        if (!is_null($this->container['median_house_value']) && !in_array($this->container['median_house_value'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'median_house_value', must be one of '%s'",
                $this->container['median_house_value'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets homeowner
     *
     * @return string|null
     */
    public function getHomeowner()
    {
        return $this->container['homeowner'];
    }

    /**
     * Sets homeowner
     *
     * @param string|null $homeowner Indicates whether the person is the owner or a tenant of the residence.
     *
     * @return self
     */
    public function setHomeowner($homeowner)
    {
        $allowedValues = $this->getHomeownerAllowableValues();
        if (!is_null($homeowner) && !in_array($homeowner, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'homeowner', must be one of '%s'",
                    $homeowner,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['homeowner'] = $homeowner;

        return $this;
    }

    /**
     * Gets has_pool
     *
     * @return bool|null
     */
    public function getHasPool()
    {
        return $this->container['has_pool'];
    }

    /**
     * Sets has_pool
     *
     * @param bool|null $has_pool Indicates whether the residence is flagged as having a pool.
     *
     * @return self
     */
    public function setHasPool($has_pool)
    {
        $this->container['has_pool'] = $has_pool;

        return $this;
    }

    /**
     * Gets estimated_market_value
     *
     * @return string|null
     */
    public function getEstimatedMarketValue()
    {
        return $this->container['estimated_market_value'];
    }

    /**
     * Sets estimated_market_value
     *
     * @param string|null $estimated_market_value The estimated market value of the residence, where A = $1, 000 - $24, 999; B = $25, 000 - $49, 999; C = $50, 000 - $74, 999; D = $75, 000 - $99, 999; E = $100, 000 - $124, 999; F = $125, 000 - $149, 999; G = $150, 000 - $174, 999; H = $175, 000 - $199, 999; I = $200, 000 - $224, 999; J = $225, 000 - $249, 999; K = $250, 000 - $274, 999; L = $275, 000 - $299, 999; M = $300, 000 - $349, 999; N = $350, 000 - $399, 999; O = $400, 000 - $449, 999; P = $450, 000 - $499, 999; Q = $500, 000 - $749, 999; R = $750, 000 - $999, 999; S = > $999,999.
     *
     * @return self
     */
    public function setEstimatedMarketValue($estimated_market_value)
    {
        $allowedValues = $this->getEstimatedMarketValueAllowableValues();
        if (!is_null($estimated_market_value) && !in_array($estimated_market_value, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'estimated_market_value', must be one of '%s'",
                    $estimated_market_value,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['estimated_market_value'] = $estimated_market_value;

        return $this;
    }

    /**
     * Gets length_of_residence
     *
     * @return int|null
     */
    public function getLengthOfResidence()
    {
        return $this->container['length_of_residence'];
    }

    /**
     * Sets length_of_residence
     *
     * @param int|null $length_of_residence The number of years the person has lived at the residence.
     *
     * @return self
     */
    public function setLengthOfResidence($length_of_residence)
    {
        $this->container['length_of_residence'] = $length_of_residence;

        return $this;
    }

    /**
     * Gets year_home_built
     *
     * @return int|null
     */
    public function getYearHomeBuilt()
    {
        return $this->container['year_home_built'];
    }

    /**
     * Sets year_home_built
     *
     * @param int|null $year_home_built The year the residence was built.
     *
     * @return self
     */
    public function setYearHomeBuilt($year_home_built)
    {
        $this->container['year_home_built'] = $year_home_built;

        return $this;
    }

    /**
     * Gets median_house_value
     *
     * @return string|null
     */
    public function getMedianHouseValue()
    {
        return $this->container['median_house_value'];
    }

    /**
     * Sets median_house_value
     *
     * @param string|null $median_house_value The median value of the residence, where A = < $50, 000; B = $50, 000 - $99, 999; C = $100, 000 - $149, 999; D = $150, 000 - $249, 999; E = $250, 000 - $349, 999; F = $350, 000 - $499, 999; G = $500, 000 - $749, 999; H = $750, 000 - $999, 999; I = > $999,999.
     *
     * @return self
     */
    public function setMedianHouseValue($median_house_value)
    {
        $allowedValues = $this->getMedianHouseValueAllowableValues();
        if (!is_null($median_house_value) && !in_array($median_house_value, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'median_house_value', must be one of '%s'",
                    $median_house_value,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['median_house_value'] = $median_house_value;

        return $this;
    }

    /**
     * Gets dwelling
     *
     * @return \OpenAPI\Client\Stakkd.model\DemographicsAppendResponseDemographicsResidenceDwelling|null
     */
    public function getDwelling()
    {
        return $this->container['dwelling'];
    }

    /**
     * Sets dwelling
     *
     * @param \OpenAPI\Client\Stakkd.model\DemographicsAppendResponseDemographicsResidenceDwelling|null $dwelling dwelling
     *
     * @return self
     */
    public function setDwelling($dwelling)
    {
        $this->container['dwelling'] = $dwelling;

        return $this;
    }

    /**
     * Gets is_mobile_home
     *
     * @return bool|null
     */
    public function getIsMobileHome()
    {
        return $this->container['is_mobile_home'];
    }

    /**
     * Sets is_mobile_home
     *
     * @param bool|null $is_mobile_home Indicates whether the residence is flagged as a mobile home.
     *
     * @return self
     */
    public function setIsMobileHome($is_mobile_home)
    {
        $this->container['is_mobile_home'] = $is_mobile_home;

        return $this;
    }

    /**
     * Gets has_fireplace
     *
     * @return bool|null
     */
    public function getHasFireplace()
    {
        return $this->container['has_fireplace'];
    }

    /**
     * Sets has_fireplace
     *
     * @param bool|null $has_fireplace Indicates whether the residence is flagged as having a fireplace.
     *
     * @return self
     */
    public function setHasFireplace($has_fireplace)
    {
        $this->container['has_fireplace'] = $has_fireplace;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


