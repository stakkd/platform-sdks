//
// DemographicsAppendResponseDemographicsPerson.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct DemographicsAppendResponseDemographicsPerson: Codable, JSONEncodable, Hashable {

    public enum Gender: String, Codable, CaseIterable {
        case m = "M"
        case f = "F"
        case u = "U"
    }
    public enum Ethnicity: String, Codable, CaseIterable {
        case asian = "ASIAN"
        case africanamerican = "AFRICANAMERICAN"
        case hispanic = "HISPANIC"
    }
    public var education: DemographicsAppendResponseDemographicsPersonEducation?
    /** The gender of the person, where: M = Male; F = Female; U = Unknown. */
    public var gender: Gender?
    /** The ethnicity of the person. */
    public var ethnicity: Ethnicity?
    public var race: DemographicsAppendResponseDemographicsPersonRace?
    /** The date of birth as the person, formatted: yyyyMM */
    public var dateOfBirth: String?
    public var workerType: DemographicsAppendResponseDemographicsPersonWorkerType?
    /** The Penetration Percentage for indicating whether the person is a mail order respondent, +/- 3%. */
    public var percentMailOrderRespondent: Int?
    public var language: DemographicsAppendResponseDemographicsPersonLanguage?
    public var finances: DemographicsAppendResponseDemographicsPersonFinances?
    /** Indicates whether the person is flagged as a senior. */
    public var isSenior: Bool?
    /** The age of the person. */
    public var age: Int?

    public init(education: DemographicsAppendResponseDemographicsPersonEducation? = nil, gender: Gender? = nil, ethnicity: Ethnicity? = nil, race: DemographicsAppendResponseDemographicsPersonRace? = nil, dateOfBirth: String? = nil, workerType: DemographicsAppendResponseDemographicsPersonWorkerType? = nil, percentMailOrderRespondent: Int? = nil, language: DemographicsAppendResponseDemographicsPersonLanguage? = nil, finances: DemographicsAppendResponseDemographicsPersonFinances? = nil, isSenior: Bool? = nil, age: Int? = nil) {
        self.education = education
        self.gender = gender
        self.ethnicity = ethnicity
        self.race = race
        self.dateOfBirth = dateOfBirth
        self.workerType = workerType
        self.percentMailOrderRespondent = percentMailOrderRespondent
        self.language = language
        self.finances = finances
        self.isSenior = isSenior
        self.age = age
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case education
        case gender
        case ethnicity
        case race
        case dateOfBirth
        case workerType
        case percentMailOrderRespondent
        case language
        case finances
        case isSenior
        case age
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(education, forKey: .education)
        try container.encodeIfPresent(gender, forKey: .gender)
        try container.encodeIfPresent(ethnicity, forKey: .ethnicity)
        try container.encodeIfPresent(race, forKey: .race)
        try container.encodeIfPresent(dateOfBirth, forKey: .dateOfBirth)
        try container.encodeIfPresent(workerType, forKey: .workerType)
        try container.encodeIfPresent(percentMailOrderRespondent, forKey: .percentMailOrderRespondent)
        try container.encodeIfPresent(language, forKey: .language)
        try container.encodeIfPresent(finances, forKey: .finances)
        try container.encodeIfPresent(isSenior, forKey: .isSenior)
        try container.encodeIfPresent(age, forKey: .age)
    }
}

