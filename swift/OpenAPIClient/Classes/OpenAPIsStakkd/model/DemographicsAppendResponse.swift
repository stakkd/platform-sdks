//
// DemographicsAppendResponse.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct DemographicsAppendResponse: Codable, JSONEncodable, Hashable {

    public enum CategoryMatch: String, Codable, CaseIterable {
        case address = "ADDRESS"
        case household = "HOUSEHOLD"
        case individual = "INDIVIDUAL"
        case nameandzip = "NAMEANDZIP"
        case _none = "NONE"
    }
    public var address: IpLookupResponseAddress?
    /** An array of related phone numbers. */
    public var phones: [DemographicsAppendResponsePhones]?
    /** The type of match the data represents. */
    public var categoryMatch: CategoryMatch?
    public var lifeStyles: DemographicsAppendResponseLifeStyles?
    public var demographics: DemographicsAppendResponseDemographics?

    public init(address: IpLookupResponseAddress? = nil, phones: [DemographicsAppendResponsePhones]? = nil, categoryMatch: CategoryMatch? = nil, lifeStyles: DemographicsAppendResponseLifeStyles? = nil, demographics: DemographicsAppendResponseDemographics? = nil) {
        self.address = address
        self.phones = phones
        self.categoryMatch = categoryMatch
        self.lifeStyles = lifeStyles
        self.demographics = demographics
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case address
        case phones
        case categoryMatch
        case lifeStyles
        case demographics
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(address, forKey: .address)
        try container.encodeIfPresent(phones, forKey: .phones)
        try container.encodeIfPresent(categoryMatch, forKey: .categoryMatch)
        try container.encodeIfPresent(lifeStyles, forKey: .lifeStyles)
        try container.encodeIfPresent(demographics, forKey: .demographics)
    }
}

