//
// DemographicsAppendResponseDemographicsResidence.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct DemographicsAppendResponseDemographicsResidence: Codable, JSONEncodable, Hashable {

    public enum Homeowner: String, Codable, CaseIterable {
        case tenant = "TENANT"
        case owner = "OWNER"
    }
    public enum EstimatedMarketValue: String, Codable, CaseIterable {
        case a = "A"
        case b = "B"
        case c = "C"
        case d = "D"
        case e = "E"
        case f = "F"
        case g = "G"
        case h = "H"
        case i = "I"
        case j = "J"
        case k = "K"
        case l = "L"
        case m = "M"
        case n = "N"
        case o = "O"
        case p = "P"
        case q = "Q"
        case r = "R"
        case s = "S"
    }
    public enum MedianHouseValue: String, Codable, CaseIterable {
        case a = "A"
        case b = "B"
        case c = "C"
        case d = "D"
        case e = "E"
        case f = "F"
        case g = "G"
        case h = "H"
        case i = "I"
    }
    /** Indicates whether the person is the owner or a tenant of the residence. */
    public var homeowner: Homeowner?
    /** Indicates whether the residence is flagged as having a pool. */
    public var hasPool: Bool?
    /** The estimated market value of the residence, where A = $1, 000 - $24, 999; B = $25, 000 - $49, 999; C = $50, 000 - $74, 999; D = $75, 000 - $99, 999; E = $100, 000 - $124, 999; F = $125, 000 - $149, 999; G = $150, 000 - $174, 999; H = $175, 000 - $199, 999; I = $200, 000 - $224, 999; J = $225, 000 - $249, 999; K = $250, 000 - $274, 999; L = $275, 000 - $299, 999; M = $300, 000 - $349, 999; N = $350, 000 - $399, 999; O = $400, 000 - $449, 999; P = $450, 000 - $499, 999; Q = $500, 000 - $749, 999; R = $750, 000 - $999, 999; S = > $999,999. */
    public var estimatedMarketValue: EstimatedMarketValue?
    /** The number of years the person has lived at the residence. */
    public var lengthOfResidence: Int?
    /** The year the residence was built. */
    public var yearHomeBuilt: Int?
    /** The median value of the residence, where A = < $50, 000; B = $50, 000 - $99, 999; C = $100, 000 - $149, 999; D = $150, 000 - $249, 999; E = $250, 000 - $349, 999; F = $350, 000 - $499, 999; G = $500, 000 - $749, 999; H = $750, 000 - $999, 999; I = > $999,999. */
    public var medianHouseValue: MedianHouseValue?
    public var dwelling: DemographicsAppendResponseDemographicsResidenceDwelling?
    /** Indicates whether the residence is flagged as a mobile home. */
    public var isMobileHome: Bool?
    /** Indicates whether the residence is flagged as having a fireplace. */
    public var hasFireplace: Bool?

    public init(homeowner: Homeowner? = nil, hasPool: Bool? = nil, estimatedMarketValue: EstimatedMarketValue? = nil, lengthOfResidence: Int? = nil, yearHomeBuilt: Int? = nil, medianHouseValue: MedianHouseValue? = nil, dwelling: DemographicsAppendResponseDemographicsResidenceDwelling? = nil, isMobileHome: Bool? = nil, hasFireplace: Bool? = nil) {
        self.homeowner = homeowner
        self.hasPool = hasPool
        self.estimatedMarketValue = estimatedMarketValue
        self.lengthOfResidence = lengthOfResidence
        self.yearHomeBuilt = yearHomeBuilt
        self.medianHouseValue = medianHouseValue
        self.dwelling = dwelling
        self.isMobileHome = isMobileHome
        self.hasFireplace = hasFireplace
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case homeowner
        case hasPool
        case estimatedMarketValue
        case lengthOfResidence
        case yearHomeBuilt
        case medianHouseValue
        case dwelling
        case isMobileHome
        case hasFireplace
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(homeowner, forKey: .homeowner)
        try container.encodeIfPresent(hasPool, forKey: .hasPool)
        try container.encodeIfPresent(estimatedMarketValue, forKey: .estimatedMarketValue)
        try container.encodeIfPresent(lengthOfResidence, forKey: .lengthOfResidence)
        try container.encodeIfPresent(yearHomeBuilt, forKey: .yearHomeBuilt)
        try container.encodeIfPresent(medianHouseValue, forKey: .medianHouseValue)
        try container.encodeIfPresent(dwelling, forKey: .dwelling)
        try container.encodeIfPresent(isMobileHome, forKey: .isMobileHome)
        try container.encodeIfPresent(hasFireplace, forKey: .hasFireplace)
    }
}

