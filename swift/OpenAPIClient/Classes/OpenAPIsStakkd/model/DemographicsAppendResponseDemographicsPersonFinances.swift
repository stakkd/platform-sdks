//
// DemographicsAppendResponseDemographicsPersonFinances.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct DemographicsAppendResponseDemographicsPersonFinances: Codable, JSONEncodable, Hashable {

    public enum EstimatedIncome: String, Codable, CaseIterable {
        case a = "A"
        case b = "B"
        case c = "C"
        case d = "D"
        case e = "E"
        case f = "F"
        case g = "G"
        case h = "H"
        case i = "I"
    }
    public enum EstimatedNetWorth: String, Codable, CaseIterable {
        case a = "A"
        case b = "B"
        case c = "C"
        case d = "D"
        case e = "E"
        case f = "F"
        case g = "G"
        case h = "H"
    }
    /** The estimated income of the person, where: A = < $20, 000; B = $20, 000 - $29, 999; C = $30, 000 - $39, 999; D = $40, 000 - $49, 999; E = $50, 000 - $74, 999; F = $75, 000 - $99, 999; G = $100, 000 - $124, 999; H = $125, 000 - $149, 999; I = > $149,999. */
    public var estimatedIncome: EstimatedIncome?
    /** The estimated net worth of the person, where: A = < $5k; B = $5k - $19k; C = $20k - $49k; D = $50k - $80k; E = $81k - $99k; F = $100k - $249k; G = $250k - $499k; H = > $500k. */
    public var estimatedNetWorth: EstimatedNetWorth?
    /** Indicates whether the person is flagged as a charity donar. */
    public var isCharityDonar: Bool?
    /** Indicates whether the person is flagged as a credit card user. */
    public var usesCreditCard: Bool?

    public init(estimatedIncome: EstimatedIncome? = nil, estimatedNetWorth: EstimatedNetWorth? = nil, isCharityDonar: Bool? = nil, usesCreditCard: Bool? = nil) {
        self.estimatedIncome = estimatedIncome
        self.estimatedNetWorth = estimatedNetWorth
        self.isCharityDonar = isCharityDonar
        self.usesCreditCard = usesCreditCard
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case estimatedIncome
        case estimatedNetWorth
        case isCharityDonar
        case usesCreditCard
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(estimatedIncome, forKey: .estimatedIncome)
        try container.encodeIfPresent(estimatedNetWorth, forKey: .estimatedNetWorth)
        try container.encodeIfPresent(isCharityDonar, forKey: .isCharityDonar)
        try container.encodeIfPresent(usesCreditCard, forKey: .usesCreditCard)
    }
}

