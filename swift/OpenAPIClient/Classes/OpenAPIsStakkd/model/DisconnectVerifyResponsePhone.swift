//
// DisconnectVerifyResponsePhone.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct DisconnectVerifyResponsePhone: Codable, JSONEncodable, Hashable {

    public enum PhoneType: String, Codable, CaseIterable {
        case l = "L"
        case v = "V"
        case w = "W"
        case o = "O"
    }
    public enum DirectoryAssistance: String, Codable, CaseIterable {
        case _private = "PRIVATE"
        case removed = "REMOVED"
        case exists = "EXISTS"
    }
    public enum RecordType: String, Codable, CaseIterable {
        case payphone = "PAYPHONE"
        case residential = "RESIDENTIAL"
        case business = "BUSINESS"
        case unknown = "UNKNOWN"
    }
    /** The phone type, where: L = 'Landline', V = 'VoIP', W = 'Wireless', and O = 'Other'. */
    public var phoneType: PhoneType?
    /** The phone number. */
    public var phone: String?
    /** The name of the phone provider. */
    public var provider: String?
    /** The 4 character alphanumeric phone operating company number. */
    public var operatingCompanyNumber: String?
    /** The telephone confidence score, ranging between 1 and 7, where 1 indicates highest confidence and 7 indicates unconfirmed. */
    public var confidenceScore: Int?
    /** The date the record was first received, formatted: YYYYMMDD */
    public var initialDateReceived: String?
    /** The date the reocrd was last received as connected, formatted: YYYYMMDD */
    public var lastDateReceived: String?
    /** The directory assistance indicator. */
    public var directoryAssistance: DirectoryAssistance?
    /** The phone record type. */
    public var recordType: RecordType?
    /** Indicates whether or not the phone is flagged as a Direct Inward Dial Number. */
    public var directInwardDialNumber: Bool?

    public init(phoneType: PhoneType? = nil, phone: String? = nil, provider: String? = nil, operatingCompanyNumber: String? = nil, confidenceScore: Int? = nil, initialDateReceived: String? = nil, lastDateReceived: String? = nil, directoryAssistance: DirectoryAssistance? = nil, recordType: RecordType? = nil, directInwardDialNumber: Bool? = nil) {
        self.phoneType = phoneType
        self.phone = phone
        self.provider = provider
        self.operatingCompanyNumber = operatingCompanyNumber
        self.confidenceScore = confidenceScore
        self.initialDateReceived = initialDateReceived
        self.lastDateReceived = lastDateReceived
        self.directoryAssistance = directoryAssistance
        self.recordType = recordType
        self.directInwardDialNumber = directInwardDialNumber
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case phoneType
        case phone
        case provider
        case operatingCompanyNumber
        case confidenceScore
        case initialDateReceived
        case lastDateReceived
        case directoryAssistance
        case recordType
        case directInwardDialNumber
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(phoneType, forKey: .phoneType)
        try container.encodeIfPresent(phone, forKey: .phone)
        try container.encodeIfPresent(provider, forKey: .provider)
        try container.encodeIfPresent(operatingCompanyNumber, forKey: .operatingCompanyNumber)
        try container.encodeIfPresent(confidenceScore, forKey: .confidenceScore)
        try container.encodeIfPresent(initialDateReceived, forKey: .initialDateReceived)
        try container.encodeIfPresent(lastDateReceived, forKey: .lastDateReceived)
        try container.encodeIfPresent(directoryAssistance, forKey: .directoryAssistance)
        try container.encodeIfPresent(recordType, forKey: .recordType)
        try container.encodeIfPresent(directInwardDialNumber, forKey: .directInwardDialNumber)
    }
}

