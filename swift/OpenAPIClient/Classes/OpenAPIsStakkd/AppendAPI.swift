//
// AppendAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class AppendAPI {

    /**

     - parameter contentType: (header)  
     - parameter xApiKey: (header)  
     - parameter demographicsAppendRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func appendDemographicsPost(contentType: String, xApiKey: String, demographicsAppendRequest: DemographicsAppendRequest, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: DemographicsAppendResponse?, _ error: Error?) -> Void)) -> RequestTask {
        return appendDemographicsPostWithRequestBuilder(contentType: contentType, xApiKey: xApiKey, demographicsAppendRequest: demographicsAppendRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /append/demographics
     - API Key:
       - type: apiKey x-api-key 
       - name: apiKey
     - parameter contentType: (header)  
     - parameter xApiKey: (header)  
     - parameter demographicsAppendRequest: (body)  
     - returns: RequestBuilder<DemographicsAppendResponse> 
     */
    open class func appendDemographicsPostWithRequestBuilder(contentType: String, xApiKey: String, demographicsAppendRequest: DemographicsAppendRequest) -> RequestBuilder<DemographicsAppendResponse> {
        let localVariablePath = "/append/demographics"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: demographicsAppendRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": contentType.encodeToJSON(),
            "x-api-key": xApiKey.encodeToJSON(),
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<DemographicsAppendResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter contentType: (header)  
     - parameter xApiKey: (header)  
     - parameter emailAppendRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func appendEmailPost(contentType: String, xApiKey: String, emailAppendRequest: EmailAppendRequest, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: EmailAppendResponse?, _ error: Error?) -> Void)) -> RequestTask {
        return appendEmailPostWithRequestBuilder(contentType: contentType, xApiKey: xApiKey, emailAppendRequest: emailAppendRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /append/email
     - API Key:
       - type: apiKey x-api-key 
       - name: apiKey
     - parameter contentType: (header)  
     - parameter xApiKey: (header)  
     - parameter emailAppendRequest: (body)  
     - returns: RequestBuilder<EmailAppendResponse> 
     */
    open class func appendEmailPostWithRequestBuilder(contentType: String, xApiKey: String, emailAppendRequest: EmailAppendRequest) -> RequestBuilder<EmailAppendResponse> {
        let localVariablePath = "/append/email"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: emailAppendRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": contentType.encodeToJSON(),
            "x-api-key": xApiKey.encodeToJSON(),
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<EmailAppendResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter contentType: (header)  
     - parameter xApiKey: (header)  
     - parameter mobileAppendRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func appendMobilePost(contentType: String, xApiKey: String, mobileAppendRequest: MobileAppendRequest, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: MobileAppendResponse?, _ error: Error?) -> Void)) -> RequestTask {
        return appendMobilePostWithRequestBuilder(contentType: contentType, xApiKey: xApiKey, mobileAppendRequest: mobileAppendRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /append/mobile
     - API Key:
       - type: apiKey x-api-key 
       - name: apiKey
     - parameter contentType: (header)  
     - parameter xApiKey: (header)  
     - parameter mobileAppendRequest: (body)  
     - returns: RequestBuilder<MobileAppendResponse> 
     */
    open class func appendMobilePostWithRequestBuilder(contentType: String, xApiKey: String, mobileAppendRequest: MobileAppendRequest) -> RequestBuilder<MobileAppendResponse> {
        let localVariablePath = "/append/mobile"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: mobileAppendRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": contentType.encodeToJSON(),
            "x-api-key": xApiKey.encodeToJSON(),
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<MobileAppendResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter contentType: (header)  
     - parameter xApiKey: (header)  
     - parameter phoneAppendRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func appendPhonePost(contentType: String, xApiKey: String, phoneAppendRequest: PhoneAppendRequest, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: PhoneAppendResponse?, _ error: Error?) -> Void)) -> RequestTask {
        return appendPhonePostWithRequestBuilder(contentType: contentType, xApiKey: xApiKey, phoneAppendRequest: phoneAppendRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /append/phone
     - API Key:
       - type: apiKey x-api-key 
       - name: apiKey
     - parameter contentType: (header)  
     - parameter xApiKey: (header)  
     - parameter phoneAppendRequest: (body)  
     - returns: RequestBuilder<PhoneAppendResponse> 
     */
    open class func appendPhonePostWithRequestBuilder(contentType: String, xApiKey: String, phoneAppendRequest: PhoneAppendRequest) -> RequestBuilder<PhoneAppendResponse> {
        let localVariablePath = "/append/phone"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: phoneAppendRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": contentType.encodeToJSON(),
            "x-api-key": xApiKey.encodeToJSON(),
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PhoneAppendResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter contentType: (header)  
     - parameter xApiKey: (header)  
     - parameter vehicleAppendRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func appendVehiclePost(contentType: String, xApiKey: String, vehicleAppendRequest: VehicleAppendRequest, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: VehicleAppendResponse?, _ error: Error?) -> Void)) -> RequestTask {
        return appendVehiclePostWithRequestBuilder(contentType: contentType, xApiKey: xApiKey, vehicleAppendRequest: vehicleAppendRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /append/vehicle
     - API Key:
       - type: apiKey x-api-key 
       - name: apiKey
     - parameter contentType: (header)  
     - parameter xApiKey: (header)  
     - parameter vehicleAppendRequest: (body)  
     - returns: RequestBuilder<VehicleAppendResponse> 
     */
    open class func appendVehiclePostWithRequestBuilder(contentType: String, xApiKey: String, vehicleAppendRequest: VehicleAppendRequest) -> RequestBuilder<VehicleAppendResponse> {
        let localVariablePath = "/append/vehicle"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: vehicleAppendRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": contentType.encodeToJSON(),
            "x-api-key": xApiKey.encodeToJSON(),
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<VehicleAppendResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }
}
