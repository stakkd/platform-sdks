//
// VerifyAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class VerifyAPI {

    /**

     - parameter contentType: (header)  
     - parameter xApiKey: (header)  
     - parameter disconnectVerifyRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func verifyDisconnectPost(contentType: String, xApiKey: String, disconnectVerifyRequest: DisconnectVerifyRequest, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: DisconnectVerifyResponse?, _ error: Error?) -> Void)) -> RequestTask {
        return verifyDisconnectPostWithRequestBuilder(contentType: contentType, xApiKey: xApiKey, disconnectVerifyRequest: disconnectVerifyRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /verify/disconnect
     - API Key:
       - type: apiKey x-api-key 
       - name: apiKey
     - parameter contentType: (header)  
     - parameter xApiKey: (header)  
     - parameter disconnectVerifyRequest: (body)  
     - returns: RequestBuilder<DisconnectVerifyResponse> 
     */
    open class func verifyDisconnectPostWithRequestBuilder(contentType: String, xApiKey: String, disconnectVerifyRequest: DisconnectVerifyRequest) -> RequestBuilder<DisconnectVerifyResponse> {
        let localVariablePath = "/verify/disconnect"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: disconnectVerifyRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": contentType.encodeToJSON(),
            "x-api-key": xApiKey.encodeToJSON(),
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<DisconnectVerifyResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter contentType: (header)  
     - parameter xApiKey: (header)  
     - parameter emailVerifyRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func verifyEmailPost(contentType: String, xApiKey: String, emailVerifyRequest: EmailVerifyRequest, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: EmailVerifyResponse?, _ error: Error?) -> Void)) -> RequestTask {
        return verifyEmailPostWithRequestBuilder(contentType: contentType, xApiKey: xApiKey, emailVerifyRequest: emailVerifyRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /verify/email
     - API Key:
       - type: apiKey x-api-key 
       - name: apiKey
     - parameter contentType: (header)  
     - parameter xApiKey: (header)  
     - parameter emailVerifyRequest: (body)  
     - returns: RequestBuilder<EmailVerifyResponse> 
     */
    open class func verifyEmailPostWithRequestBuilder(contentType: String, xApiKey: String, emailVerifyRequest: EmailVerifyRequest) -> RequestBuilder<EmailVerifyResponse> {
        let localVariablePath = "/verify/email"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: emailVerifyRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": contentType.encodeToJSON(),
            "x-api-key": xApiKey.encodeToJSON(),
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<EmailVerifyResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter contentType: (header)  
     - parameter xApiKey: (header)  
     - parameter phoneVerifyRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func verifyPhonePost(contentType: String, xApiKey: String, phoneVerifyRequest: PhoneVerifyRequest, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: PhoneVerifyResponse?, _ error: Error?) -> Void)) -> RequestTask {
        return verifyPhonePostWithRequestBuilder(contentType: contentType, xApiKey: xApiKey, phoneVerifyRequest: phoneVerifyRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /verify/phone
     - API Key:
       - type: apiKey x-api-key 
       - name: apiKey
     - parameter contentType: (header)  
     - parameter xApiKey: (header)  
     - parameter phoneVerifyRequest: (body)  
     - returns: RequestBuilder<PhoneVerifyResponse> 
     */
    open class func verifyPhonePostWithRequestBuilder(contentType: String, xApiKey: String, phoneVerifyRequest: PhoneVerifyRequest) -> RequestBuilder<PhoneVerifyResponse> {
        let localVariablePath = "/verify/phone"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: phoneVerifyRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": contentType.encodeToJSON(),
            "x-api-key": xApiKey.encodeToJSON(),
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PhoneVerifyResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter contentType: (header)  
     - parameter xApiKey: (header)  
     - parameter tcpaVerifyRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func verifyTcpaPost(contentType: String, xApiKey: String, tcpaVerifyRequest: TcpaVerifyRequest, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: TcpaVerifyResponse?, _ error: Error?) -> Void)) -> RequestTask {
        return verifyTcpaPostWithRequestBuilder(contentType: contentType, xApiKey: xApiKey, tcpaVerifyRequest: tcpaVerifyRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /verify/tcpa
     - API Key:
       - type: apiKey x-api-key 
       - name: apiKey
     - parameter contentType: (header)  
     - parameter xApiKey: (header)  
     - parameter tcpaVerifyRequest: (body)  
     - returns: RequestBuilder<TcpaVerifyResponse> 
     */
    open class func verifyTcpaPostWithRequestBuilder(contentType: String, xApiKey: String, tcpaVerifyRequest: TcpaVerifyRequest) -> RequestBuilder<TcpaVerifyResponse> {
        let localVariablePath = "/verify/tcpa"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: tcpaVerifyRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": contentType.encodeToJSON(),
            "x-api-key": xApiKey.encodeToJSON(),
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<TcpaVerifyResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }
}
