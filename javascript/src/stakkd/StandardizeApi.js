/**
 * Stakkd API
 * # Introduction The Stakkd platform provides comprehensive data services that meet the business objectives of organizations ranging from Fortune 500 companies to startups. Our clients work in an array of industries, including insurance, financial, legal, travel, hospitality, retail, health, media, and telecommunications.  The Stakkd API is documented using the Open API 3.0.1 standard.  All endpoints are available at https://api.stakkd.io/v1. Detailed documentation for each endpoint is below, including the full URL for the endpoint.  # Account Types The API supports two different account types, each with different permissions.  ## Paid Account Paid accounts provide unlimited access to all of the URIs.  ## Trial Account Trial Accounts have a limited number of queries to the APIs. Keep in mind that queries which do not return results still count against the Trial Account query limits. Trial Accounts are temporary, but can be upgraded or extended by contacting [support@stakkd.io](mailto:support@stakkd.io) 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AddressStandardizeRequest from '../stakkd.model/AddressStandardizeRequest';
import AddressStandardizeResponse from '../stakkd.model/AddressStandardizeResponse';

/**
* Standardize service.
* @module stakkd/StandardizeApi
* @version v1
*/
export default class StandardizeApi {

    /**
    * Constructs a new StandardizeApi. 
    * @alias module:stakkd/StandardizeApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the standardizeAddressPost operation.
     * @callback module:stakkd/StandardizeApi~standardizeAddressPostCallback
     * @param {String} error Error message, if any.
     * @param {module:stakkd.model/AddressStandardizeResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} contentType 
     * @param {String} xApiKey 
     * @param {module:stakkd.model/AddressStandardizeRequest} addressStandardizeRequest 
     * @param {module:stakkd/StandardizeApi~standardizeAddressPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:stakkd.model/AddressStandardizeResponse}
     */
    standardizeAddressPost(contentType, xApiKey, addressStandardizeRequest, callback) {
      let postBody = addressStandardizeRequest;
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling standardizeAddressPost");
      }
      // verify the required parameter 'xApiKey' is set
      if (xApiKey === undefined || xApiKey === null) {
        throw new Error("Missing the required parameter 'xApiKey' when calling standardizeAddressPost");
      }
      // verify the required parameter 'addressStandardizeRequest' is set
      if (addressStandardizeRequest === undefined || addressStandardizeRequest === null) {
        throw new Error("Missing the required parameter 'addressStandardizeRequest' when calling standardizeAddressPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Content-Type': contentType,
        'x-api-key': xApiKey
      };
      let formParams = {
      };

      let authNames = ['apiKey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AddressStandardizeResponse;
      return this.apiClient.callApi(
        '/standardize/address', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
