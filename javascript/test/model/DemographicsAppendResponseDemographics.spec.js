/**
 * Stakkd API
 * # Introduction The Stakkd platform provides comprehensive data services that meet the business objectives of organizations ranging from Fortune 500 companies to startups. Our clients work in an array of industries, including insurance, financial, legal, travel, hospitality, retail, health, media, and telecommunications.  The Stakkd API is documented using the Open API 3.0.1 standard.  All endpoints are available at https://api.stakkd.io/v1. Detailed documentation for each endpoint is below, including the full URL for the endpoint.  # Account Types The API supports two different account types, each with different permissions.  ## Paid Account Paid accounts provide unlimited access to all of the URIs.  ## Trial Account Trial Accounts have a limited number of queries to the APIs. Keep in mind that queries which do not return results still count against the Trial Account query limits. Trial Accounts are temporary, but can be upgraded or extended by contacting [support@stakkd.io](mailto:support@stakkd.io) 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.StakkdApi);
  }
}(this, function(expect, StakkdApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new StakkdApi.DemographicsAppendResponseDemographics();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('DemographicsAppendResponseDemographics', function() {
    it('should create an instance of DemographicsAppendResponseDemographics', function() {
      // uncomment below and update the code to test DemographicsAppendResponseDemographics
      //var instance = new StakkdApi.DemographicsAppendResponseDemographics();
      //expect(instance).to.be.a(StakkdApi.DemographicsAppendResponseDemographics);
    });

    it('should have the property level (base name: "level")', function() {
      // uncomment below and update the code to test the property level
      //var instance = new StakkdApi.DemographicsAppendResponseDemographics();
      //expect(instance).to.be();
    });

    it('should have the property person (base name: "person")', function() {
      // uncomment below and update the code to test the property person
      //var instance = new StakkdApi.DemographicsAppendResponseDemographics();
      //expect(instance).to.be();
    });

    it('should have the property residence (base name: "residence")', function() {
      // uncomment below and update the code to test the property residence
      //var instance = new StakkdApi.DemographicsAppendResponseDemographics();
      //expect(instance).to.be();
    });

    it('should have the property family (base name: "family")', function() {
      // uncomment below and update the code to test the property family
      //var instance = new StakkdApi.DemographicsAppendResponseDemographics();
      //expect(instance).to.be();
    });

    it('should have the property vehicle (base name: "vehicle")', function() {
      // uncomment below and update the code to test the property vehicle
      //var instance = new StakkdApi.DemographicsAppendResponseDemographics();
      //expect(instance).to.be();
    });

  });

}));
