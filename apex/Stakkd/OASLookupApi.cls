/*
 * Stakkd API
 * # Introduction\nThe Stakkd platform provides comprehensive data services that meet the business\nobjectives of organizations ranging from Fortune 500 companies to startups.\nOur clients work in an array of industries, including insurance, financial, legal, travel, hospitality, retail, health, media, and telecommunications.\n\nThe Stakkd API is documented using the Open API 3.0.1 standard.\n\nAll endpoints are available at https://api.stakkd.io/v1. Detailed documentation for each endpoint is below, including the full URL for the endpoint.\n\n# Account Types\nThe API supports two different account types, each with different permissions.\n\n## Paid Account\nPaid accounts provide unlimited access to all of the URIs.\n\n## Trial Account\nTrial Accounts have a limited number of queries to the APIs. Keep in mind that\nqueries which do not return results still count against the Trial Account query limits.\nTrial Accounts are temporary, but can be upgraded or extended by contacting [support@stakkd.io](mailto:support@stakkd.io)\n
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by the OAS code generator program.
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

public class OASLookupApi {
    OASClient client;

    public OASLookupApi(OASClient client) {
        this.client = client;
    }

    public OASLookupApi() {
        this.client = new OASClient();
    }

    public OASClient getClient() {
        return this.client;
    }

    /**
     * 
     * 
     * @param contentType  (required)
     * @param xApiKey  (required)
     * @param oaSEmailLookupRequest  (required)
     * @return OASLookupResponse
     * @throws OAS.ApiException if fails to make API call
     */
    public OASLookupResponse lookupEmailPost(Map<String, Object> params) {
        client.assertNotNull(params.get('contentType'), 'contentType');
        client.assertNotNull(params.get('xApiKey'), 'xApiKey');
        client.assertNotNull(params.get('oaSEmailLookupRequest'), 'oaSEmailLookupRequest');
        List<OAS.Param> query = new List<OAS.Param>();
        List<OAS.Param> form = new List<OAS.Param>();

        return (OASLookupResponse) client.invoke(
            'POST', '/lookup/email',
            (OASEmailLookupRequest) params.get('oaSEmailLookupRequest'),
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>{
                'Content-Type' => (String) params.get('contentType'),
                'x-api-key' => (String) params.get('xApiKey')
            },
            new List<String>{ 'application/json' },
            new List<String>{ 'application/json' },
            new List<String> { 'apiKey' },
            OASLookupResponse.class
        );
    }
    /**
     * 
     * 
     * @param contentType  (required)
     * @param xApiKey  (required)
     * @param oaSIpLookupRequest  (required)
     * @return OASIpLookupResponse
     * @throws OAS.ApiException if fails to make API call
     */
    public OASIpLookupResponse lookupIpPost(Map<String, Object> params) {
        client.assertNotNull(params.get('contentType'), 'contentType');
        client.assertNotNull(params.get('xApiKey'), 'xApiKey');
        client.assertNotNull(params.get('oaSIpLookupRequest'), 'oaSIpLookupRequest');
        List<OAS.Param> query = new List<OAS.Param>();
        List<OAS.Param> form = new List<OAS.Param>();

        return (OASIpLookupResponse) client.invoke(
            'POST', '/lookup/ip',
            (OASIpLookupRequest) params.get('oaSIpLookupRequest'),
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>{
                'Content-Type' => (String) params.get('contentType'),
                'x-api-key' => (String) params.get('xApiKey')
            },
            new List<String>{ 'application/json' },
            new List<String>{ 'application/json' },
            new List<String> { 'apiKey' },
            OASIpLookupResponse.class
        );
    }
    /**
     * 
     * 
     * @param contentType  (required)
     * @param xApiKey  (required)
     * @param oaSPhoneLookupRequest  (required)
     * @return OASLookupResponse
     * @throws OAS.ApiException if fails to make API call
     */
    public OASLookupResponse lookupMobilePost(Map<String, Object> params) {
        client.assertNotNull(params.get('contentType'), 'contentType');
        client.assertNotNull(params.get('xApiKey'), 'xApiKey');
        client.assertNotNull(params.get('oaSPhoneLookupRequest'), 'oaSPhoneLookupRequest');
        List<OAS.Param> query = new List<OAS.Param>();
        List<OAS.Param> form = new List<OAS.Param>();

        return (OASLookupResponse) client.invoke(
            'POST', '/lookup/mobile',
            (OASPhoneLookupRequest) params.get('oaSPhoneLookupRequest'),
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>{
                'Content-Type' => (String) params.get('contentType'),
                'x-api-key' => (String) params.get('xApiKey')
            },
            new List<String>{ 'application/json' },
            new List<String>{ 'application/json' },
            new List<String> { 'apiKey' },
            OASLookupResponse.class
        );
    }
    /**
     * 
     * 
     * @param contentType  (required)
     * @param xApiKey  (required)
     * @param oaSPhoneLookupRequest  (required)
     * @return OASLookupResponse
     * @throws OAS.ApiException if fails to make API call
     */
    public OASLookupResponse lookupPhonePost(Map<String, Object> params) {
        client.assertNotNull(params.get('contentType'), 'contentType');
        client.assertNotNull(params.get('xApiKey'), 'xApiKey');
        client.assertNotNull(params.get('oaSPhoneLookupRequest'), 'oaSPhoneLookupRequest');
        List<OAS.Param> query = new List<OAS.Param>();
        List<OAS.Param> form = new List<OAS.Param>();

        return (OASLookupResponse) client.invoke(
            'POST', '/lookup/phone',
            (OASPhoneLookupRequest) params.get('oaSPhoneLookupRequest'),
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>{
                'Content-Type' => (String) params.get('contentType'),
                'x-api-key' => (String) params.get('xApiKey')
            },
            new List<String>{ 'application/json' },
            new List<String>{ 'application/json' },
            new List<String> { 'apiKey' },
            OASLookupResponse.class
        );
    }
    /**
     * 
     * 
     * @param contentType  (required)
     * @param xApiKey  (required)
     * @param oaSSkipTracingLookupRequest  (required)
     * @return OASSkipTracingLookupResponse
     * @throws OAS.ApiException if fails to make API call
     */
    public OASSkipTracingLookupResponse lookupSkipTracingPost(Map<String, Object> params) {
        client.assertNotNull(params.get('contentType'), 'contentType');
        client.assertNotNull(params.get('xApiKey'), 'xApiKey');
        client.assertNotNull(params.get('oaSSkipTracingLookupRequest'), 'oaSSkipTracingLookupRequest');
        List<OAS.Param> query = new List<OAS.Param>();
        List<OAS.Param> form = new List<OAS.Param>();

        return (OASSkipTracingLookupResponse) client.invoke(
            'POST', '/lookup/skip-tracing',
            (OASSkipTracingLookupRequest) params.get('oaSSkipTracingLookupRequest'),
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>{
                'Content-Type' => (String) params.get('contentType'),
                'x-api-key' => (String) params.get('xApiKey')
            },
            new List<String>{ 'application/json' },
            new List<String>{ 'application/json' },
            new List<String> { 'apiKey' },
            OASSkipTracingLookupResponse.class
        );
    }
}
