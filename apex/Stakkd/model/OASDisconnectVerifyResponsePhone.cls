/*
 * Stakkd API
 * # Introduction\nThe Stakkd platform provides comprehensive data services that meet the business\nobjectives of organizations ranging from Fortune 500 companies to startups.\nOur clients work in an array of industries, including insurance, financial, legal, travel, hospitality, retail, health, media, and telecommunications.\n\nThe Stakkd API is documented using the Open API 3.0.1 standard.\n\nAll endpoints are available at https://api.stakkd.io/v1. Detailed documentation for each endpoint is below, including the full URL for the endpoint.\n\n# Account Types\nThe API supports two different account types, each with different permissions.\n\n## Paid Account\nPaid accounts provide unlimited access to all of the URIs.\n\n## Trial Account\nTrial Accounts have a limited number of queries to the APIs. Keep in mind that\nqueries which do not return results still count against the Trial Account query limits.\nTrial Accounts are temporary, but can be upgraded or extended by contacting [support@stakkd.io](mailto:support@stakkd.io)\n
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by the OAS code generator program.
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

/**
 * OASDisconnectVerifyResponsePhone
 */
public class OASDisconnectVerifyResponsePhone {
    /**
     * The phone type, where: L = \'Landline\', V = \'VoIP\', W = \'Wireless\', and O = \'Other\'.
     */
    public enum PhoneTypeEnum {
        L,
        V,
        W,
        O
    }

    /**
     * The phone type, where: L = \'Landline\', V = \'VoIP\', W = \'Wireless\', and O = \'Other\'.
     * @return phoneType
     */
    public PhoneTypeEnum phoneType { get; set; }

    /**
     * The phone number.
     * @return phone
     */
    public String phone { get; set; }

    /**
     * The name of the phone provider.
     * @return provider
     */
    public String provider { get; set; }

    /**
     * The 4 character alphanumeric phone operating company number.
     * @return operatingCompanyNumber
     */
    public String operatingCompanyNumber { get; set; }

    /**
     * The telephone confidence score, ranging between 1 and 7, where 1 indicates highest confidence and 7 indicates unconfirmed.
     * @return confidenceScore
     */
    public Integer confidenceScore { get; set; }

    /**
     * The date the record was first received, formatted: YYYYMMDD
     * @return initialDateReceived
     */
    public String initialDateReceived { get; set; }

    /**
     * The date the reocrd was last received as connected, formatted: YYYYMMDD
     * @return lastDateReceived
     */
    public String lastDateReceived { get; set; }

    /**
     * The directory assistance indicator.
     */
    public enum DirectoryAssistanceEnum {
        PRIVATE,
        REMOVED,
        EXISTS
    }

    /**
     * The directory assistance indicator.
     * @return directoryAssistance
     */
    public DirectoryAssistanceEnum directoryAssistance { get; set; }

    /**
     * The phone record type.
     */
    public enum RecordTypeEnum {
        PAYPHONE,
        RESIDENTIAL,
        BUSINESS,
        UNKNOWN
    }

    /**
     * The phone record type.
     * @return recordType
     */
    public RecordTypeEnum recordType { get; set; }

    /**
     * Indicates whether or not the phone is flagged as a Direct Inward Dial Number.
     * @return directInwardDialNumber
     */
    public Boolean directInwardDialNumber { get; set; }

    public static OASDisconnectVerifyResponsePhone getExample() {
        OASDisconnectVerifyResponsePhone disconnectVerifyResponsePhone = new OASDisconnectVerifyResponsePhone();
          disconnectVerifyResponsePhone.phoneType = PhoneTypeEnum.L;
          disconnectVerifyResponsePhone.phone = '';
          disconnectVerifyResponsePhone.provider = '';
          disconnectVerifyResponsePhone.operatingCompanyNumber = '';
          disconnectVerifyResponsePhone.confidenceScore = 0;
          disconnectVerifyResponsePhone.initialDateReceived = '';
          disconnectVerifyResponsePhone.lastDateReceived = '';
          disconnectVerifyResponsePhone.directoryAssistance = DirectoryAssistanceEnum.PRIVATE;
          disconnectVerifyResponsePhone.recordType = RecordTypeEnum.PAYPHONE;
          disconnectVerifyResponsePhone.directInwardDialNumber = true;
        return disconnectVerifyResponsePhone;
    }

    public Boolean equals(Object obj) {
        if (obj instanceof OASDisconnectVerifyResponsePhone) {           
            OASDisconnectVerifyResponsePhone disconnectVerifyResponsePhone = (OASDisconnectVerifyResponsePhone) obj;
            return this.phoneType == disconnectVerifyResponsePhone.phoneType
                && this.phone == disconnectVerifyResponsePhone.phone
                && this.provider == disconnectVerifyResponsePhone.provider
                && this.operatingCompanyNumber == disconnectVerifyResponsePhone.operatingCompanyNumber
                && this.confidenceScore == disconnectVerifyResponsePhone.confidenceScore
                && this.initialDateReceived == disconnectVerifyResponsePhone.initialDateReceived
                && this.lastDateReceived == disconnectVerifyResponsePhone.lastDateReceived
                && this.directoryAssistance == disconnectVerifyResponsePhone.directoryAssistance
                && this.recordType == disconnectVerifyResponsePhone.recordType
                && this.directInwardDialNumber == disconnectVerifyResponsePhone.directInwardDialNumber;
        }
        return false;
    }

    public Integer hashCode() {
        Integer hashCode = 43;
        hashCode = (17 * hashCode) + (phoneType == null ? 0 : System.hashCode(phoneType));
        hashCode = (17 * hashCode) + (phone == null ? 0 : System.hashCode(phone));
        hashCode = (17 * hashCode) + (provider == null ? 0 : System.hashCode(provider));
        hashCode = (17 * hashCode) + (operatingCompanyNumber == null ? 0 : System.hashCode(operatingCompanyNumber));
        hashCode = (17 * hashCode) + (confidenceScore == null ? 0 : System.hashCode(confidenceScore));
        hashCode = (17 * hashCode) + (initialDateReceived == null ? 0 : System.hashCode(initialDateReceived));
        hashCode = (17 * hashCode) + (lastDateReceived == null ? 0 : System.hashCode(lastDateReceived));
        hashCode = (17 * hashCode) + (directoryAssistance == null ? 0 : System.hashCode(directoryAssistance));
        hashCode = (17 * hashCode) + (recordType == null ? 0 : System.hashCode(recordType));
        hashCode = (17 * hashCode) + (directInwardDialNumber == null ? 0 : System.hashCode(directInwardDialNumber));
        return hashCode;
    }
}

