/*
 * Stakkd API
 * # Introduction\nThe Stakkd platform provides comprehensive data services that meet the business\nobjectives of organizations ranging from Fortune 500 companies to startups.\nOur clients work in an array of industries, including insurance, financial, legal, travel, hospitality, retail, health, media, and telecommunications.\n\nThe Stakkd API is documented using the Open API 3.0.1 standard.\n\nAll endpoints are available at https://api.stakkd.io/v1. Detailed documentation for each endpoint is below, including the full URL for the endpoint.\n\n# Account Types\nThe API supports two different account types, each with different permissions.\n\n## Paid Account\nPaid accounts provide unlimited access to all of the URIs.\n\n## Trial Account\nTrial Accounts have a limited number of queries to the APIs. Keep in mind that\nqueries which do not return results still count against the Trial Account query limits.\nTrial Accounts are temporary, but can be upgraded or extended by contacting [support@stakkd.io](mailto:support@stakkd.io)\n
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by the OAS code generator program.
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

public class OASVerifyApi {
    OASClient client;

    public OASVerifyApi(OASClient client) {
        this.client = client;
    }

    public OASVerifyApi() {
        this.client = new OASClient();
    }

    public OASClient getClient() {
        return this.client;
    }

    /**
     * 
     * 
     * @param contentType  (required)
     * @param xApiKey  (required)
     * @param oaSDisconnectVerifyRequest  (required)
     * @return OASDisconnectVerifyResponse
     * @throws OAS.ApiException if fails to make API call
     */
    public OASDisconnectVerifyResponse verifyDisconnectPost(Map<String, Object> params) {
        client.assertNotNull(params.get('contentType'), 'contentType');
        client.assertNotNull(params.get('xApiKey'), 'xApiKey');
        client.assertNotNull(params.get('oaSDisconnectVerifyRequest'), 'oaSDisconnectVerifyRequest');
        List<OAS.Param> query = new List<OAS.Param>();
        List<OAS.Param> form = new List<OAS.Param>();

        return (OASDisconnectVerifyResponse) client.invoke(
            'POST', '/verify/disconnect',
            (OASDisconnectVerifyRequest) params.get('oaSDisconnectVerifyRequest'),
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>{
                'Content-Type' => (String) params.get('contentType'),
                'x-api-key' => (String) params.get('xApiKey')
            },
            new List<String>{ 'application/json' },
            new List<String>{ 'application/json' },
            new List<String> { 'apiKey' },
            OASDisconnectVerifyResponse.class
        );
    }
    /**
     * 
     * 
     * @param contentType  (required)
     * @param xApiKey  (required)
     * @param oaSEmailVerifyRequest  (required)
     * @return OASEmailVerifyResponse
     * @throws OAS.ApiException if fails to make API call
     */
    public OASEmailVerifyResponse verifyEmailPost(Map<String, Object> params) {
        client.assertNotNull(params.get('contentType'), 'contentType');
        client.assertNotNull(params.get('xApiKey'), 'xApiKey');
        client.assertNotNull(params.get('oaSEmailVerifyRequest'), 'oaSEmailVerifyRequest');
        List<OAS.Param> query = new List<OAS.Param>();
        List<OAS.Param> form = new List<OAS.Param>();

        return (OASEmailVerifyResponse) client.invoke(
            'POST', '/verify/email',
            (OASEmailVerifyRequest) params.get('oaSEmailVerifyRequest'),
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>{
                'Content-Type' => (String) params.get('contentType'),
                'x-api-key' => (String) params.get('xApiKey')
            },
            new List<String>{ 'application/json' },
            new List<String>{ 'application/json' },
            new List<String> { 'apiKey' },
            OASEmailVerifyResponse.class
        );
    }
    /**
     * 
     * 
     * @param contentType  (required)
     * @param xApiKey  (required)
     * @param oaSPhoneVerifyRequest  (required)
     * @return OASPhoneVerifyResponse
     * @throws OAS.ApiException if fails to make API call
     */
    public OASPhoneVerifyResponse verifyPhonePost(Map<String, Object> params) {
        client.assertNotNull(params.get('contentType'), 'contentType');
        client.assertNotNull(params.get('xApiKey'), 'xApiKey');
        client.assertNotNull(params.get('oaSPhoneVerifyRequest'), 'oaSPhoneVerifyRequest');
        List<OAS.Param> query = new List<OAS.Param>();
        List<OAS.Param> form = new List<OAS.Param>();

        return (OASPhoneVerifyResponse) client.invoke(
            'POST', '/verify/phone',
            (OASPhoneVerifyRequest) params.get('oaSPhoneVerifyRequest'),
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>{
                'Content-Type' => (String) params.get('contentType'),
                'x-api-key' => (String) params.get('xApiKey')
            },
            new List<String>{ 'application/json' },
            new List<String>{ 'application/json' },
            new List<String> { 'apiKey' },
            OASPhoneVerifyResponse.class
        );
    }
    /**
     * 
     * 
     * @param contentType  (required)
     * @param xApiKey  (required)
     * @param oaSTcpaVerifyRequest  (required)
     * @return OASTcpaVerifyResponse
     * @throws OAS.ApiException if fails to make API call
     */
    public OASTcpaVerifyResponse verifyTcpaPost(Map<String, Object> params) {
        client.assertNotNull(params.get('contentType'), 'contentType');
        client.assertNotNull(params.get('xApiKey'), 'xApiKey');
        client.assertNotNull(params.get('oaSTcpaVerifyRequest'), 'oaSTcpaVerifyRequest');
        List<OAS.Param> query = new List<OAS.Param>();
        List<OAS.Param> form = new List<OAS.Param>();

        return (OASTcpaVerifyResponse) client.invoke(
            'POST', '/verify/tcpa',
            (OASTcpaVerifyRequest) params.get('oaSTcpaVerifyRequest'),
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>{
                'Content-Type' => (String) params.get('contentType'),
                'x-api-key' => (String) params.get('xApiKey')
            },
            new List<String>{ 'application/json' },
            new List<String>{ 'application/json' },
            new List<String> { 'apiKey' },
            OASTcpaVerifyResponse.class
        );
    }
}
