/*
Stakkd API

# Introduction The Stakkd platform provides comprehensive data services that meet the business objectives of organizations ranging from Fortune 500 companies to startups. Our clients work in an array of industries, including insurance, financial, legal, travel, hospitality, retail, health, media, and telecommunications.  The Stakkd API is documented using the Open API 3.0.1 standard.  All endpoints are available at https://api.stakkd.io/v1. Detailed documentation for each endpoint is below, including the full URL for the endpoint.  # Account Types The API supports two different account types, each with different permissions.  ## Paid Account Paid accounts provide unlimited access to all of the URIs.  ## Trial Account Trial Accounts have a limited number of queries to the APIs. Keep in mind that queries which do not return results still count against the Trial Account query limits. Trial Accounts are temporary, but can be upgraded or extended by contacting [support@stakkd.io](mailto:support@stakkd.io) 

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package Stakkd

import (
	"encoding/json"
)

// DemographicsAppendResponseDemographicsPersonWorkerType struct for DemographicsAppendResponseDemographicsPersonWorkerType
type DemographicsAppendResponseDemographicsPersonWorkerType struct {
	// The Penetration Percentage for indicating whether the person is a white collar worker, +/- 3%.
	PercentWhiteCollar *int32 `json:"percentWhiteCollar,omitempty"`
	// The Penetration Percentage for indicating whether the person is a blue collar worker, +/- 3%.
	PercentBlueCollar *int32 `json:"percentBlueCollar,omitempty"`
	// The Penetration Percentage for indicating whether the person is some other type of worker, +/- 3%.
	PercentOther *int32 `json:"percentOther,omitempty"`
}

// NewDemographicsAppendResponseDemographicsPersonWorkerType instantiates a new DemographicsAppendResponseDemographicsPersonWorkerType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDemographicsAppendResponseDemographicsPersonWorkerType() *DemographicsAppendResponseDemographicsPersonWorkerType {
	this := DemographicsAppendResponseDemographicsPersonWorkerType{}
	return &this
}

// NewDemographicsAppendResponseDemographicsPersonWorkerTypeWithDefaults instantiates a new DemographicsAppendResponseDemographicsPersonWorkerType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDemographicsAppendResponseDemographicsPersonWorkerTypeWithDefaults() *DemographicsAppendResponseDemographicsPersonWorkerType {
	this := DemographicsAppendResponseDemographicsPersonWorkerType{}
	return &this
}

// GetPercentWhiteCollar returns the PercentWhiteCollar field value if set, zero value otherwise.
func (o *DemographicsAppendResponseDemographicsPersonWorkerType) GetPercentWhiteCollar() int32 {
	if o == nil || o.PercentWhiteCollar == nil {
		var ret int32
		return ret
	}
	return *o.PercentWhiteCollar
}

// GetPercentWhiteCollarOk returns a tuple with the PercentWhiteCollar field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DemographicsAppendResponseDemographicsPersonWorkerType) GetPercentWhiteCollarOk() (*int32, bool) {
	if o == nil || o.PercentWhiteCollar == nil {
		return nil, false
	}
	return o.PercentWhiteCollar, true
}

// HasPercentWhiteCollar returns a boolean if a field has been set.
func (o *DemographicsAppendResponseDemographicsPersonWorkerType) HasPercentWhiteCollar() bool {
	if o != nil && o.PercentWhiteCollar != nil {
		return true
	}

	return false
}

// SetPercentWhiteCollar gets a reference to the given int32 and assigns it to the PercentWhiteCollar field.
func (o *DemographicsAppendResponseDemographicsPersonWorkerType) SetPercentWhiteCollar(v int32) {
	o.PercentWhiteCollar = &v
}

// GetPercentBlueCollar returns the PercentBlueCollar field value if set, zero value otherwise.
func (o *DemographicsAppendResponseDemographicsPersonWorkerType) GetPercentBlueCollar() int32 {
	if o == nil || o.PercentBlueCollar == nil {
		var ret int32
		return ret
	}
	return *o.PercentBlueCollar
}

// GetPercentBlueCollarOk returns a tuple with the PercentBlueCollar field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DemographicsAppendResponseDemographicsPersonWorkerType) GetPercentBlueCollarOk() (*int32, bool) {
	if o == nil || o.PercentBlueCollar == nil {
		return nil, false
	}
	return o.PercentBlueCollar, true
}

// HasPercentBlueCollar returns a boolean if a field has been set.
func (o *DemographicsAppendResponseDemographicsPersonWorkerType) HasPercentBlueCollar() bool {
	if o != nil && o.PercentBlueCollar != nil {
		return true
	}

	return false
}

// SetPercentBlueCollar gets a reference to the given int32 and assigns it to the PercentBlueCollar field.
func (o *DemographicsAppendResponseDemographicsPersonWorkerType) SetPercentBlueCollar(v int32) {
	o.PercentBlueCollar = &v
}

// GetPercentOther returns the PercentOther field value if set, zero value otherwise.
func (o *DemographicsAppendResponseDemographicsPersonWorkerType) GetPercentOther() int32 {
	if o == nil || o.PercentOther == nil {
		var ret int32
		return ret
	}
	return *o.PercentOther
}

// GetPercentOtherOk returns a tuple with the PercentOther field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DemographicsAppendResponseDemographicsPersonWorkerType) GetPercentOtherOk() (*int32, bool) {
	if o == nil || o.PercentOther == nil {
		return nil, false
	}
	return o.PercentOther, true
}

// HasPercentOther returns a boolean if a field has been set.
func (o *DemographicsAppendResponseDemographicsPersonWorkerType) HasPercentOther() bool {
	if o != nil && o.PercentOther != nil {
		return true
	}

	return false
}

// SetPercentOther gets a reference to the given int32 and assigns it to the PercentOther field.
func (o *DemographicsAppendResponseDemographicsPersonWorkerType) SetPercentOther(v int32) {
	o.PercentOther = &v
}

func (o DemographicsAppendResponseDemographicsPersonWorkerType) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.PercentWhiteCollar != nil {
		toSerialize["percentWhiteCollar"] = o.PercentWhiteCollar
	}
	if o.PercentBlueCollar != nil {
		toSerialize["percentBlueCollar"] = o.PercentBlueCollar
	}
	if o.PercentOther != nil {
		toSerialize["percentOther"] = o.PercentOther
	}
	return json.Marshal(toSerialize)
}

type NullableDemographicsAppendResponseDemographicsPersonWorkerType struct {
	value *DemographicsAppendResponseDemographicsPersonWorkerType
	isSet bool
}

func (v NullableDemographicsAppendResponseDemographicsPersonWorkerType) Get() *DemographicsAppendResponseDemographicsPersonWorkerType {
	return v.value
}

func (v *NullableDemographicsAppendResponseDemographicsPersonWorkerType) Set(val *DemographicsAppendResponseDemographicsPersonWorkerType) {
	v.value = val
	v.isSet = true
}

func (v NullableDemographicsAppendResponseDemographicsPersonWorkerType) IsSet() bool {
	return v.isSet
}

func (v *NullableDemographicsAppendResponseDemographicsPersonWorkerType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDemographicsAppendResponseDemographicsPersonWorkerType(val *DemographicsAppendResponseDemographicsPersonWorkerType) *NullableDemographicsAppendResponseDemographicsPersonWorkerType {
	return &NullableDemographicsAppendResponseDemographicsPersonWorkerType{value: val, isSet: true}
}

func (v NullableDemographicsAppendResponseDemographicsPersonWorkerType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDemographicsAppendResponseDemographicsPersonWorkerType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


