/*
Stakkd API

# Introduction The Stakkd platform provides comprehensive data services that meet the business objectives of organizations ranging from Fortune 500 companies to startups. Our clients work in an array of industries, including insurance, financial, legal, travel, hospitality, retail, health, media, and telecommunications.  The Stakkd API is documented using the Open API 3.0.1 standard.  All endpoints are available at https://api.stakkd.io/v1. Detailed documentation for each endpoint is below, including the full URL for the endpoint.  # Account Types The API supports two different account types, each with different permissions.  ## Paid Account Paid accounts provide unlimited access to all of the URIs.  ## Trial Account Trial Accounts have a limited number of queries to the APIs. Keep in mind that queries which do not return results still count against the Trial Account query limits. Trial Accounts are temporary, but can be upgraded or extended by contacting [support@stakkd.io](mailto:support@stakkd.io) 

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package Stakkd

import (
	"encoding/json"
)

// DemographicsAppendResponseDemographics struct for DemographicsAppendResponseDemographics
type DemographicsAppendResponseDemographics struct {
	// The demographics level for the data.
	Level *string `json:"level,omitempty"`
	Person *DemographicsAppendResponseDemographicsPerson `json:"person,omitempty"`
	Residence *DemographicsAppendResponseDemographicsResidence `json:"residence,omitempty"`
	Family *DemographicsAppendResponseDemographicsFamily `json:"family,omitempty"`
	Vehicle *DemographicsAppendResponseDemographicsVehicle `json:"vehicle,omitempty"`
}

// NewDemographicsAppendResponseDemographics instantiates a new DemographicsAppendResponseDemographics object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDemographicsAppendResponseDemographics() *DemographicsAppendResponseDemographics {
	this := DemographicsAppendResponseDemographics{}
	return &this
}

// NewDemographicsAppendResponseDemographicsWithDefaults instantiates a new DemographicsAppendResponseDemographics object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDemographicsAppendResponseDemographicsWithDefaults() *DemographicsAppendResponseDemographics {
	this := DemographicsAppendResponseDemographics{}
	return &this
}

// GetLevel returns the Level field value if set, zero value otherwise.
func (o *DemographicsAppendResponseDemographics) GetLevel() string {
	if o == nil || o.Level == nil {
		var ret string
		return ret
	}
	return *o.Level
}

// GetLevelOk returns a tuple with the Level field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DemographicsAppendResponseDemographics) GetLevelOk() (*string, bool) {
	if o == nil || o.Level == nil {
		return nil, false
	}
	return o.Level, true
}

// HasLevel returns a boolean if a field has been set.
func (o *DemographicsAppendResponseDemographics) HasLevel() bool {
	if o != nil && o.Level != nil {
		return true
	}

	return false
}

// SetLevel gets a reference to the given string and assigns it to the Level field.
func (o *DemographicsAppendResponseDemographics) SetLevel(v string) {
	o.Level = &v
}

// GetPerson returns the Person field value if set, zero value otherwise.
func (o *DemographicsAppendResponseDemographics) GetPerson() DemographicsAppendResponseDemographicsPerson {
	if o == nil || o.Person == nil {
		var ret DemographicsAppendResponseDemographicsPerson
		return ret
	}
	return *o.Person
}

// GetPersonOk returns a tuple with the Person field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DemographicsAppendResponseDemographics) GetPersonOk() (*DemographicsAppendResponseDemographicsPerson, bool) {
	if o == nil || o.Person == nil {
		return nil, false
	}
	return o.Person, true
}

// HasPerson returns a boolean if a field has been set.
func (o *DemographicsAppendResponseDemographics) HasPerson() bool {
	if o != nil && o.Person != nil {
		return true
	}

	return false
}

// SetPerson gets a reference to the given DemographicsAppendResponseDemographicsPerson and assigns it to the Person field.
func (o *DemographicsAppendResponseDemographics) SetPerson(v DemographicsAppendResponseDemographicsPerson) {
	o.Person = &v
}

// GetResidence returns the Residence field value if set, zero value otherwise.
func (o *DemographicsAppendResponseDemographics) GetResidence() DemographicsAppendResponseDemographicsResidence {
	if o == nil || o.Residence == nil {
		var ret DemographicsAppendResponseDemographicsResidence
		return ret
	}
	return *o.Residence
}

// GetResidenceOk returns a tuple with the Residence field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DemographicsAppendResponseDemographics) GetResidenceOk() (*DemographicsAppendResponseDemographicsResidence, bool) {
	if o == nil || o.Residence == nil {
		return nil, false
	}
	return o.Residence, true
}

// HasResidence returns a boolean if a field has been set.
func (o *DemographicsAppendResponseDemographics) HasResidence() bool {
	if o != nil && o.Residence != nil {
		return true
	}

	return false
}

// SetResidence gets a reference to the given DemographicsAppendResponseDemographicsResidence and assigns it to the Residence field.
func (o *DemographicsAppendResponseDemographics) SetResidence(v DemographicsAppendResponseDemographicsResidence) {
	o.Residence = &v
}

// GetFamily returns the Family field value if set, zero value otherwise.
func (o *DemographicsAppendResponseDemographics) GetFamily() DemographicsAppendResponseDemographicsFamily {
	if o == nil || o.Family == nil {
		var ret DemographicsAppendResponseDemographicsFamily
		return ret
	}
	return *o.Family
}

// GetFamilyOk returns a tuple with the Family field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DemographicsAppendResponseDemographics) GetFamilyOk() (*DemographicsAppendResponseDemographicsFamily, bool) {
	if o == nil || o.Family == nil {
		return nil, false
	}
	return o.Family, true
}

// HasFamily returns a boolean if a field has been set.
func (o *DemographicsAppendResponseDemographics) HasFamily() bool {
	if o != nil && o.Family != nil {
		return true
	}

	return false
}

// SetFamily gets a reference to the given DemographicsAppendResponseDemographicsFamily and assigns it to the Family field.
func (o *DemographicsAppendResponseDemographics) SetFamily(v DemographicsAppendResponseDemographicsFamily) {
	o.Family = &v
}

// GetVehicle returns the Vehicle field value if set, zero value otherwise.
func (o *DemographicsAppendResponseDemographics) GetVehicle() DemographicsAppendResponseDemographicsVehicle {
	if o == nil || o.Vehicle == nil {
		var ret DemographicsAppendResponseDemographicsVehicle
		return ret
	}
	return *o.Vehicle
}

// GetVehicleOk returns a tuple with the Vehicle field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DemographicsAppendResponseDemographics) GetVehicleOk() (*DemographicsAppendResponseDemographicsVehicle, bool) {
	if o == nil || o.Vehicle == nil {
		return nil, false
	}
	return o.Vehicle, true
}

// HasVehicle returns a boolean if a field has been set.
func (o *DemographicsAppendResponseDemographics) HasVehicle() bool {
	if o != nil && o.Vehicle != nil {
		return true
	}

	return false
}

// SetVehicle gets a reference to the given DemographicsAppendResponseDemographicsVehicle and assigns it to the Vehicle field.
func (o *DemographicsAppendResponseDemographics) SetVehicle(v DemographicsAppendResponseDemographicsVehicle) {
	o.Vehicle = &v
}

func (o DemographicsAppendResponseDemographics) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Level != nil {
		toSerialize["level"] = o.Level
	}
	if o.Person != nil {
		toSerialize["person"] = o.Person
	}
	if o.Residence != nil {
		toSerialize["residence"] = o.Residence
	}
	if o.Family != nil {
		toSerialize["family"] = o.Family
	}
	if o.Vehicle != nil {
		toSerialize["vehicle"] = o.Vehicle
	}
	return json.Marshal(toSerialize)
}

type NullableDemographicsAppendResponseDemographics struct {
	value *DemographicsAppendResponseDemographics
	isSet bool
}

func (v NullableDemographicsAppendResponseDemographics) Get() *DemographicsAppendResponseDemographics {
	return v.value
}

func (v *NullableDemographicsAppendResponseDemographics) Set(val *DemographicsAppendResponseDemographics) {
	v.value = val
	v.isSet = true
}

func (v NullableDemographicsAppendResponseDemographics) IsSet() bool {
	return v.isSet
}

func (v *NullableDemographicsAppendResponseDemographics) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDemographicsAppendResponseDemographics(val *DemographicsAppendResponseDemographics) *NullableDemographicsAppendResponseDemographics {
	return &NullableDemographicsAppendResponseDemographics{value: val, isSet: true}
}

func (v NullableDemographicsAppendResponseDemographics) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDemographicsAppendResponseDemographics) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


