/*
Stakkd API

# Introduction The Stakkd platform provides comprehensive data services that meet the business objectives of organizations ranging from Fortune 500 companies to startups. Our clients work in an array of industries, including insurance, financial, legal, travel, hospitality, retail, health, media, and telecommunications.  The Stakkd API is documented using the Open API 3.0.1 standard.  All endpoints are available at https://api.stakkd.io/v1. Detailed documentation for each endpoint is below, including the full URL for the endpoint.  # Account Types The API supports two different account types, each with different permissions.  ## Paid Account Paid accounts provide unlimited access to all of the URIs.  ## Trial Account Trial Accounts have a limited number of queries to the APIs. Keep in mind that queries which do not return results still count against the Trial Account query limits. Trial Accounts are temporary, but can be upgraded or extended by contacting [support@stakkd.io](mailto:support@stakkd.io) 

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package Stakkd

import (
	"encoding/json"
)

// SkipTracingLookupResponseAddresses struct for SkipTracingLookupResponseAddresses
type SkipTracingLookupResponseAddresses struct {
	// A list of the person's previous addresses.
	PreviousAddresses []IpLookupResponseAddress `json:"previousAddresses,omitempty"`
	PrimaryAddress *IpLookupResponseAddress `json:"primaryAddress,omitempty"`
}

// NewSkipTracingLookupResponseAddresses instantiates a new SkipTracingLookupResponseAddresses object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSkipTracingLookupResponseAddresses() *SkipTracingLookupResponseAddresses {
	this := SkipTracingLookupResponseAddresses{}
	return &this
}

// NewSkipTracingLookupResponseAddressesWithDefaults instantiates a new SkipTracingLookupResponseAddresses object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSkipTracingLookupResponseAddressesWithDefaults() *SkipTracingLookupResponseAddresses {
	this := SkipTracingLookupResponseAddresses{}
	return &this
}

// GetPreviousAddresses returns the PreviousAddresses field value if set, zero value otherwise.
func (o *SkipTracingLookupResponseAddresses) GetPreviousAddresses() []IpLookupResponseAddress {
	if o == nil || o.PreviousAddresses == nil {
		var ret []IpLookupResponseAddress
		return ret
	}
	return o.PreviousAddresses
}

// GetPreviousAddressesOk returns a tuple with the PreviousAddresses field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SkipTracingLookupResponseAddresses) GetPreviousAddressesOk() ([]IpLookupResponseAddress, bool) {
	if o == nil || o.PreviousAddresses == nil {
		return nil, false
	}
	return o.PreviousAddresses, true
}

// HasPreviousAddresses returns a boolean if a field has been set.
func (o *SkipTracingLookupResponseAddresses) HasPreviousAddresses() bool {
	if o != nil && o.PreviousAddresses != nil {
		return true
	}

	return false
}

// SetPreviousAddresses gets a reference to the given []IpLookupResponseAddress and assigns it to the PreviousAddresses field.
func (o *SkipTracingLookupResponseAddresses) SetPreviousAddresses(v []IpLookupResponseAddress) {
	o.PreviousAddresses = v
}

// GetPrimaryAddress returns the PrimaryAddress field value if set, zero value otherwise.
func (o *SkipTracingLookupResponseAddresses) GetPrimaryAddress() IpLookupResponseAddress {
	if o == nil || o.PrimaryAddress == nil {
		var ret IpLookupResponseAddress
		return ret
	}
	return *o.PrimaryAddress
}

// GetPrimaryAddressOk returns a tuple with the PrimaryAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SkipTracingLookupResponseAddresses) GetPrimaryAddressOk() (*IpLookupResponseAddress, bool) {
	if o == nil || o.PrimaryAddress == nil {
		return nil, false
	}
	return o.PrimaryAddress, true
}

// HasPrimaryAddress returns a boolean if a field has been set.
func (o *SkipTracingLookupResponseAddresses) HasPrimaryAddress() bool {
	if o != nil && o.PrimaryAddress != nil {
		return true
	}

	return false
}

// SetPrimaryAddress gets a reference to the given IpLookupResponseAddress and assigns it to the PrimaryAddress field.
func (o *SkipTracingLookupResponseAddresses) SetPrimaryAddress(v IpLookupResponseAddress) {
	o.PrimaryAddress = &v
}

func (o SkipTracingLookupResponseAddresses) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.PreviousAddresses != nil {
		toSerialize["previousAddresses"] = o.PreviousAddresses
	}
	if o.PrimaryAddress != nil {
		toSerialize["primaryAddress"] = o.PrimaryAddress
	}
	return json.Marshal(toSerialize)
}

type NullableSkipTracingLookupResponseAddresses struct {
	value *SkipTracingLookupResponseAddresses
	isSet bool
}

func (v NullableSkipTracingLookupResponseAddresses) Get() *SkipTracingLookupResponseAddresses {
	return v.value
}

func (v *NullableSkipTracingLookupResponseAddresses) Set(val *SkipTracingLookupResponseAddresses) {
	v.value = val
	v.isSet = true
}

func (v NullableSkipTracingLookupResponseAddresses) IsSet() bool {
	return v.isSet
}

func (v *NullableSkipTracingLookupResponseAddresses) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSkipTracingLookupResponseAddresses(val *SkipTracingLookupResponseAddresses) *NullableSkipTracingLookupResponseAddresses {
	return &NullableSkipTracingLookupResponseAddresses{value: val, isSet: true}
}

func (v NullableSkipTracingLookupResponseAddresses) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSkipTracingLookupResponseAddresses) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


