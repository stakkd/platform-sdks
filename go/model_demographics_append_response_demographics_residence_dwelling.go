/*
Stakkd API

# Introduction The Stakkd platform provides comprehensive data services that meet the business objectives of organizations ranging from Fortune 500 companies to startups. Our clients work in an array of industries, including insurance, financial, legal, travel, hospitality, retail, health, media, and telecommunications.  The Stakkd API is documented using the Open API 3.0.1 standard.  All endpoints are available at https://api.stakkd.io/v1. Detailed documentation for each endpoint is below, including the full URL for the endpoint.  # Account Types The API supports two different account types, each with different permissions.  ## Paid Account Paid accounts provide unlimited access to all of the URIs.  ## Trial Account Trial Accounts have a limited number of queries to the APIs. Keep in mind that queries which do not return results still count against the Trial Account query limits. Trial Accounts are temporary, but can be upgraded or extended by contacting [support@stakkd.io](mailto:support@stakkd.io) 

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package Stakkd

import (
	"encoding/json"
)

// DemographicsAppendResponseDemographicsResidenceDwelling struct for DemographicsAppendResponseDemographicsResidenceDwelling
type DemographicsAppendResponseDemographicsResidenceDwelling struct {
	// The Penetration Percentage for indicating whether the residence is a single family dwelling, +/- 3%.
	PercentSingleFamily *int32 `json:"percentSingleFamily,omitempty"`
	// The type of dwelling for the residence.
	Type *string `json:"type,omitempty"`
	// The Penetration Percentage for indicating whether the residence is a multiple family dwelling, +/- 3%.
	PercentMultipleFamily *int32 `json:"percentMultipleFamily,omitempty"`
}

// NewDemographicsAppendResponseDemographicsResidenceDwelling instantiates a new DemographicsAppendResponseDemographicsResidenceDwelling object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDemographicsAppendResponseDemographicsResidenceDwelling() *DemographicsAppendResponseDemographicsResidenceDwelling {
	this := DemographicsAppendResponseDemographicsResidenceDwelling{}
	return &this
}

// NewDemographicsAppendResponseDemographicsResidenceDwellingWithDefaults instantiates a new DemographicsAppendResponseDemographicsResidenceDwelling object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDemographicsAppendResponseDemographicsResidenceDwellingWithDefaults() *DemographicsAppendResponseDemographicsResidenceDwelling {
	this := DemographicsAppendResponseDemographicsResidenceDwelling{}
	return &this
}

// GetPercentSingleFamily returns the PercentSingleFamily field value if set, zero value otherwise.
func (o *DemographicsAppendResponseDemographicsResidenceDwelling) GetPercentSingleFamily() int32 {
	if o == nil || o.PercentSingleFamily == nil {
		var ret int32
		return ret
	}
	return *o.PercentSingleFamily
}

// GetPercentSingleFamilyOk returns a tuple with the PercentSingleFamily field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DemographicsAppendResponseDemographicsResidenceDwelling) GetPercentSingleFamilyOk() (*int32, bool) {
	if o == nil || o.PercentSingleFamily == nil {
		return nil, false
	}
	return o.PercentSingleFamily, true
}

// HasPercentSingleFamily returns a boolean if a field has been set.
func (o *DemographicsAppendResponseDemographicsResidenceDwelling) HasPercentSingleFamily() bool {
	if o != nil && o.PercentSingleFamily != nil {
		return true
	}

	return false
}

// SetPercentSingleFamily gets a reference to the given int32 and assigns it to the PercentSingleFamily field.
func (o *DemographicsAppendResponseDemographicsResidenceDwelling) SetPercentSingleFamily(v int32) {
	o.PercentSingleFamily = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *DemographicsAppendResponseDemographicsResidenceDwelling) GetType() string {
	if o == nil || o.Type == nil {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DemographicsAppendResponseDemographicsResidenceDwelling) GetTypeOk() (*string, bool) {
	if o == nil || o.Type == nil {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *DemographicsAppendResponseDemographicsResidenceDwelling) HasType() bool {
	if o != nil && o.Type != nil {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *DemographicsAppendResponseDemographicsResidenceDwelling) SetType(v string) {
	o.Type = &v
}

// GetPercentMultipleFamily returns the PercentMultipleFamily field value if set, zero value otherwise.
func (o *DemographicsAppendResponseDemographicsResidenceDwelling) GetPercentMultipleFamily() int32 {
	if o == nil || o.PercentMultipleFamily == nil {
		var ret int32
		return ret
	}
	return *o.PercentMultipleFamily
}

// GetPercentMultipleFamilyOk returns a tuple with the PercentMultipleFamily field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DemographicsAppendResponseDemographicsResidenceDwelling) GetPercentMultipleFamilyOk() (*int32, bool) {
	if o == nil || o.PercentMultipleFamily == nil {
		return nil, false
	}
	return o.PercentMultipleFamily, true
}

// HasPercentMultipleFamily returns a boolean if a field has been set.
func (o *DemographicsAppendResponseDemographicsResidenceDwelling) HasPercentMultipleFamily() bool {
	if o != nil && o.PercentMultipleFamily != nil {
		return true
	}

	return false
}

// SetPercentMultipleFamily gets a reference to the given int32 and assigns it to the PercentMultipleFamily field.
func (o *DemographicsAppendResponseDemographicsResidenceDwelling) SetPercentMultipleFamily(v int32) {
	o.PercentMultipleFamily = &v
}

func (o DemographicsAppendResponseDemographicsResidenceDwelling) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.PercentSingleFamily != nil {
		toSerialize["percentSingleFamily"] = o.PercentSingleFamily
	}
	if o.Type != nil {
		toSerialize["type"] = o.Type
	}
	if o.PercentMultipleFamily != nil {
		toSerialize["percentMultipleFamily"] = o.PercentMultipleFamily
	}
	return json.Marshal(toSerialize)
}

type NullableDemographicsAppendResponseDemographicsResidenceDwelling struct {
	value *DemographicsAppendResponseDemographicsResidenceDwelling
	isSet bool
}

func (v NullableDemographicsAppendResponseDemographicsResidenceDwelling) Get() *DemographicsAppendResponseDemographicsResidenceDwelling {
	return v.value
}

func (v *NullableDemographicsAppendResponseDemographicsResidenceDwelling) Set(val *DemographicsAppendResponseDemographicsResidenceDwelling) {
	v.value = val
	v.isSet = true
}

func (v NullableDemographicsAppendResponseDemographicsResidenceDwelling) IsSet() bool {
	return v.isSet
}

func (v *NullableDemographicsAppendResponseDemographicsResidenceDwelling) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDemographicsAppendResponseDemographicsResidenceDwelling(val *DemographicsAppendResponseDemographicsResidenceDwelling) *NullableDemographicsAppendResponseDemographicsResidenceDwelling {
	return &NullableDemographicsAppendResponseDemographicsResidenceDwelling{value: val, isSet: true}
}

func (v NullableDemographicsAppendResponseDemographicsResidenceDwelling) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDemographicsAppendResponseDemographicsResidenceDwelling) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


