/*
Stakkd API

# Introduction The Stakkd platform provides comprehensive data services that meet the business objectives of organizations ranging from Fortune 500 companies to startups. Our clients work in an array of industries, including insurance, financial, legal, travel, hospitality, retail, health, media, and telecommunications.  The Stakkd API is documented using the Open API 3.0.1 standard.  All endpoints are available at https://api.stakkd.io/v1. Detailed documentation for each endpoint is below, including the full URL for the endpoint.  # Account Types The API supports two different account types, each with different permissions.  ## Paid Account Paid accounts provide unlimited access to all of the URIs.  ## Trial Account Trial Accounts have a limited number of queries to the APIs. Keep in mind that queries which do not return results still count against the Trial Account query limits. Trial Accounts are temporary, but can be upgraded or extended by contacting [support@stakkd.io](mailto:support@stakkd.io) 

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package Stakkd

import (
	"encoding/json"
)

// SkipTracingLookupResponse struct for SkipTracingLookupResponse
type SkipTracingLookupResponse struct {
	Addresses *SkipTracingLookupResponseAddresses `json:"addresses,omitempty"`
	Names *SkipTracingLookupResponseNames `json:"names,omitempty"`
	Demographics *SkipTracingLookupResponseDemographics `json:"demographics,omitempty"`
}

// NewSkipTracingLookupResponse instantiates a new SkipTracingLookupResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSkipTracingLookupResponse() *SkipTracingLookupResponse {
	this := SkipTracingLookupResponse{}
	return &this
}

// NewSkipTracingLookupResponseWithDefaults instantiates a new SkipTracingLookupResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSkipTracingLookupResponseWithDefaults() *SkipTracingLookupResponse {
	this := SkipTracingLookupResponse{}
	return &this
}

// GetAddresses returns the Addresses field value if set, zero value otherwise.
func (o *SkipTracingLookupResponse) GetAddresses() SkipTracingLookupResponseAddresses {
	if o == nil || o.Addresses == nil {
		var ret SkipTracingLookupResponseAddresses
		return ret
	}
	return *o.Addresses
}

// GetAddressesOk returns a tuple with the Addresses field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SkipTracingLookupResponse) GetAddressesOk() (*SkipTracingLookupResponseAddresses, bool) {
	if o == nil || o.Addresses == nil {
		return nil, false
	}
	return o.Addresses, true
}

// HasAddresses returns a boolean if a field has been set.
func (o *SkipTracingLookupResponse) HasAddresses() bool {
	if o != nil && o.Addresses != nil {
		return true
	}

	return false
}

// SetAddresses gets a reference to the given SkipTracingLookupResponseAddresses and assigns it to the Addresses field.
func (o *SkipTracingLookupResponse) SetAddresses(v SkipTracingLookupResponseAddresses) {
	o.Addresses = &v
}

// GetNames returns the Names field value if set, zero value otherwise.
func (o *SkipTracingLookupResponse) GetNames() SkipTracingLookupResponseNames {
	if o == nil || o.Names == nil {
		var ret SkipTracingLookupResponseNames
		return ret
	}
	return *o.Names
}

// GetNamesOk returns a tuple with the Names field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SkipTracingLookupResponse) GetNamesOk() (*SkipTracingLookupResponseNames, bool) {
	if o == nil || o.Names == nil {
		return nil, false
	}
	return o.Names, true
}

// HasNames returns a boolean if a field has been set.
func (o *SkipTracingLookupResponse) HasNames() bool {
	if o != nil && o.Names != nil {
		return true
	}

	return false
}

// SetNames gets a reference to the given SkipTracingLookupResponseNames and assigns it to the Names field.
func (o *SkipTracingLookupResponse) SetNames(v SkipTracingLookupResponseNames) {
	o.Names = &v
}

// GetDemographics returns the Demographics field value if set, zero value otherwise.
func (o *SkipTracingLookupResponse) GetDemographics() SkipTracingLookupResponseDemographics {
	if o == nil || o.Demographics == nil {
		var ret SkipTracingLookupResponseDemographics
		return ret
	}
	return *o.Demographics
}

// GetDemographicsOk returns a tuple with the Demographics field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SkipTracingLookupResponse) GetDemographicsOk() (*SkipTracingLookupResponseDemographics, bool) {
	if o == nil || o.Demographics == nil {
		return nil, false
	}
	return o.Demographics, true
}

// HasDemographics returns a boolean if a field has been set.
func (o *SkipTracingLookupResponse) HasDemographics() bool {
	if o != nil && o.Demographics != nil {
		return true
	}

	return false
}

// SetDemographics gets a reference to the given SkipTracingLookupResponseDemographics and assigns it to the Demographics field.
func (o *SkipTracingLookupResponse) SetDemographics(v SkipTracingLookupResponseDemographics) {
	o.Demographics = &v
}

func (o SkipTracingLookupResponse) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Addresses != nil {
		toSerialize["addresses"] = o.Addresses
	}
	if o.Names != nil {
		toSerialize["names"] = o.Names
	}
	if o.Demographics != nil {
		toSerialize["demographics"] = o.Demographics
	}
	return json.Marshal(toSerialize)
}

type NullableSkipTracingLookupResponse struct {
	value *SkipTracingLookupResponse
	isSet bool
}

func (v NullableSkipTracingLookupResponse) Get() *SkipTracingLookupResponse {
	return v.value
}

func (v *NullableSkipTracingLookupResponse) Set(val *SkipTracingLookupResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableSkipTracingLookupResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableSkipTracingLookupResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSkipTracingLookupResponse(val *SkipTracingLookupResponse) *NullableSkipTracingLookupResponse {
	return &NullableSkipTracingLookupResponse{value: val, isSet: true}
}

func (v NullableSkipTracingLookupResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSkipTracingLookupResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


