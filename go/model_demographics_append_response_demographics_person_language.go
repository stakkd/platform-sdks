/*
Stakkd API

# Introduction The Stakkd platform provides comprehensive data services that meet the business objectives of organizations ranging from Fortune 500 companies to startups. Our clients work in an array of industries, including insurance, financial, legal, travel, hospitality, retail, health, media, and telecommunications.  The Stakkd API is documented using the Open API 3.0.1 standard.  All endpoints are available at https://api.stakkd.io/v1. Detailed documentation for each endpoint is below, including the full URL for the endpoint.  # Account Types The API supports two different account types, each with different permissions.  ## Paid Account Paid accounts provide unlimited access to all of the URIs.  ## Trial Account Trial Accounts have a limited number of queries to the APIs. Keep in mind that queries which do not return results still count against the Trial Account query limits. Trial Accounts are temporary, but can be upgraded or extended by contacting [support@stakkd.io](mailto:support@stakkd.io) 

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package Stakkd

import (
	"encoding/json"
)

// DemographicsAppendResponseDemographicsPersonLanguage struct for DemographicsAppendResponseDemographicsPersonLanguage
type DemographicsAppendResponseDemographicsPersonLanguage struct {
	// The Penetration Percentage for indicating whether the person is a spanish speaker, +/- 3%.
	PercentSpanishSpeaker *int32 `json:"percentSpanishSpeaker,omitempty"`
	// The Penetration Percentage for indicating whether the person is an asian speaker, +/- 3%.
	PercentAsianSpeaker *int32 `json:"percentAsianSpeaker,omitempty"`
	// The Penetration Percentage for indicating whether the person is an english speaker, +/- 3%.
	PercentEnglishSpeaker *int32 `json:"percentEnglishSpeaker,omitempty"`
}

// NewDemographicsAppendResponseDemographicsPersonLanguage instantiates a new DemographicsAppendResponseDemographicsPersonLanguage object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDemographicsAppendResponseDemographicsPersonLanguage() *DemographicsAppendResponseDemographicsPersonLanguage {
	this := DemographicsAppendResponseDemographicsPersonLanguage{}
	return &this
}

// NewDemographicsAppendResponseDemographicsPersonLanguageWithDefaults instantiates a new DemographicsAppendResponseDemographicsPersonLanguage object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDemographicsAppendResponseDemographicsPersonLanguageWithDefaults() *DemographicsAppendResponseDemographicsPersonLanguage {
	this := DemographicsAppendResponseDemographicsPersonLanguage{}
	return &this
}

// GetPercentSpanishSpeaker returns the PercentSpanishSpeaker field value if set, zero value otherwise.
func (o *DemographicsAppendResponseDemographicsPersonLanguage) GetPercentSpanishSpeaker() int32 {
	if o == nil || o.PercentSpanishSpeaker == nil {
		var ret int32
		return ret
	}
	return *o.PercentSpanishSpeaker
}

// GetPercentSpanishSpeakerOk returns a tuple with the PercentSpanishSpeaker field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DemographicsAppendResponseDemographicsPersonLanguage) GetPercentSpanishSpeakerOk() (*int32, bool) {
	if o == nil || o.PercentSpanishSpeaker == nil {
		return nil, false
	}
	return o.PercentSpanishSpeaker, true
}

// HasPercentSpanishSpeaker returns a boolean if a field has been set.
func (o *DemographicsAppendResponseDemographicsPersonLanguage) HasPercentSpanishSpeaker() bool {
	if o != nil && o.PercentSpanishSpeaker != nil {
		return true
	}

	return false
}

// SetPercentSpanishSpeaker gets a reference to the given int32 and assigns it to the PercentSpanishSpeaker field.
func (o *DemographicsAppendResponseDemographicsPersonLanguage) SetPercentSpanishSpeaker(v int32) {
	o.PercentSpanishSpeaker = &v
}

// GetPercentAsianSpeaker returns the PercentAsianSpeaker field value if set, zero value otherwise.
func (o *DemographicsAppendResponseDemographicsPersonLanguage) GetPercentAsianSpeaker() int32 {
	if o == nil || o.PercentAsianSpeaker == nil {
		var ret int32
		return ret
	}
	return *o.PercentAsianSpeaker
}

// GetPercentAsianSpeakerOk returns a tuple with the PercentAsianSpeaker field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DemographicsAppendResponseDemographicsPersonLanguage) GetPercentAsianSpeakerOk() (*int32, bool) {
	if o == nil || o.PercentAsianSpeaker == nil {
		return nil, false
	}
	return o.PercentAsianSpeaker, true
}

// HasPercentAsianSpeaker returns a boolean if a field has been set.
func (o *DemographicsAppendResponseDemographicsPersonLanguage) HasPercentAsianSpeaker() bool {
	if o != nil && o.PercentAsianSpeaker != nil {
		return true
	}

	return false
}

// SetPercentAsianSpeaker gets a reference to the given int32 and assigns it to the PercentAsianSpeaker field.
func (o *DemographicsAppendResponseDemographicsPersonLanguage) SetPercentAsianSpeaker(v int32) {
	o.PercentAsianSpeaker = &v
}

// GetPercentEnglishSpeaker returns the PercentEnglishSpeaker field value if set, zero value otherwise.
func (o *DemographicsAppendResponseDemographicsPersonLanguage) GetPercentEnglishSpeaker() int32 {
	if o == nil || o.PercentEnglishSpeaker == nil {
		var ret int32
		return ret
	}
	return *o.PercentEnglishSpeaker
}

// GetPercentEnglishSpeakerOk returns a tuple with the PercentEnglishSpeaker field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DemographicsAppendResponseDemographicsPersonLanguage) GetPercentEnglishSpeakerOk() (*int32, bool) {
	if o == nil || o.PercentEnglishSpeaker == nil {
		return nil, false
	}
	return o.PercentEnglishSpeaker, true
}

// HasPercentEnglishSpeaker returns a boolean if a field has been set.
func (o *DemographicsAppendResponseDemographicsPersonLanguage) HasPercentEnglishSpeaker() bool {
	if o != nil && o.PercentEnglishSpeaker != nil {
		return true
	}

	return false
}

// SetPercentEnglishSpeaker gets a reference to the given int32 and assigns it to the PercentEnglishSpeaker field.
func (o *DemographicsAppendResponseDemographicsPersonLanguage) SetPercentEnglishSpeaker(v int32) {
	o.PercentEnglishSpeaker = &v
}

func (o DemographicsAppendResponseDemographicsPersonLanguage) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.PercentSpanishSpeaker != nil {
		toSerialize["percentSpanishSpeaker"] = o.PercentSpanishSpeaker
	}
	if o.PercentAsianSpeaker != nil {
		toSerialize["percentAsianSpeaker"] = o.PercentAsianSpeaker
	}
	if o.PercentEnglishSpeaker != nil {
		toSerialize["percentEnglishSpeaker"] = o.PercentEnglishSpeaker
	}
	return json.Marshal(toSerialize)
}

type NullableDemographicsAppendResponseDemographicsPersonLanguage struct {
	value *DemographicsAppendResponseDemographicsPersonLanguage
	isSet bool
}

func (v NullableDemographicsAppendResponseDemographicsPersonLanguage) Get() *DemographicsAppendResponseDemographicsPersonLanguage {
	return v.value
}

func (v *NullableDemographicsAppendResponseDemographicsPersonLanguage) Set(val *DemographicsAppendResponseDemographicsPersonLanguage) {
	v.value = val
	v.isSet = true
}

func (v NullableDemographicsAppendResponseDemographicsPersonLanguage) IsSet() bool {
	return v.isSet
}

func (v *NullableDemographicsAppendResponseDemographicsPersonLanguage) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDemographicsAppendResponseDemographicsPersonLanguage(val *DemographicsAppendResponseDemographicsPersonLanguage) *NullableDemographicsAppendResponseDemographicsPersonLanguage {
	return &NullableDemographicsAppendResponseDemographicsPersonLanguage{value: val, isSet: true}
}

func (v NullableDemographicsAppendResponseDemographicsPersonLanguage) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDemographicsAppendResponseDemographicsPersonLanguage) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


