/*
Stakkd API

# Introduction The Stakkd platform provides comprehensive data services that meet the business objectives of organizations ranging from Fortune 500 companies to startups. Our clients work in an array of industries, including insurance, financial, legal, travel, hospitality, retail, health, media, and telecommunications.  The Stakkd API is documented using the Open API 3.0.1 standard.  All endpoints are available at https://api.stakkd.io/v1. Detailed documentation for each endpoint is below, including the full URL for the endpoint.  # Account Types The API supports two different account types, each with different permissions.  ## Paid Account Paid accounts provide unlimited access to all of the URIs.  ## Trial Account Trial Accounts have a limited number of queries to the APIs. Keep in mind that queries which do not return results still count against the Trial Account query limits. Trial Accounts are temporary, but can be upgraded or extended by contacting [support@stakkd.io](mailto:support@stakkd.io) 

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package Stakkd

import (
	"encoding/json"
)

// MobileAppendResponse struct for MobileAppendResponse
type MobileAppendResponse struct {
	Address *IpLookupResponseAddress `json:"address,omitempty"`
	Phone *PhoneVerifyResponsePhone `json:"phone,omitempty"`
	// The last name for the person.
	LastName *string `json:"lastName,omitempty"`
	// The first name for the person.
	FirstName *string `json:"firstName,omitempty"`
}

// NewMobileAppendResponse instantiates a new MobileAppendResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMobileAppendResponse() *MobileAppendResponse {
	this := MobileAppendResponse{}
	return &this
}

// NewMobileAppendResponseWithDefaults instantiates a new MobileAppendResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMobileAppendResponseWithDefaults() *MobileAppendResponse {
	this := MobileAppendResponse{}
	return &this
}

// GetAddress returns the Address field value if set, zero value otherwise.
func (o *MobileAppendResponse) GetAddress() IpLookupResponseAddress {
	if o == nil || o.Address == nil {
		var ret IpLookupResponseAddress
		return ret
	}
	return *o.Address
}

// GetAddressOk returns a tuple with the Address field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MobileAppendResponse) GetAddressOk() (*IpLookupResponseAddress, bool) {
	if o == nil || o.Address == nil {
		return nil, false
	}
	return o.Address, true
}

// HasAddress returns a boolean if a field has been set.
func (o *MobileAppendResponse) HasAddress() bool {
	if o != nil && o.Address != nil {
		return true
	}

	return false
}

// SetAddress gets a reference to the given IpLookupResponseAddress and assigns it to the Address field.
func (o *MobileAppendResponse) SetAddress(v IpLookupResponseAddress) {
	o.Address = &v
}

// GetPhone returns the Phone field value if set, zero value otherwise.
func (o *MobileAppendResponse) GetPhone() PhoneVerifyResponsePhone {
	if o == nil || o.Phone == nil {
		var ret PhoneVerifyResponsePhone
		return ret
	}
	return *o.Phone
}

// GetPhoneOk returns a tuple with the Phone field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MobileAppendResponse) GetPhoneOk() (*PhoneVerifyResponsePhone, bool) {
	if o == nil || o.Phone == nil {
		return nil, false
	}
	return o.Phone, true
}

// HasPhone returns a boolean if a field has been set.
func (o *MobileAppendResponse) HasPhone() bool {
	if o != nil && o.Phone != nil {
		return true
	}

	return false
}

// SetPhone gets a reference to the given PhoneVerifyResponsePhone and assigns it to the Phone field.
func (o *MobileAppendResponse) SetPhone(v PhoneVerifyResponsePhone) {
	o.Phone = &v
}

// GetLastName returns the LastName field value if set, zero value otherwise.
func (o *MobileAppendResponse) GetLastName() string {
	if o == nil || o.LastName == nil {
		var ret string
		return ret
	}
	return *o.LastName
}

// GetLastNameOk returns a tuple with the LastName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MobileAppendResponse) GetLastNameOk() (*string, bool) {
	if o == nil || o.LastName == nil {
		return nil, false
	}
	return o.LastName, true
}

// HasLastName returns a boolean if a field has been set.
func (o *MobileAppendResponse) HasLastName() bool {
	if o != nil && o.LastName != nil {
		return true
	}

	return false
}

// SetLastName gets a reference to the given string and assigns it to the LastName field.
func (o *MobileAppendResponse) SetLastName(v string) {
	o.LastName = &v
}

// GetFirstName returns the FirstName field value if set, zero value otherwise.
func (o *MobileAppendResponse) GetFirstName() string {
	if o == nil || o.FirstName == nil {
		var ret string
		return ret
	}
	return *o.FirstName
}

// GetFirstNameOk returns a tuple with the FirstName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MobileAppendResponse) GetFirstNameOk() (*string, bool) {
	if o == nil || o.FirstName == nil {
		return nil, false
	}
	return o.FirstName, true
}

// HasFirstName returns a boolean if a field has been set.
func (o *MobileAppendResponse) HasFirstName() bool {
	if o != nil && o.FirstName != nil {
		return true
	}

	return false
}

// SetFirstName gets a reference to the given string and assigns it to the FirstName field.
func (o *MobileAppendResponse) SetFirstName(v string) {
	o.FirstName = &v
}

func (o MobileAppendResponse) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Address != nil {
		toSerialize["address"] = o.Address
	}
	if o.Phone != nil {
		toSerialize["phone"] = o.Phone
	}
	if o.LastName != nil {
		toSerialize["lastName"] = o.LastName
	}
	if o.FirstName != nil {
		toSerialize["firstName"] = o.FirstName
	}
	return json.Marshal(toSerialize)
}

type NullableMobileAppendResponse struct {
	value *MobileAppendResponse
	isSet bool
}

func (v NullableMobileAppendResponse) Get() *MobileAppendResponse {
	return v.value
}

func (v *NullableMobileAppendResponse) Set(val *MobileAppendResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableMobileAppendResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableMobileAppendResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMobileAppendResponse(val *MobileAppendResponse) *NullableMobileAppendResponse {
	return &NullableMobileAppendResponse{value: val, isSet: true}
}

func (v NullableMobileAppendResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMobileAppendResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


