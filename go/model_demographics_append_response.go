/*
Stakkd API

# Introduction The Stakkd platform provides comprehensive data services that meet the business objectives of organizations ranging from Fortune 500 companies to startups. Our clients work in an array of industries, including insurance, financial, legal, travel, hospitality, retail, health, media, and telecommunications.  The Stakkd API is documented using the Open API 3.0.1 standard.  All endpoints are available at https://api.stakkd.io/v1. Detailed documentation for each endpoint is below, including the full URL for the endpoint.  # Account Types The API supports two different account types, each with different permissions.  ## Paid Account Paid accounts provide unlimited access to all of the URIs.  ## Trial Account Trial Accounts have a limited number of queries to the APIs. Keep in mind that queries which do not return results still count against the Trial Account query limits. Trial Accounts are temporary, but can be upgraded or extended by contacting [support@stakkd.io](mailto:support@stakkd.io) 

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package Stakkd

import (
	"encoding/json"
)

// DemographicsAppendResponse struct for DemographicsAppendResponse
type DemographicsAppendResponse struct {
	Address *IpLookupResponseAddress `json:"address,omitempty"`
	// An array of related phone numbers.
	Phones []DemographicsAppendResponsePhones `json:"phones,omitempty"`
	// The type of match the data represents.
	CategoryMatch *string `json:"categoryMatch,omitempty"`
	LifeStyles *DemographicsAppendResponseLifeStyles `json:"lifeStyles,omitempty"`
	Demographics *DemographicsAppendResponseDemographics `json:"demographics,omitempty"`
}

// NewDemographicsAppendResponse instantiates a new DemographicsAppendResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDemographicsAppendResponse() *DemographicsAppendResponse {
	this := DemographicsAppendResponse{}
	return &this
}

// NewDemographicsAppendResponseWithDefaults instantiates a new DemographicsAppendResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDemographicsAppendResponseWithDefaults() *DemographicsAppendResponse {
	this := DemographicsAppendResponse{}
	return &this
}

// GetAddress returns the Address field value if set, zero value otherwise.
func (o *DemographicsAppendResponse) GetAddress() IpLookupResponseAddress {
	if o == nil || o.Address == nil {
		var ret IpLookupResponseAddress
		return ret
	}
	return *o.Address
}

// GetAddressOk returns a tuple with the Address field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DemographicsAppendResponse) GetAddressOk() (*IpLookupResponseAddress, bool) {
	if o == nil || o.Address == nil {
		return nil, false
	}
	return o.Address, true
}

// HasAddress returns a boolean if a field has been set.
func (o *DemographicsAppendResponse) HasAddress() bool {
	if o != nil && o.Address != nil {
		return true
	}

	return false
}

// SetAddress gets a reference to the given IpLookupResponseAddress and assigns it to the Address field.
func (o *DemographicsAppendResponse) SetAddress(v IpLookupResponseAddress) {
	o.Address = &v
}

// GetPhones returns the Phones field value if set, zero value otherwise.
func (o *DemographicsAppendResponse) GetPhones() []DemographicsAppendResponsePhones {
	if o == nil || o.Phones == nil {
		var ret []DemographicsAppendResponsePhones
		return ret
	}
	return o.Phones
}

// GetPhonesOk returns a tuple with the Phones field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DemographicsAppendResponse) GetPhonesOk() ([]DemographicsAppendResponsePhones, bool) {
	if o == nil || o.Phones == nil {
		return nil, false
	}
	return o.Phones, true
}

// HasPhones returns a boolean if a field has been set.
func (o *DemographicsAppendResponse) HasPhones() bool {
	if o != nil && o.Phones != nil {
		return true
	}

	return false
}

// SetPhones gets a reference to the given []DemographicsAppendResponsePhones and assigns it to the Phones field.
func (o *DemographicsAppendResponse) SetPhones(v []DemographicsAppendResponsePhones) {
	o.Phones = v
}

// GetCategoryMatch returns the CategoryMatch field value if set, zero value otherwise.
func (o *DemographicsAppendResponse) GetCategoryMatch() string {
	if o == nil || o.CategoryMatch == nil {
		var ret string
		return ret
	}
	return *o.CategoryMatch
}

// GetCategoryMatchOk returns a tuple with the CategoryMatch field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DemographicsAppendResponse) GetCategoryMatchOk() (*string, bool) {
	if o == nil || o.CategoryMatch == nil {
		return nil, false
	}
	return o.CategoryMatch, true
}

// HasCategoryMatch returns a boolean if a field has been set.
func (o *DemographicsAppendResponse) HasCategoryMatch() bool {
	if o != nil && o.CategoryMatch != nil {
		return true
	}

	return false
}

// SetCategoryMatch gets a reference to the given string and assigns it to the CategoryMatch field.
func (o *DemographicsAppendResponse) SetCategoryMatch(v string) {
	o.CategoryMatch = &v
}

// GetLifeStyles returns the LifeStyles field value if set, zero value otherwise.
func (o *DemographicsAppendResponse) GetLifeStyles() DemographicsAppendResponseLifeStyles {
	if o == nil || o.LifeStyles == nil {
		var ret DemographicsAppendResponseLifeStyles
		return ret
	}
	return *o.LifeStyles
}

// GetLifeStylesOk returns a tuple with the LifeStyles field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DemographicsAppendResponse) GetLifeStylesOk() (*DemographicsAppendResponseLifeStyles, bool) {
	if o == nil || o.LifeStyles == nil {
		return nil, false
	}
	return o.LifeStyles, true
}

// HasLifeStyles returns a boolean if a field has been set.
func (o *DemographicsAppendResponse) HasLifeStyles() bool {
	if o != nil && o.LifeStyles != nil {
		return true
	}

	return false
}

// SetLifeStyles gets a reference to the given DemographicsAppendResponseLifeStyles and assigns it to the LifeStyles field.
func (o *DemographicsAppendResponse) SetLifeStyles(v DemographicsAppendResponseLifeStyles) {
	o.LifeStyles = &v
}

// GetDemographics returns the Demographics field value if set, zero value otherwise.
func (o *DemographicsAppendResponse) GetDemographics() DemographicsAppendResponseDemographics {
	if o == nil || o.Demographics == nil {
		var ret DemographicsAppendResponseDemographics
		return ret
	}
	return *o.Demographics
}

// GetDemographicsOk returns a tuple with the Demographics field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DemographicsAppendResponse) GetDemographicsOk() (*DemographicsAppendResponseDemographics, bool) {
	if o == nil || o.Demographics == nil {
		return nil, false
	}
	return o.Demographics, true
}

// HasDemographics returns a boolean if a field has been set.
func (o *DemographicsAppendResponse) HasDemographics() bool {
	if o != nil && o.Demographics != nil {
		return true
	}

	return false
}

// SetDemographics gets a reference to the given DemographicsAppendResponseDemographics and assigns it to the Demographics field.
func (o *DemographicsAppendResponse) SetDemographics(v DemographicsAppendResponseDemographics) {
	o.Demographics = &v
}

func (o DemographicsAppendResponse) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Address != nil {
		toSerialize["address"] = o.Address
	}
	if o.Phones != nil {
		toSerialize["phones"] = o.Phones
	}
	if o.CategoryMatch != nil {
		toSerialize["categoryMatch"] = o.CategoryMatch
	}
	if o.LifeStyles != nil {
		toSerialize["lifeStyles"] = o.LifeStyles
	}
	if o.Demographics != nil {
		toSerialize["demographics"] = o.Demographics
	}
	return json.Marshal(toSerialize)
}

type NullableDemographicsAppendResponse struct {
	value *DemographicsAppendResponse
	isSet bool
}

func (v NullableDemographicsAppendResponse) Get() *DemographicsAppendResponse {
	return v.value
}

func (v *NullableDemographicsAppendResponse) Set(val *DemographicsAppendResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableDemographicsAppendResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableDemographicsAppendResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDemographicsAppendResponse(val *DemographicsAppendResponse) *NullableDemographicsAppendResponse {
	return &NullableDemographicsAppendResponse{value: val, isSet: true}
}

func (v NullableDemographicsAppendResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDemographicsAppendResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


