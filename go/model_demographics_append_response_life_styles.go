/*
Stakkd API

# Introduction The Stakkd platform provides comprehensive data services that meet the business objectives of organizations ranging from Fortune 500 companies to startups. Our clients work in an array of industries, including insurance, financial, legal, travel, hospitality, retail, health, media, and telecommunications.  The Stakkd API is documented using the Open API 3.0.1 standard.  All endpoints are available at https://api.stakkd.io/v1. Detailed documentation for each endpoint is below, including the full URL for the endpoint.  # Account Types The API supports two different account types, each with different permissions.  ## Paid Account Paid accounts provide unlimited access to all of the URIs.  ## Trial Account Trial Accounts have a limited number of queries to the APIs. Keep in mind that queries which do not return results still count against the Trial Account query limits. Trial Accounts are temporary, but can be upgraded or extended by contacting [support@stakkd.io](mailto:support@stakkd.io) 

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package Stakkd

import (
	"encoding/json"
)

// DemographicsAppendResponseLifeStyles struct for DemographicsAppendResponseLifeStyles
type DemographicsAppendResponseLifeStyles struct {
	Book *DemographicsAppendResponseLifeStylesBook `json:"book,omitempty"`
	Apparel *DemographicsAppendResponseLifeStylesApparel `json:"apparel,omitempty"`
	// Indicates whether the person is flagged as a value shopper.
	ValueShopper *bool `json:"valueShopper,omitempty"`
	Interests *DemographicsAppendResponseLifeStylesInterests `json:"interests,omitempty"`
	// The type of pet the person owns.
	Pet *string `json:"pet,omitempty"`
}

// NewDemographicsAppendResponseLifeStyles instantiates a new DemographicsAppendResponseLifeStyles object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDemographicsAppendResponseLifeStyles() *DemographicsAppendResponseLifeStyles {
	this := DemographicsAppendResponseLifeStyles{}
	return &this
}

// NewDemographicsAppendResponseLifeStylesWithDefaults instantiates a new DemographicsAppendResponseLifeStyles object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDemographicsAppendResponseLifeStylesWithDefaults() *DemographicsAppendResponseLifeStyles {
	this := DemographicsAppendResponseLifeStyles{}
	return &this
}

// GetBook returns the Book field value if set, zero value otherwise.
func (o *DemographicsAppendResponseLifeStyles) GetBook() DemographicsAppendResponseLifeStylesBook {
	if o == nil || o.Book == nil {
		var ret DemographicsAppendResponseLifeStylesBook
		return ret
	}
	return *o.Book
}

// GetBookOk returns a tuple with the Book field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DemographicsAppendResponseLifeStyles) GetBookOk() (*DemographicsAppendResponseLifeStylesBook, bool) {
	if o == nil || o.Book == nil {
		return nil, false
	}
	return o.Book, true
}

// HasBook returns a boolean if a field has been set.
func (o *DemographicsAppendResponseLifeStyles) HasBook() bool {
	if o != nil && o.Book != nil {
		return true
	}

	return false
}

// SetBook gets a reference to the given DemographicsAppendResponseLifeStylesBook and assigns it to the Book field.
func (o *DemographicsAppendResponseLifeStyles) SetBook(v DemographicsAppendResponseLifeStylesBook) {
	o.Book = &v
}

// GetApparel returns the Apparel field value if set, zero value otherwise.
func (o *DemographicsAppendResponseLifeStyles) GetApparel() DemographicsAppendResponseLifeStylesApparel {
	if o == nil || o.Apparel == nil {
		var ret DemographicsAppendResponseLifeStylesApparel
		return ret
	}
	return *o.Apparel
}

// GetApparelOk returns a tuple with the Apparel field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DemographicsAppendResponseLifeStyles) GetApparelOk() (*DemographicsAppendResponseLifeStylesApparel, bool) {
	if o == nil || o.Apparel == nil {
		return nil, false
	}
	return o.Apparel, true
}

// HasApparel returns a boolean if a field has been set.
func (o *DemographicsAppendResponseLifeStyles) HasApparel() bool {
	if o != nil && o.Apparel != nil {
		return true
	}

	return false
}

// SetApparel gets a reference to the given DemographicsAppendResponseLifeStylesApparel and assigns it to the Apparel field.
func (o *DemographicsAppendResponseLifeStyles) SetApparel(v DemographicsAppendResponseLifeStylesApparel) {
	o.Apparel = &v
}

// GetValueShopper returns the ValueShopper field value if set, zero value otherwise.
func (o *DemographicsAppendResponseLifeStyles) GetValueShopper() bool {
	if o == nil || o.ValueShopper == nil {
		var ret bool
		return ret
	}
	return *o.ValueShopper
}

// GetValueShopperOk returns a tuple with the ValueShopper field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DemographicsAppendResponseLifeStyles) GetValueShopperOk() (*bool, bool) {
	if o == nil || o.ValueShopper == nil {
		return nil, false
	}
	return o.ValueShopper, true
}

// HasValueShopper returns a boolean if a field has been set.
func (o *DemographicsAppendResponseLifeStyles) HasValueShopper() bool {
	if o != nil && o.ValueShopper != nil {
		return true
	}

	return false
}

// SetValueShopper gets a reference to the given bool and assigns it to the ValueShopper field.
func (o *DemographicsAppendResponseLifeStyles) SetValueShopper(v bool) {
	o.ValueShopper = &v
}

// GetInterests returns the Interests field value if set, zero value otherwise.
func (o *DemographicsAppendResponseLifeStyles) GetInterests() DemographicsAppendResponseLifeStylesInterests {
	if o == nil || o.Interests == nil {
		var ret DemographicsAppendResponseLifeStylesInterests
		return ret
	}
	return *o.Interests
}

// GetInterestsOk returns a tuple with the Interests field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DemographicsAppendResponseLifeStyles) GetInterestsOk() (*DemographicsAppendResponseLifeStylesInterests, bool) {
	if o == nil || o.Interests == nil {
		return nil, false
	}
	return o.Interests, true
}

// HasInterests returns a boolean if a field has been set.
func (o *DemographicsAppendResponseLifeStyles) HasInterests() bool {
	if o != nil && o.Interests != nil {
		return true
	}

	return false
}

// SetInterests gets a reference to the given DemographicsAppendResponseLifeStylesInterests and assigns it to the Interests field.
func (o *DemographicsAppendResponseLifeStyles) SetInterests(v DemographicsAppendResponseLifeStylesInterests) {
	o.Interests = &v
}

// GetPet returns the Pet field value if set, zero value otherwise.
func (o *DemographicsAppendResponseLifeStyles) GetPet() string {
	if o == nil || o.Pet == nil {
		var ret string
		return ret
	}
	return *o.Pet
}

// GetPetOk returns a tuple with the Pet field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DemographicsAppendResponseLifeStyles) GetPetOk() (*string, bool) {
	if o == nil || o.Pet == nil {
		return nil, false
	}
	return o.Pet, true
}

// HasPet returns a boolean if a field has been set.
func (o *DemographicsAppendResponseLifeStyles) HasPet() bool {
	if o != nil && o.Pet != nil {
		return true
	}

	return false
}

// SetPet gets a reference to the given string and assigns it to the Pet field.
func (o *DemographicsAppendResponseLifeStyles) SetPet(v string) {
	o.Pet = &v
}

func (o DemographicsAppendResponseLifeStyles) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Book != nil {
		toSerialize["book"] = o.Book
	}
	if o.Apparel != nil {
		toSerialize["apparel"] = o.Apparel
	}
	if o.ValueShopper != nil {
		toSerialize["valueShopper"] = o.ValueShopper
	}
	if o.Interests != nil {
		toSerialize["interests"] = o.Interests
	}
	if o.Pet != nil {
		toSerialize["pet"] = o.Pet
	}
	return json.Marshal(toSerialize)
}

type NullableDemographicsAppendResponseLifeStyles struct {
	value *DemographicsAppendResponseLifeStyles
	isSet bool
}

func (v NullableDemographicsAppendResponseLifeStyles) Get() *DemographicsAppendResponseLifeStyles {
	return v.value
}

func (v *NullableDemographicsAppendResponseLifeStyles) Set(val *DemographicsAppendResponseLifeStyles) {
	v.value = val
	v.isSet = true
}

func (v NullableDemographicsAppendResponseLifeStyles) IsSet() bool {
	return v.isSet
}

func (v *NullableDemographicsAppendResponseLifeStyles) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDemographicsAppendResponseLifeStyles(val *DemographicsAppendResponseLifeStyles) *NullableDemographicsAppendResponseLifeStyles {
	return &NullableDemographicsAppendResponseLifeStyles{value: val, isSet: true}
}

func (v NullableDemographicsAppendResponseLifeStyles) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDemographicsAppendResponseLifeStyles) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


