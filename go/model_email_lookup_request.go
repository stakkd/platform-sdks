/*
Stakkd API

# Introduction The Stakkd platform provides comprehensive data services that meet the business objectives of organizations ranging from Fortune 500 companies to startups. Our clients work in an array of industries, including insurance, financial, legal, travel, hospitality, retail, health, media, and telecommunications.  The Stakkd API is documented using the Open API 3.0.1 standard.  All endpoints are available at https://api.stakkd.io/v1. Detailed documentation for each endpoint is below, including the full URL for the endpoint.  # Account Types The API supports two different account types, each with different permissions.  ## Paid Account Paid accounts provide unlimited access to all of the URIs.  ## Trial Account Trial Accounts have a limited number of queries to the APIs. Keep in mind that queries which do not return results still count against the Trial Account query limits. Trial Accounts are temporary, but can be upgraded or extended by contacting [support@stakkd.io](mailto:support@stakkd.io) 

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package Stakkd

import (
	"encoding/json"
)

// EmailLookupRequest struct for EmailLookupRequest
type EmailLookupRequest struct {
	// The phone to use in the request.
	Phone string `json:"phone"`
}

// NewEmailLookupRequest instantiates a new EmailLookupRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEmailLookupRequest(phone string) *EmailLookupRequest {
	this := EmailLookupRequest{}
	this.Phone = phone
	return &this
}

// NewEmailLookupRequestWithDefaults instantiates a new EmailLookupRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEmailLookupRequestWithDefaults() *EmailLookupRequest {
	this := EmailLookupRequest{}
	return &this
}

// GetPhone returns the Phone field value
func (o *EmailLookupRequest) GetPhone() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Phone
}

// GetPhoneOk returns a tuple with the Phone field value
// and a boolean to check if the value has been set.
func (o *EmailLookupRequest) GetPhoneOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Phone, true
}

// SetPhone sets field value
func (o *EmailLookupRequest) SetPhone(v string) {
	o.Phone = v
}

func (o EmailLookupRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["phone"] = o.Phone
	}
	return json.Marshal(toSerialize)
}

type NullableEmailLookupRequest struct {
	value *EmailLookupRequest
	isSet bool
}

func (v NullableEmailLookupRequest) Get() *EmailLookupRequest {
	return v.value
}

func (v *NullableEmailLookupRequest) Set(val *EmailLookupRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableEmailLookupRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableEmailLookupRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEmailLookupRequest(val *EmailLookupRequest) *NullableEmailLookupRequest {
	return &NullableEmailLookupRequest{value: val, isSet: true}
}

func (v NullableEmailLookupRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEmailLookupRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


