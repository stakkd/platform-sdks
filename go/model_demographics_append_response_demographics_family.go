/*
Stakkd API

# Introduction The Stakkd platform provides comprehensive data services that meet the business objectives of organizations ranging from Fortune 500 companies to startups. Our clients work in an array of industries, including insurance, financial, legal, travel, hospitality, retail, health, media, and telecommunications.  The Stakkd API is documented using the Open API 3.0.1 standard.  All endpoints are available at https://api.stakkd.io/v1. Detailed documentation for each endpoint is below, including the full URL for the endpoint.  # Account Types The API supports two different account types, each with different permissions.  ## Paid Account Paid accounts provide unlimited access to all of the URIs.  ## Trial Account Trial Accounts have a limited number of queries to the APIs. Keep in mind that queries which do not return results still count against the Trial Account query limits. Trial Accounts are temporary, but can be upgraded or extended by contacting [support@stakkd.io](mailto:support@stakkd.io) 

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package Stakkd

import (
	"encoding/json"
)

// DemographicsAppendResponseDemographicsFamily struct for DemographicsAppendResponseDemographicsFamily
type DemographicsAppendResponseDemographicsFamily struct {
	// Indicates whether the person is flagged as being a single parent.
	IsSingleParent *bool `json:"isSingleParent,omitempty"`
	Children *DemographicsAppendResponseDemographicsFamilyChildren `json:"children,omitempty"`
	// The marital status for the person.
	Married *string `json:"married,omitempty"`
}

// NewDemographicsAppendResponseDemographicsFamily instantiates a new DemographicsAppendResponseDemographicsFamily object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDemographicsAppendResponseDemographicsFamily() *DemographicsAppendResponseDemographicsFamily {
	this := DemographicsAppendResponseDemographicsFamily{}
	return &this
}

// NewDemographicsAppendResponseDemographicsFamilyWithDefaults instantiates a new DemographicsAppendResponseDemographicsFamily object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDemographicsAppendResponseDemographicsFamilyWithDefaults() *DemographicsAppendResponseDemographicsFamily {
	this := DemographicsAppendResponseDemographicsFamily{}
	return &this
}

// GetIsSingleParent returns the IsSingleParent field value if set, zero value otherwise.
func (o *DemographicsAppendResponseDemographicsFamily) GetIsSingleParent() bool {
	if o == nil || o.IsSingleParent == nil {
		var ret bool
		return ret
	}
	return *o.IsSingleParent
}

// GetIsSingleParentOk returns a tuple with the IsSingleParent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DemographicsAppendResponseDemographicsFamily) GetIsSingleParentOk() (*bool, bool) {
	if o == nil || o.IsSingleParent == nil {
		return nil, false
	}
	return o.IsSingleParent, true
}

// HasIsSingleParent returns a boolean if a field has been set.
func (o *DemographicsAppendResponseDemographicsFamily) HasIsSingleParent() bool {
	if o != nil && o.IsSingleParent != nil {
		return true
	}

	return false
}

// SetIsSingleParent gets a reference to the given bool and assigns it to the IsSingleParent field.
func (o *DemographicsAppendResponseDemographicsFamily) SetIsSingleParent(v bool) {
	o.IsSingleParent = &v
}

// GetChildren returns the Children field value if set, zero value otherwise.
func (o *DemographicsAppendResponseDemographicsFamily) GetChildren() DemographicsAppendResponseDemographicsFamilyChildren {
	if o == nil || o.Children == nil {
		var ret DemographicsAppendResponseDemographicsFamilyChildren
		return ret
	}
	return *o.Children
}

// GetChildrenOk returns a tuple with the Children field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DemographicsAppendResponseDemographicsFamily) GetChildrenOk() (*DemographicsAppendResponseDemographicsFamilyChildren, bool) {
	if o == nil || o.Children == nil {
		return nil, false
	}
	return o.Children, true
}

// HasChildren returns a boolean if a field has been set.
func (o *DemographicsAppendResponseDemographicsFamily) HasChildren() bool {
	if o != nil && o.Children != nil {
		return true
	}

	return false
}

// SetChildren gets a reference to the given DemographicsAppendResponseDemographicsFamilyChildren and assigns it to the Children field.
func (o *DemographicsAppendResponseDemographicsFamily) SetChildren(v DemographicsAppendResponseDemographicsFamilyChildren) {
	o.Children = &v
}

// GetMarried returns the Married field value if set, zero value otherwise.
func (o *DemographicsAppendResponseDemographicsFamily) GetMarried() string {
	if o == nil || o.Married == nil {
		var ret string
		return ret
	}
	return *o.Married
}

// GetMarriedOk returns a tuple with the Married field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DemographicsAppendResponseDemographicsFamily) GetMarriedOk() (*string, bool) {
	if o == nil || o.Married == nil {
		return nil, false
	}
	return o.Married, true
}

// HasMarried returns a boolean if a field has been set.
func (o *DemographicsAppendResponseDemographicsFamily) HasMarried() bool {
	if o != nil && o.Married != nil {
		return true
	}

	return false
}

// SetMarried gets a reference to the given string and assigns it to the Married field.
func (o *DemographicsAppendResponseDemographicsFamily) SetMarried(v string) {
	o.Married = &v
}

func (o DemographicsAppendResponseDemographicsFamily) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.IsSingleParent != nil {
		toSerialize["isSingleParent"] = o.IsSingleParent
	}
	if o.Children != nil {
		toSerialize["children"] = o.Children
	}
	if o.Married != nil {
		toSerialize["married"] = o.Married
	}
	return json.Marshal(toSerialize)
}

type NullableDemographicsAppendResponseDemographicsFamily struct {
	value *DemographicsAppendResponseDemographicsFamily
	isSet bool
}

func (v NullableDemographicsAppendResponseDemographicsFamily) Get() *DemographicsAppendResponseDemographicsFamily {
	return v.value
}

func (v *NullableDemographicsAppendResponseDemographicsFamily) Set(val *DemographicsAppendResponseDemographicsFamily) {
	v.value = val
	v.isSet = true
}

func (v NullableDemographicsAppendResponseDemographicsFamily) IsSet() bool {
	return v.isSet
}

func (v *NullableDemographicsAppendResponseDemographicsFamily) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDemographicsAppendResponseDemographicsFamily(val *DemographicsAppendResponseDemographicsFamily) *NullableDemographicsAppendResponseDemographicsFamily {
	return &NullableDemographicsAppendResponseDemographicsFamily{value: val, isSet: true}
}

func (v NullableDemographicsAppendResponseDemographicsFamily) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDemographicsAppendResponseDemographicsFamily) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


