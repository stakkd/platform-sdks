/*
Stakkd API

# Introduction The Stakkd platform provides comprehensive data services that meet the business objectives of organizations ranging from Fortune 500 companies to startups. Our clients work in an array of industries, including insurance, financial, legal, travel, hospitality, retail, health, media, and telecommunications.  The Stakkd API is documented using the Open API 3.0.1 standard.  All endpoints are available at https://api.stakkd.io/v1. Detailed documentation for each endpoint is below, including the full URL for the endpoint.  # Account Types The API supports two different account types, each with different permissions.  ## Paid Account Paid accounts provide unlimited access to all of the URIs.  ## Trial Account Trial Accounts have a limited number of queries to the APIs. Keep in mind that queries which do not return results still count against the Trial Account query limits. Trial Accounts are temporary, but can be upgraded or extended by contacting [support@stakkd.io](mailto:support@stakkd.io) 

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package Stakkd

import (
	"encoding/json"
)

// DisconnectVerifyResponse struct for DisconnectVerifyResponse
type DisconnectVerifyResponse struct {
	// Indicates whether or not the phone is flagged as connected.
	Connected *bool `json:"connected,omitempty"`
	Address *IpLookupResponseAddress `json:"address,omitempty"`
	Phone *DisconnectVerifyResponsePhone `json:"phone,omitempty"`
	// The last name for the person.
	LastName *string `json:"lastName,omitempty"`
	// The middle name for the person.
	MiddleName *string `json:"middleName,omitempty"`
	// The first name for the person.
	FirstName *string `json:"firstName,omitempty"`
}

// NewDisconnectVerifyResponse instantiates a new DisconnectVerifyResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDisconnectVerifyResponse() *DisconnectVerifyResponse {
	this := DisconnectVerifyResponse{}
	return &this
}

// NewDisconnectVerifyResponseWithDefaults instantiates a new DisconnectVerifyResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDisconnectVerifyResponseWithDefaults() *DisconnectVerifyResponse {
	this := DisconnectVerifyResponse{}
	return &this
}

// GetConnected returns the Connected field value if set, zero value otherwise.
func (o *DisconnectVerifyResponse) GetConnected() bool {
	if o == nil || o.Connected == nil {
		var ret bool
		return ret
	}
	return *o.Connected
}

// GetConnectedOk returns a tuple with the Connected field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DisconnectVerifyResponse) GetConnectedOk() (*bool, bool) {
	if o == nil || o.Connected == nil {
		return nil, false
	}
	return o.Connected, true
}

// HasConnected returns a boolean if a field has been set.
func (o *DisconnectVerifyResponse) HasConnected() bool {
	if o != nil && o.Connected != nil {
		return true
	}

	return false
}

// SetConnected gets a reference to the given bool and assigns it to the Connected field.
func (o *DisconnectVerifyResponse) SetConnected(v bool) {
	o.Connected = &v
}

// GetAddress returns the Address field value if set, zero value otherwise.
func (o *DisconnectVerifyResponse) GetAddress() IpLookupResponseAddress {
	if o == nil || o.Address == nil {
		var ret IpLookupResponseAddress
		return ret
	}
	return *o.Address
}

// GetAddressOk returns a tuple with the Address field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DisconnectVerifyResponse) GetAddressOk() (*IpLookupResponseAddress, bool) {
	if o == nil || o.Address == nil {
		return nil, false
	}
	return o.Address, true
}

// HasAddress returns a boolean if a field has been set.
func (o *DisconnectVerifyResponse) HasAddress() bool {
	if o != nil && o.Address != nil {
		return true
	}

	return false
}

// SetAddress gets a reference to the given IpLookupResponseAddress and assigns it to the Address field.
func (o *DisconnectVerifyResponse) SetAddress(v IpLookupResponseAddress) {
	o.Address = &v
}

// GetPhone returns the Phone field value if set, zero value otherwise.
func (o *DisconnectVerifyResponse) GetPhone() DisconnectVerifyResponsePhone {
	if o == nil || o.Phone == nil {
		var ret DisconnectVerifyResponsePhone
		return ret
	}
	return *o.Phone
}

// GetPhoneOk returns a tuple with the Phone field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DisconnectVerifyResponse) GetPhoneOk() (*DisconnectVerifyResponsePhone, bool) {
	if o == nil || o.Phone == nil {
		return nil, false
	}
	return o.Phone, true
}

// HasPhone returns a boolean if a field has been set.
func (o *DisconnectVerifyResponse) HasPhone() bool {
	if o != nil && o.Phone != nil {
		return true
	}

	return false
}

// SetPhone gets a reference to the given DisconnectVerifyResponsePhone and assigns it to the Phone field.
func (o *DisconnectVerifyResponse) SetPhone(v DisconnectVerifyResponsePhone) {
	o.Phone = &v
}

// GetLastName returns the LastName field value if set, zero value otherwise.
func (o *DisconnectVerifyResponse) GetLastName() string {
	if o == nil || o.LastName == nil {
		var ret string
		return ret
	}
	return *o.LastName
}

// GetLastNameOk returns a tuple with the LastName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DisconnectVerifyResponse) GetLastNameOk() (*string, bool) {
	if o == nil || o.LastName == nil {
		return nil, false
	}
	return o.LastName, true
}

// HasLastName returns a boolean if a field has been set.
func (o *DisconnectVerifyResponse) HasLastName() bool {
	if o != nil && o.LastName != nil {
		return true
	}

	return false
}

// SetLastName gets a reference to the given string and assigns it to the LastName field.
func (o *DisconnectVerifyResponse) SetLastName(v string) {
	o.LastName = &v
}

// GetMiddleName returns the MiddleName field value if set, zero value otherwise.
func (o *DisconnectVerifyResponse) GetMiddleName() string {
	if o == nil || o.MiddleName == nil {
		var ret string
		return ret
	}
	return *o.MiddleName
}

// GetMiddleNameOk returns a tuple with the MiddleName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DisconnectVerifyResponse) GetMiddleNameOk() (*string, bool) {
	if o == nil || o.MiddleName == nil {
		return nil, false
	}
	return o.MiddleName, true
}

// HasMiddleName returns a boolean if a field has been set.
func (o *DisconnectVerifyResponse) HasMiddleName() bool {
	if o != nil && o.MiddleName != nil {
		return true
	}

	return false
}

// SetMiddleName gets a reference to the given string and assigns it to the MiddleName field.
func (o *DisconnectVerifyResponse) SetMiddleName(v string) {
	o.MiddleName = &v
}

// GetFirstName returns the FirstName field value if set, zero value otherwise.
func (o *DisconnectVerifyResponse) GetFirstName() string {
	if o == nil || o.FirstName == nil {
		var ret string
		return ret
	}
	return *o.FirstName
}

// GetFirstNameOk returns a tuple with the FirstName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DisconnectVerifyResponse) GetFirstNameOk() (*string, bool) {
	if o == nil || o.FirstName == nil {
		return nil, false
	}
	return o.FirstName, true
}

// HasFirstName returns a boolean if a field has been set.
func (o *DisconnectVerifyResponse) HasFirstName() bool {
	if o != nil && o.FirstName != nil {
		return true
	}

	return false
}

// SetFirstName gets a reference to the given string and assigns it to the FirstName field.
func (o *DisconnectVerifyResponse) SetFirstName(v string) {
	o.FirstName = &v
}

func (o DisconnectVerifyResponse) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Connected != nil {
		toSerialize["connected"] = o.Connected
	}
	if o.Address != nil {
		toSerialize["address"] = o.Address
	}
	if o.Phone != nil {
		toSerialize["phone"] = o.Phone
	}
	if o.LastName != nil {
		toSerialize["lastName"] = o.LastName
	}
	if o.MiddleName != nil {
		toSerialize["middleName"] = o.MiddleName
	}
	if o.FirstName != nil {
		toSerialize["firstName"] = o.FirstName
	}
	return json.Marshal(toSerialize)
}

type NullableDisconnectVerifyResponse struct {
	value *DisconnectVerifyResponse
	isSet bool
}

func (v NullableDisconnectVerifyResponse) Get() *DisconnectVerifyResponse {
	return v.value
}

func (v *NullableDisconnectVerifyResponse) Set(val *DisconnectVerifyResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableDisconnectVerifyResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableDisconnectVerifyResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDisconnectVerifyResponse(val *DisconnectVerifyResponse) *NullableDisconnectVerifyResponse {
	return &NullableDisconnectVerifyResponse{value: val, isSet: true}
}

func (v NullableDisconnectVerifyResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDisconnectVerifyResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


