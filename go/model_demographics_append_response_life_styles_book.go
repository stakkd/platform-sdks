/*
Stakkd API

# Introduction The Stakkd platform provides comprehensive data services that meet the business objectives of organizations ranging from Fortune 500 companies to startups. Our clients work in an array of industries, including insurance, financial, legal, travel, hospitality, retail, health, media, and telecommunications.  The Stakkd API is documented using the Open API 3.0.1 standard.  All endpoints are available at https://api.stakkd.io/v1. Detailed documentation for each endpoint is below, including the full URL for the endpoint.  # Account Types The API supports two different account types, each with different permissions.  ## Paid Account Paid accounts provide unlimited access to all of the URIs.  ## Trial Account Trial Accounts have a limited number of queries to the APIs. Keep in mind that queries which do not return results still count against the Trial Account query limits. Trial Accounts are temporary, but can be upgraded or extended by contacting [support@stakkd.io](mailto:support@stakkd.io) 

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package Stakkd

import (
	"encoding/json"
)

// DemographicsAppendResponseLifeStylesBook struct for DemographicsAppendResponseLifeStylesBook
type DemographicsAppendResponseLifeStylesBook struct {
	// Indicates whether the person is flagged as a book reader.
	Reader *bool `json:"reader,omitempty"`
	// Indicates whether the person is flagged as a book buyer.
	Buyer *bool `json:"buyer,omitempty"`
}

// NewDemographicsAppendResponseLifeStylesBook instantiates a new DemographicsAppendResponseLifeStylesBook object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDemographicsAppendResponseLifeStylesBook() *DemographicsAppendResponseLifeStylesBook {
	this := DemographicsAppendResponseLifeStylesBook{}
	return &this
}

// NewDemographicsAppendResponseLifeStylesBookWithDefaults instantiates a new DemographicsAppendResponseLifeStylesBook object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDemographicsAppendResponseLifeStylesBookWithDefaults() *DemographicsAppendResponseLifeStylesBook {
	this := DemographicsAppendResponseLifeStylesBook{}
	return &this
}

// GetReader returns the Reader field value if set, zero value otherwise.
func (o *DemographicsAppendResponseLifeStylesBook) GetReader() bool {
	if o == nil || o.Reader == nil {
		var ret bool
		return ret
	}
	return *o.Reader
}

// GetReaderOk returns a tuple with the Reader field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DemographicsAppendResponseLifeStylesBook) GetReaderOk() (*bool, bool) {
	if o == nil || o.Reader == nil {
		return nil, false
	}
	return o.Reader, true
}

// HasReader returns a boolean if a field has been set.
func (o *DemographicsAppendResponseLifeStylesBook) HasReader() bool {
	if o != nil && o.Reader != nil {
		return true
	}

	return false
}

// SetReader gets a reference to the given bool and assigns it to the Reader field.
func (o *DemographicsAppendResponseLifeStylesBook) SetReader(v bool) {
	o.Reader = &v
}

// GetBuyer returns the Buyer field value if set, zero value otherwise.
func (o *DemographicsAppendResponseLifeStylesBook) GetBuyer() bool {
	if o == nil || o.Buyer == nil {
		var ret bool
		return ret
	}
	return *o.Buyer
}

// GetBuyerOk returns a tuple with the Buyer field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DemographicsAppendResponseLifeStylesBook) GetBuyerOk() (*bool, bool) {
	if o == nil || o.Buyer == nil {
		return nil, false
	}
	return o.Buyer, true
}

// HasBuyer returns a boolean if a field has been set.
func (o *DemographicsAppendResponseLifeStylesBook) HasBuyer() bool {
	if o != nil && o.Buyer != nil {
		return true
	}

	return false
}

// SetBuyer gets a reference to the given bool and assigns it to the Buyer field.
func (o *DemographicsAppendResponseLifeStylesBook) SetBuyer(v bool) {
	o.Buyer = &v
}

func (o DemographicsAppendResponseLifeStylesBook) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Reader != nil {
		toSerialize["reader"] = o.Reader
	}
	if o.Buyer != nil {
		toSerialize["buyer"] = o.Buyer
	}
	return json.Marshal(toSerialize)
}

type NullableDemographicsAppendResponseLifeStylesBook struct {
	value *DemographicsAppendResponseLifeStylesBook
	isSet bool
}

func (v NullableDemographicsAppendResponseLifeStylesBook) Get() *DemographicsAppendResponseLifeStylesBook {
	return v.value
}

func (v *NullableDemographicsAppendResponseLifeStylesBook) Set(val *DemographicsAppendResponseLifeStylesBook) {
	v.value = val
	v.isSet = true
}

func (v NullableDemographicsAppendResponseLifeStylesBook) IsSet() bool {
	return v.isSet
}

func (v *NullableDemographicsAppendResponseLifeStylesBook) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDemographicsAppendResponseLifeStylesBook(val *DemographicsAppendResponseLifeStylesBook) *NullableDemographicsAppendResponseLifeStylesBook {
	return &NullableDemographicsAppendResponseLifeStylesBook{value: val, isSet: true}
}

func (v NullableDemographicsAppendResponseLifeStylesBook) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDemographicsAppendResponseLifeStylesBook) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


