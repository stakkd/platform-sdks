/*
 * Stakkd API
 * # Introduction The Stakkd platform provides comprehensive data services that meet the business objectives of organizations ranging from Fortune 500 companies to startups. Our clients work in an array of industries, including insurance, financial, legal, travel, hospitality, retail, health, media, and telecommunications.  The Stakkd API is documented using the Open API 3.0.1 standard.  All endpoints are available at https://api.stakkd.io/v1. Detailed documentation for each endpoint is below, including the full URL for the endpoint.  # Account Types The API supports two different account types, each with different permissions.  ## Paid Account Paid accounts provide unlimited access to all of the URIs.  ## Trial Account Trial Accounts have a limited number of queries to the APIs. Keep in mind that queries which do not return results still count against the Trial Account query limits. Trial Accounts are temporary, but can be upgraded or extended by contacting [support@stakkd.io](mailto:support@stakkd.io) 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.stakkd;

import com.ApiCallback;
import com.ApiClient;
import com.ApiException;
import com.ApiResponse;
import com.Configuration;
import com.Pair;
import com.ProgressRequestBody;
import com.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.stakkd.model.DemographicsAppendRequest;
import com.stakkd.model.DemographicsAppendResponse;
import com.stakkd.model.EmailAppendRequest;
import com.stakkd.model.EmailAppendResponse;
import com.stakkd.model.MobileAppendRequest;
import com.stakkd.model.MobileAppendResponse;
import com.stakkd.model.PhoneAppendRequest;
import com.stakkd.model.PhoneAppendResponse;
import com.stakkd.model.VehicleAppendRequest;
import com.stakkd.model.VehicleAppendResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class AppendApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public AppendApi() {
        this(Configuration.getDefaultApiClient());
    }

    public AppendApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for appendDemographicsPost
     * @param contentType  (required)
     * @param xApiKey  (required)
     * @param demographicsAppendRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> 204 response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> 400 response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> 403 response </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> 429 response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appendDemographicsPostCall(String contentType, String xApiKey, DemographicsAppendRequest demographicsAppendRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = demographicsAppendRequest;

        // create path and map variables
        String localVarPath = "/append/demographics";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }

        if (xApiKey != null) {
            localVarHeaderParams.put("x-api-key", localVarApiClient.parameterToString(xApiKey));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call appendDemographicsPostValidateBeforeCall(String contentType, String xApiKey, DemographicsAppendRequest demographicsAppendRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling appendDemographicsPost(Async)");
        }
        
        // verify the required parameter 'xApiKey' is set
        if (xApiKey == null) {
            throw new ApiException("Missing the required parameter 'xApiKey' when calling appendDemographicsPost(Async)");
        }
        
        // verify the required parameter 'demographicsAppendRequest' is set
        if (demographicsAppendRequest == null) {
            throw new ApiException("Missing the required parameter 'demographicsAppendRequest' when calling appendDemographicsPost(Async)");
        }
        

        okhttp3.Call localVarCall = appendDemographicsPostCall(contentType, xApiKey, demographicsAppendRequest, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param contentType  (required)
     * @param xApiKey  (required)
     * @param demographicsAppendRequest  (required)
     * @return DemographicsAppendResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> 204 response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> 400 response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> 403 response </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> 429 response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  -  </td></tr>
     </table>
     */
    public DemographicsAppendResponse appendDemographicsPost(String contentType, String xApiKey, DemographicsAppendRequest demographicsAppendRequest) throws ApiException {
        ApiResponse<DemographicsAppendResponse> localVarResp = appendDemographicsPostWithHttpInfo(contentType, xApiKey, demographicsAppendRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param contentType  (required)
     * @param xApiKey  (required)
     * @param demographicsAppendRequest  (required)
     * @return ApiResponse&lt;DemographicsAppendResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> 204 response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> 400 response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> 403 response </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> 429 response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DemographicsAppendResponse> appendDemographicsPostWithHttpInfo(String contentType, String xApiKey, DemographicsAppendRequest demographicsAppendRequest) throws ApiException {
        okhttp3.Call localVarCall = appendDemographicsPostValidateBeforeCall(contentType, xApiKey, demographicsAppendRequest, null);
        Type localVarReturnType = new TypeToken<DemographicsAppendResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param contentType  (required)
     * @param xApiKey  (required)
     * @param demographicsAppendRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> 204 response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> 400 response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> 403 response </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> 429 response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appendDemographicsPostAsync(String contentType, String xApiKey, DemographicsAppendRequest demographicsAppendRequest, final ApiCallback<DemographicsAppendResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = appendDemographicsPostValidateBeforeCall(contentType, xApiKey, demographicsAppendRequest, _callback);
        Type localVarReturnType = new TypeToken<DemographicsAppendResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for appendEmailPost
     * @param contentType  (required)
     * @param xApiKey  (required)
     * @param emailAppendRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> 204 response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> 400 response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> 403 response </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> 429 response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appendEmailPostCall(String contentType, String xApiKey, EmailAppendRequest emailAppendRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = emailAppendRequest;

        // create path and map variables
        String localVarPath = "/append/email";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }

        if (xApiKey != null) {
            localVarHeaderParams.put("x-api-key", localVarApiClient.parameterToString(xApiKey));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call appendEmailPostValidateBeforeCall(String contentType, String xApiKey, EmailAppendRequest emailAppendRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling appendEmailPost(Async)");
        }
        
        // verify the required parameter 'xApiKey' is set
        if (xApiKey == null) {
            throw new ApiException("Missing the required parameter 'xApiKey' when calling appendEmailPost(Async)");
        }
        
        // verify the required parameter 'emailAppendRequest' is set
        if (emailAppendRequest == null) {
            throw new ApiException("Missing the required parameter 'emailAppendRequest' when calling appendEmailPost(Async)");
        }
        

        okhttp3.Call localVarCall = appendEmailPostCall(contentType, xApiKey, emailAppendRequest, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param contentType  (required)
     * @param xApiKey  (required)
     * @param emailAppendRequest  (required)
     * @return EmailAppendResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> 204 response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> 400 response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> 403 response </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> 429 response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  -  </td></tr>
     </table>
     */
    public EmailAppendResponse appendEmailPost(String contentType, String xApiKey, EmailAppendRequest emailAppendRequest) throws ApiException {
        ApiResponse<EmailAppendResponse> localVarResp = appendEmailPostWithHttpInfo(contentType, xApiKey, emailAppendRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param contentType  (required)
     * @param xApiKey  (required)
     * @param emailAppendRequest  (required)
     * @return ApiResponse&lt;EmailAppendResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> 204 response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> 400 response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> 403 response </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> 429 response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EmailAppendResponse> appendEmailPostWithHttpInfo(String contentType, String xApiKey, EmailAppendRequest emailAppendRequest) throws ApiException {
        okhttp3.Call localVarCall = appendEmailPostValidateBeforeCall(contentType, xApiKey, emailAppendRequest, null);
        Type localVarReturnType = new TypeToken<EmailAppendResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param contentType  (required)
     * @param xApiKey  (required)
     * @param emailAppendRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> 204 response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> 400 response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> 403 response </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> 429 response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appendEmailPostAsync(String contentType, String xApiKey, EmailAppendRequest emailAppendRequest, final ApiCallback<EmailAppendResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = appendEmailPostValidateBeforeCall(contentType, xApiKey, emailAppendRequest, _callback);
        Type localVarReturnType = new TypeToken<EmailAppendResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for appendMobilePost
     * @param contentType  (required)
     * @param xApiKey  (required)
     * @param mobileAppendRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> 204 response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> 400 response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> 403 response </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> 429 response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appendMobilePostCall(String contentType, String xApiKey, MobileAppendRequest mobileAppendRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = mobileAppendRequest;

        // create path and map variables
        String localVarPath = "/append/mobile";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }

        if (xApiKey != null) {
            localVarHeaderParams.put("x-api-key", localVarApiClient.parameterToString(xApiKey));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call appendMobilePostValidateBeforeCall(String contentType, String xApiKey, MobileAppendRequest mobileAppendRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling appendMobilePost(Async)");
        }
        
        // verify the required parameter 'xApiKey' is set
        if (xApiKey == null) {
            throw new ApiException("Missing the required parameter 'xApiKey' when calling appendMobilePost(Async)");
        }
        
        // verify the required parameter 'mobileAppendRequest' is set
        if (mobileAppendRequest == null) {
            throw new ApiException("Missing the required parameter 'mobileAppendRequest' when calling appendMobilePost(Async)");
        }
        

        okhttp3.Call localVarCall = appendMobilePostCall(contentType, xApiKey, mobileAppendRequest, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param contentType  (required)
     * @param xApiKey  (required)
     * @param mobileAppendRequest  (required)
     * @return MobileAppendResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> 204 response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> 400 response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> 403 response </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> 429 response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  -  </td></tr>
     </table>
     */
    public MobileAppendResponse appendMobilePost(String contentType, String xApiKey, MobileAppendRequest mobileAppendRequest) throws ApiException {
        ApiResponse<MobileAppendResponse> localVarResp = appendMobilePostWithHttpInfo(contentType, xApiKey, mobileAppendRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param contentType  (required)
     * @param xApiKey  (required)
     * @param mobileAppendRequest  (required)
     * @return ApiResponse&lt;MobileAppendResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> 204 response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> 400 response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> 403 response </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> 429 response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MobileAppendResponse> appendMobilePostWithHttpInfo(String contentType, String xApiKey, MobileAppendRequest mobileAppendRequest) throws ApiException {
        okhttp3.Call localVarCall = appendMobilePostValidateBeforeCall(contentType, xApiKey, mobileAppendRequest, null);
        Type localVarReturnType = new TypeToken<MobileAppendResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param contentType  (required)
     * @param xApiKey  (required)
     * @param mobileAppendRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> 204 response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> 400 response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> 403 response </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> 429 response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appendMobilePostAsync(String contentType, String xApiKey, MobileAppendRequest mobileAppendRequest, final ApiCallback<MobileAppendResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = appendMobilePostValidateBeforeCall(contentType, xApiKey, mobileAppendRequest, _callback);
        Type localVarReturnType = new TypeToken<MobileAppendResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for appendPhonePost
     * @param contentType  (required)
     * @param xApiKey  (required)
     * @param phoneAppendRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> 204 response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> 400 response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> 403 response </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> 429 response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appendPhonePostCall(String contentType, String xApiKey, PhoneAppendRequest phoneAppendRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = phoneAppendRequest;

        // create path and map variables
        String localVarPath = "/append/phone";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }

        if (xApiKey != null) {
            localVarHeaderParams.put("x-api-key", localVarApiClient.parameterToString(xApiKey));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call appendPhonePostValidateBeforeCall(String contentType, String xApiKey, PhoneAppendRequest phoneAppendRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling appendPhonePost(Async)");
        }
        
        // verify the required parameter 'xApiKey' is set
        if (xApiKey == null) {
            throw new ApiException("Missing the required parameter 'xApiKey' when calling appendPhonePost(Async)");
        }
        
        // verify the required parameter 'phoneAppendRequest' is set
        if (phoneAppendRequest == null) {
            throw new ApiException("Missing the required parameter 'phoneAppendRequest' when calling appendPhonePost(Async)");
        }
        

        okhttp3.Call localVarCall = appendPhonePostCall(contentType, xApiKey, phoneAppendRequest, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param contentType  (required)
     * @param xApiKey  (required)
     * @param phoneAppendRequest  (required)
     * @return PhoneAppendResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> 204 response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> 400 response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> 403 response </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> 429 response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  -  </td></tr>
     </table>
     */
    public PhoneAppendResponse appendPhonePost(String contentType, String xApiKey, PhoneAppendRequest phoneAppendRequest) throws ApiException {
        ApiResponse<PhoneAppendResponse> localVarResp = appendPhonePostWithHttpInfo(contentType, xApiKey, phoneAppendRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param contentType  (required)
     * @param xApiKey  (required)
     * @param phoneAppendRequest  (required)
     * @return ApiResponse&lt;PhoneAppendResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> 204 response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> 400 response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> 403 response </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> 429 response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PhoneAppendResponse> appendPhonePostWithHttpInfo(String contentType, String xApiKey, PhoneAppendRequest phoneAppendRequest) throws ApiException {
        okhttp3.Call localVarCall = appendPhonePostValidateBeforeCall(contentType, xApiKey, phoneAppendRequest, null);
        Type localVarReturnType = new TypeToken<PhoneAppendResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param contentType  (required)
     * @param xApiKey  (required)
     * @param phoneAppendRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> 204 response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> 400 response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> 403 response </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> 429 response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appendPhonePostAsync(String contentType, String xApiKey, PhoneAppendRequest phoneAppendRequest, final ApiCallback<PhoneAppendResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = appendPhonePostValidateBeforeCall(contentType, xApiKey, phoneAppendRequest, _callback);
        Type localVarReturnType = new TypeToken<PhoneAppendResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for appendVehiclePost
     * @param contentType  (required)
     * @param xApiKey  (required)
     * @param vehicleAppendRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> 204 response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> 400 response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> 403 response </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> 429 response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appendVehiclePostCall(String contentType, String xApiKey, VehicleAppendRequest vehicleAppendRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = vehicleAppendRequest;

        // create path and map variables
        String localVarPath = "/append/vehicle";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }

        if (xApiKey != null) {
            localVarHeaderParams.put("x-api-key", localVarApiClient.parameterToString(xApiKey));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call appendVehiclePostValidateBeforeCall(String contentType, String xApiKey, VehicleAppendRequest vehicleAppendRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling appendVehiclePost(Async)");
        }
        
        // verify the required parameter 'xApiKey' is set
        if (xApiKey == null) {
            throw new ApiException("Missing the required parameter 'xApiKey' when calling appendVehiclePost(Async)");
        }
        
        // verify the required parameter 'vehicleAppendRequest' is set
        if (vehicleAppendRequest == null) {
            throw new ApiException("Missing the required parameter 'vehicleAppendRequest' when calling appendVehiclePost(Async)");
        }
        

        okhttp3.Call localVarCall = appendVehiclePostCall(contentType, xApiKey, vehicleAppendRequest, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param contentType  (required)
     * @param xApiKey  (required)
     * @param vehicleAppendRequest  (required)
     * @return VehicleAppendResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> 204 response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> 400 response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> 403 response </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> 429 response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  -  </td></tr>
     </table>
     */
    public VehicleAppendResponse appendVehiclePost(String contentType, String xApiKey, VehicleAppendRequest vehicleAppendRequest) throws ApiException {
        ApiResponse<VehicleAppendResponse> localVarResp = appendVehiclePostWithHttpInfo(contentType, xApiKey, vehicleAppendRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param contentType  (required)
     * @param xApiKey  (required)
     * @param vehicleAppendRequest  (required)
     * @return ApiResponse&lt;VehicleAppendResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> 204 response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> 400 response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> 403 response </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> 429 response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<VehicleAppendResponse> appendVehiclePostWithHttpInfo(String contentType, String xApiKey, VehicleAppendRequest vehicleAppendRequest) throws ApiException {
        okhttp3.Call localVarCall = appendVehiclePostValidateBeforeCall(contentType, xApiKey, vehicleAppendRequest, null);
        Type localVarReturnType = new TypeToken<VehicleAppendResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param contentType  (required)
     * @param xApiKey  (required)
     * @param vehicleAppendRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> 204 response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> 400 response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> 403 response </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> 429 response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call appendVehiclePostAsync(String contentType, String xApiKey, VehicleAppendRequest vehicleAppendRequest, final ApiCallback<VehicleAppendResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = appendVehiclePostValidateBeforeCall(contentType, xApiKey, vehicleAppendRequest, _callback);
        Type localVarReturnType = new TypeToken<VehicleAppendResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
