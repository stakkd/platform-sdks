/*
 * Stakkd API
 * # Introduction The Stakkd platform provides comprehensive data services that meet the business objectives of organizations ranging from Fortune 500 companies to startups. Our clients work in an array of industries, including insurance, financial, legal, travel, hospitality, retail, health, media, and telecommunications.  The Stakkd API is documented using the Open API 3.0.1 standard.  All endpoints are available at https://api.stakkd.io/v1. Detailed documentation for each endpoint is below, including the full URL for the endpoint.  # Account Types The API supports two different account types, each with different permissions.  ## Paid Account Paid accounts provide unlimited access to all of the URIs.  ## Trial Account Trial Accounts have a limited number of queries to the APIs. Keep in mind that queries which do not return results still count against the Trial Account query limits. Trial Accounts are temporary, but can be upgraded or extended by contacting [support@stakkd.io](mailto:support@stakkd.io) 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.stakkd;

import com.ApiCallback;
import com.ApiClient;
import com.ApiException;
import com.ApiResponse;
import com.Configuration;
import com.Pair;
import com.ProgressRequestBody;
import com.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.stakkd.model.EmailLookupRequest;
import com.stakkd.model.IpLookupRequest;
import com.stakkd.model.IpLookupResponse;
import com.stakkd.model.LookupResponse;
import com.stakkd.model.PhoneLookupRequest;
import com.stakkd.model.SkipTracingLookupRequest;
import com.stakkd.model.SkipTracingLookupResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class LookupApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public LookupApi() {
        this(Configuration.getDefaultApiClient());
    }

    public LookupApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for lookupEmailPost
     * @param contentType  (required)
     * @param xApiKey  (required)
     * @param emailLookupRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> 204 response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> 400 response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> 403 response </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> 429 response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call lookupEmailPostCall(String contentType, String xApiKey, EmailLookupRequest emailLookupRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = emailLookupRequest;

        // create path and map variables
        String localVarPath = "/lookup/email";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }

        if (xApiKey != null) {
            localVarHeaderParams.put("x-api-key", localVarApiClient.parameterToString(xApiKey));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call lookupEmailPostValidateBeforeCall(String contentType, String xApiKey, EmailLookupRequest emailLookupRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling lookupEmailPost(Async)");
        }
        
        // verify the required parameter 'xApiKey' is set
        if (xApiKey == null) {
            throw new ApiException("Missing the required parameter 'xApiKey' when calling lookupEmailPost(Async)");
        }
        
        // verify the required parameter 'emailLookupRequest' is set
        if (emailLookupRequest == null) {
            throw new ApiException("Missing the required parameter 'emailLookupRequest' when calling lookupEmailPost(Async)");
        }
        

        okhttp3.Call localVarCall = lookupEmailPostCall(contentType, xApiKey, emailLookupRequest, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param contentType  (required)
     * @param xApiKey  (required)
     * @param emailLookupRequest  (required)
     * @return LookupResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> 204 response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> 400 response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> 403 response </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> 429 response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  -  </td></tr>
     </table>
     */
    public LookupResponse lookupEmailPost(String contentType, String xApiKey, EmailLookupRequest emailLookupRequest) throws ApiException {
        ApiResponse<LookupResponse> localVarResp = lookupEmailPostWithHttpInfo(contentType, xApiKey, emailLookupRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param contentType  (required)
     * @param xApiKey  (required)
     * @param emailLookupRequest  (required)
     * @return ApiResponse&lt;LookupResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> 204 response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> 400 response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> 403 response </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> 429 response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<LookupResponse> lookupEmailPostWithHttpInfo(String contentType, String xApiKey, EmailLookupRequest emailLookupRequest) throws ApiException {
        okhttp3.Call localVarCall = lookupEmailPostValidateBeforeCall(contentType, xApiKey, emailLookupRequest, null);
        Type localVarReturnType = new TypeToken<LookupResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param contentType  (required)
     * @param xApiKey  (required)
     * @param emailLookupRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> 204 response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> 400 response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> 403 response </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> 429 response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call lookupEmailPostAsync(String contentType, String xApiKey, EmailLookupRequest emailLookupRequest, final ApiCallback<LookupResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = lookupEmailPostValidateBeforeCall(contentType, xApiKey, emailLookupRequest, _callback);
        Type localVarReturnType = new TypeToken<LookupResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for lookupIpPost
     * @param contentType  (required)
     * @param xApiKey  (required)
     * @param ipLookupRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> 204 response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> 400 response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> 403 response </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> 429 response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call lookupIpPostCall(String contentType, String xApiKey, IpLookupRequest ipLookupRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = ipLookupRequest;

        // create path and map variables
        String localVarPath = "/lookup/ip";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }

        if (xApiKey != null) {
            localVarHeaderParams.put("x-api-key", localVarApiClient.parameterToString(xApiKey));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call lookupIpPostValidateBeforeCall(String contentType, String xApiKey, IpLookupRequest ipLookupRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling lookupIpPost(Async)");
        }
        
        // verify the required parameter 'xApiKey' is set
        if (xApiKey == null) {
            throw new ApiException("Missing the required parameter 'xApiKey' when calling lookupIpPost(Async)");
        }
        
        // verify the required parameter 'ipLookupRequest' is set
        if (ipLookupRequest == null) {
            throw new ApiException("Missing the required parameter 'ipLookupRequest' when calling lookupIpPost(Async)");
        }
        

        okhttp3.Call localVarCall = lookupIpPostCall(contentType, xApiKey, ipLookupRequest, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param contentType  (required)
     * @param xApiKey  (required)
     * @param ipLookupRequest  (required)
     * @return IpLookupResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> 204 response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> 400 response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> 403 response </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> 429 response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  -  </td></tr>
     </table>
     */
    public IpLookupResponse lookupIpPost(String contentType, String xApiKey, IpLookupRequest ipLookupRequest) throws ApiException {
        ApiResponse<IpLookupResponse> localVarResp = lookupIpPostWithHttpInfo(contentType, xApiKey, ipLookupRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param contentType  (required)
     * @param xApiKey  (required)
     * @param ipLookupRequest  (required)
     * @return ApiResponse&lt;IpLookupResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> 204 response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> 400 response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> 403 response </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> 429 response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<IpLookupResponse> lookupIpPostWithHttpInfo(String contentType, String xApiKey, IpLookupRequest ipLookupRequest) throws ApiException {
        okhttp3.Call localVarCall = lookupIpPostValidateBeforeCall(contentType, xApiKey, ipLookupRequest, null);
        Type localVarReturnType = new TypeToken<IpLookupResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param contentType  (required)
     * @param xApiKey  (required)
     * @param ipLookupRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> 204 response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> 400 response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> 403 response </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> 429 response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call lookupIpPostAsync(String contentType, String xApiKey, IpLookupRequest ipLookupRequest, final ApiCallback<IpLookupResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = lookupIpPostValidateBeforeCall(contentType, xApiKey, ipLookupRequest, _callback);
        Type localVarReturnType = new TypeToken<IpLookupResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for lookupMobilePost
     * @param contentType  (required)
     * @param xApiKey  (required)
     * @param phoneLookupRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> 204 response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> 400 response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> 403 response </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> 429 response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call lookupMobilePostCall(String contentType, String xApiKey, PhoneLookupRequest phoneLookupRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = phoneLookupRequest;

        // create path and map variables
        String localVarPath = "/lookup/mobile";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }

        if (xApiKey != null) {
            localVarHeaderParams.put("x-api-key", localVarApiClient.parameterToString(xApiKey));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call lookupMobilePostValidateBeforeCall(String contentType, String xApiKey, PhoneLookupRequest phoneLookupRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling lookupMobilePost(Async)");
        }
        
        // verify the required parameter 'xApiKey' is set
        if (xApiKey == null) {
            throw new ApiException("Missing the required parameter 'xApiKey' when calling lookupMobilePost(Async)");
        }
        
        // verify the required parameter 'phoneLookupRequest' is set
        if (phoneLookupRequest == null) {
            throw new ApiException("Missing the required parameter 'phoneLookupRequest' when calling lookupMobilePost(Async)");
        }
        

        okhttp3.Call localVarCall = lookupMobilePostCall(contentType, xApiKey, phoneLookupRequest, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param contentType  (required)
     * @param xApiKey  (required)
     * @param phoneLookupRequest  (required)
     * @return LookupResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> 204 response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> 400 response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> 403 response </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> 429 response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  -  </td></tr>
     </table>
     */
    public LookupResponse lookupMobilePost(String contentType, String xApiKey, PhoneLookupRequest phoneLookupRequest) throws ApiException {
        ApiResponse<LookupResponse> localVarResp = lookupMobilePostWithHttpInfo(contentType, xApiKey, phoneLookupRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param contentType  (required)
     * @param xApiKey  (required)
     * @param phoneLookupRequest  (required)
     * @return ApiResponse&lt;LookupResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> 204 response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> 400 response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> 403 response </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> 429 response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<LookupResponse> lookupMobilePostWithHttpInfo(String contentType, String xApiKey, PhoneLookupRequest phoneLookupRequest) throws ApiException {
        okhttp3.Call localVarCall = lookupMobilePostValidateBeforeCall(contentType, xApiKey, phoneLookupRequest, null);
        Type localVarReturnType = new TypeToken<LookupResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param contentType  (required)
     * @param xApiKey  (required)
     * @param phoneLookupRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> 204 response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> 400 response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> 403 response </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> 429 response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call lookupMobilePostAsync(String contentType, String xApiKey, PhoneLookupRequest phoneLookupRequest, final ApiCallback<LookupResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = lookupMobilePostValidateBeforeCall(contentType, xApiKey, phoneLookupRequest, _callback);
        Type localVarReturnType = new TypeToken<LookupResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for lookupPhonePost
     * @param contentType  (required)
     * @param xApiKey  (required)
     * @param phoneLookupRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> 204 response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> 400 response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> 403 response </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> 429 response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call lookupPhonePostCall(String contentType, String xApiKey, PhoneLookupRequest phoneLookupRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = phoneLookupRequest;

        // create path and map variables
        String localVarPath = "/lookup/phone";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }

        if (xApiKey != null) {
            localVarHeaderParams.put("x-api-key", localVarApiClient.parameterToString(xApiKey));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call lookupPhonePostValidateBeforeCall(String contentType, String xApiKey, PhoneLookupRequest phoneLookupRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling lookupPhonePost(Async)");
        }
        
        // verify the required parameter 'xApiKey' is set
        if (xApiKey == null) {
            throw new ApiException("Missing the required parameter 'xApiKey' when calling lookupPhonePost(Async)");
        }
        
        // verify the required parameter 'phoneLookupRequest' is set
        if (phoneLookupRequest == null) {
            throw new ApiException("Missing the required parameter 'phoneLookupRequest' when calling lookupPhonePost(Async)");
        }
        

        okhttp3.Call localVarCall = lookupPhonePostCall(contentType, xApiKey, phoneLookupRequest, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param contentType  (required)
     * @param xApiKey  (required)
     * @param phoneLookupRequest  (required)
     * @return LookupResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> 204 response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> 400 response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> 403 response </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> 429 response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  -  </td></tr>
     </table>
     */
    public LookupResponse lookupPhonePost(String contentType, String xApiKey, PhoneLookupRequest phoneLookupRequest) throws ApiException {
        ApiResponse<LookupResponse> localVarResp = lookupPhonePostWithHttpInfo(contentType, xApiKey, phoneLookupRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param contentType  (required)
     * @param xApiKey  (required)
     * @param phoneLookupRequest  (required)
     * @return ApiResponse&lt;LookupResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> 204 response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> 400 response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> 403 response </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> 429 response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<LookupResponse> lookupPhonePostWithHttpInfo(String contentType, String xApiKey, PhoneLookupRequest phoneLookupRequest) throws ApiException {
        okhttp3.Call localVarCall = lookupPhonePostValidateBeforeCall(contentType, xApiKey, phoneLookupRequest, null);
        Type localVarReturnType = new TypeToken<LookupResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param contentType  (required)
     * @param xApiKey  (required)
     * @param phoneLookupRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> 204 response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> 400 response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> 403 response </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> 429 response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call lookupPhonePostAsync(String contentType, String xApiKey, PhoneLookupRequest phoneLookupRequest, final ApiCallback<LookupResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = lookupPhonePostValidateBeforeCall(contentType, xApiKey, phoneLookupRequest, _callback);
        Type localVarReturnType = new TypeToken<LookupResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for lookupSkipTracingPost
     * @param contentType  (required)
     * @param xApiKey  (required)
     * @param skipTracingLookupRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> 204 response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> 400 response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> 403 response </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> 429 response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call lookupSkipTracingPostCall(String contentType, String xApiKey, SkipTracingLookupRequest skipTracingLookupRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = skipTracingLookupRequest;

        // create path and map variables
        String localVarPath = "/lookup/skip-tracing";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }

        if (xApiKey != null) {
            localVarHeaderParams.put("x-api-key", localVarApiClient.parameterToString(xApiKey));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call lookupSkipTracingPostValidateBeforeCall(String contentType, String xApiKey, SkipTracingLookupRequest skipTracingLookupRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling lookupSkipTracingPost(Async)");
        }
        
        // verify the required parameter 'xApiKey' is set
        if (xApiKey == null) {
            throw new ApiException("Missing the required parameter 'xApiKey' when calling lookupSkipTracingPost(Async)");
        }
        
        // verify the required parameter 'skipTracingLookupRequest' is set
        if (skipTracingLookupRequest == null) {
            throw new ApiException("Missing the required parameter 'skipTracingLookupRequest' when calling lookupSkipTracingPost(Async)");
        }
        

        okhttp3.Call localVarCall = lookupSkipTracingPostCall(contentType, xApiKey, skipTracingLookupRequest, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param contentType  (required)
     * @param xApiKey  (required)
     * @param skipTracingLookupRequest  (required)
     * @return SkipTracingLookupResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> 204 response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> 400 response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> 403 response </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> 429 response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  -  </td></tr>
     </table>
     */
    public SkipTracingLookupResponse lookupSkipTracingPost(String contentType, String xApiKey, SkipTracingLookupRequest skipTracingLookupRequest) throws ApiException {
        ApiResponse<SkipTracingLookupResponse> localVarResp = lookupSkipTracingPostWithHttpInfo(contentType, xApiKey, skipTracingLookupRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param contentType  (required)
     * @param xApiKey  (required)
     * @param skipTracingLookupRequest  (required)
     * @return ApiResponse&lt;SkipTracingLookupResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> 204 response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> 400 response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> 403 response </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> 429 response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SkipTracingLookupResponse> lookupSkipTracingPostWithHttpInfo(String contentType, String xApiKey, SkipTracingLookupRequest skipTracingLookupRequest) throws ApiException {
        okhttp3.Call localVarCall = lookupSkipTracingPostValidateBeforeCall(contentType, xApiKey, skipTracingLookupRequest, null);
        Type localVarReturnType = new TypeToken<SkipTracingLookupResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param contentType  (required)
     * @param xApiKey  (required)
     * @param skipTracingLookupRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> 204 response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> 400 response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> 403 response </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> 429 response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call lookupSkipTracingPostAsync(String contentType, String xApiKey, SkipTracingLookupRequest skipTracingLookupRequest, final ApiCallback<SkipTracingLookupResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = lookupSkipTracingPostValidateBeforeCall(contentType, xApiKey, skipTracingLookupRequest, _callback);
        Type localVarReturnType = new TypeToken<SkipTracingLookupResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
