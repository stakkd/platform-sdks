/*
 * Stakkd API
 * # Introduction The Stakkd platform provides comprehensive data services that meet the business objectives of organizations ranging from Fortune 500 companies to startups. Our clients work in an array of industries, including insurance, financial, legal, travel, hospitality, retail, health, media, and telecommunications.  The Stakkd API is documented using the Open API 3.0.1 standard.  All endpoints are available at https://api.stakkd.io/v1. Detailed documentation for each endpoint is below, including the full URL for the endpoint.  # Account Types The API supports two different account types, each with different permissions.  ## Paid Account Paid accounts provide unlimited access to all of the URIs.  ## Trial Account Trial Accounts have a limited number of queries to the APIs. Keep in mind that queries which do not return results still count against the Trial Account query limits. Trial Accounts are temporary, but can be upgraded or extended by contacting [support@stakkd.io](mailto:support@stakkd.io) 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.stakkd;

import com.ApiCallback;
import com.ApiClient;
import com.ApiException;
import com.ApiResponse;
import com.Configuration;
import com.Pair;
import com.ProgressRequestBody;
import com.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.stakkd.model.DisconnectVerifyRequest;
import com.stakkd.model.DisconnectVerifyResponse;
import com.stakkd.model.EmailVerifyRequest;
import com.stakkd.model.EmailVerifyResponse;
import com.stakkd.model.PhoneVerifyRequest;
import com.stakkd.model.PhoneVerifyResponse;
import com.stakkd.model.TcpaVerifyRequest;
import com.stakkd.model.TcpaVerifyResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class VerifyApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public VerifyApi() {
        this(Configuration.getDefaultApiClient());
    }

    public VerifyApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for verifyDisconnectPost
     * @param contentType  (required)
     * @param xApiKey  (required)
     * @param disconnectVerifyRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> 204 response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> 400 response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> 403 response </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> 429 response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call verifyDisconnectPostCall(String contentType, String xApiKey, DisconnectVerifyRequest disconnectVerifyRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = disconnectVerifyRequest;

        // create path and map variables
        String localVarPath = "/verify/disconnect";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }

        if (xApiKey != null) {
            localVarHeaderParams.put("x-api-key", localVarApiClient.parameterToString(xApiKey));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call verifyDisconnectPostValidateBeforeCall(String contentType, String xApiKey, DisconnectVerifyRequest disconnectVerifyRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling verifyDisconnectPost(Async)");
        }
        
        // verify the required parameter 'xApiKey' is set
        if (xApiKey == null) {
            throw new ApiException("Missing the required parameter 'xApiKey' when calling verifyDisconnectPost(Async)");
        }
        
        // verify the required parameter 'disconnectVerifyRequest' is set
        if (disconnectVerifyRequest == null) {
            throw new ApiException("Missing the required parameter 'disconnectVerifyRequest' when calling verifyDisconnectPost(Async)");
        }
        

        okhttp3.Call localVarCall = verifyDisconnectPostCall(contentType, xApiKey, disconnectVerifyRequest, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param contentType  (required)
     * @param xApiKey  (required)
     * @param disconnectVerifyRequest  (required)
     * @return DisconnectVerifyResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> 204 response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> 400 response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> 403 response </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> 429 response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  -  </td></tr>
     </table>
     */
    public DisconnectVerifyResponse verifyDisconnectPost(String contentType, String xApiKey, DisconnectVerifyRequest disconnectVerifyRequest) throws ApiException {
        ApiResponse<DisconnectVerifyResponse> localVarResp = verifyDisconnectPostWithHttpInfo(contentType, xApiKey, disconnectVerifyRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param contentType  (required)
     * @param xApiKey  (required)
     * @param disconnectVerifyRequest  (required)
     * @return ApiResponse&lt;DisconnectVerifyResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> 204 response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> 400 response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> 403 response </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> 429 response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DisconnectVerifyResponse> verifyDisconnectPostWithHttpInfo(String contentType, String xApiKey, DisconnectVerifyRequest disconnectVerifyRequest) throws ApiException {
        okhttp3.Call localVarCall = verifyDisconnectPostValidateBeforeCall(contentType, xApiKey, disconnectVerifyRequest, null);
        Type localVarReturnType = new TypeToken<DisconnectVerifyResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param contentType  (required)
     * @param xApiKey  (required)
     * @param disconnectVerifyRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> 204 response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> 400 response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> 403 response </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> 429 response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call verifyDisconnectPostAsync(String contentType, String xApiKey, DisconnectVerifyRequest disconnectVerifyRequest, final ApiCallback<DisconnectVerifyResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = verifyDisconnectPostValidateBeforeCall(contentType, xApiKey, disconnectVerifyRequest, _callback);
        Type localVarReturnType = new TypeToken<DisconnectVerifyResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for verifyEmailPost
     * @param contentType  (required)
     * @param xApiKey  (required)
     * @param emailVerifyRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> 204 response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> 400 response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> 403 response </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> 429 response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call verifyEmailPostCall(String contentType, String xApiKey, EmailVerifyRequest emailVerifyRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = emailVerifyRequest;

        // create path and map variables
        String localVarPath = "/verify/email";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }

        if (xApiKey != null) {
            localVarHeaderParams.put("x-api-key", localVarApiClient.parameterToString(xApiKey));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call verifyEmailPostValidateBeforeCall(String contentType, String xApiKey, EmailVerifyRequest emailVerifyRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling verifyEmailPost(Async)");
        }
        
        // verify the required parameter 'xApiKey' is set
        if (xApiKey == null) {
            throw new ApiException("Missing the required parameter 'xApiKey' when calling verifyEmailPost(Async)");
        }
        
        // verify the required parameter 'emailVerifyRequest' is set
        if (emailVerifyRequest == null) {
            throw new ApiException("Missing the required parameter 'emailVerifyRequest' when calling verifyEmailPost(Async)");
        }
        

        okhttp3.Call localVarCall = verifyEmailPostCall(contentType, xApiKey, emailVerifyRequest, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param contentType  (required)
     * @param xApiKey  (required)
     * @param emailVerifyRequest  (required)
     * @return EmailVerifyResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> 204 response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> 400 response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> 403 response </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> 429 response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  -  </td></tr>
     </table>
     */
    public EmailVerifyResponse verifyEmailPost(String contentType, String xApiKey, EmailVerifyRequest emailVerifyRequest) throws ApiException {
        ApiResponse<EmailVerifyResponse> localVarResp = verifyEmailPostWithHttpInfo(contentType, xApiKey, emailVerifyRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param contentType  (required)
     * @param xApiKey  (required)
     * @param emailVerifyRequest  (required)
     * @return ApiResponse&lt;EmailVerifyResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> 204 response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> 400 response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> 403 response </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> 429 response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EmailVerifyResponse> verifyEmailPostWithHttpInfo(String contentType, String xApiKey, EmailVerifyRequest emailVerifyRequest) throws ApiException {
        okhttp3.Call localVarCall = verifyEmailPostValidateBeforeCall(contentType, xApiKey, emailVerifyRequest, null);
        Type localVarReturnType = new TypeToken<EmailVerifyResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param contentType  (required)
     * @param xApiKey  (required)
     * @param emailVerifyRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> 204 response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> 400 response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> 403 response </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> 429 response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call verifyEmailPostAsync(String contentType, String xApiKey, EmailVerifyRequest emailVerifyRequest, final ApiCallback<EmailVerifyResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = verifyEmailPostValidateBeforeCall(contentType, xApiKey, emailVerifyRequest, _callback);
        Type localVarReturnType = new TypeToken<EmailVerifyResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for verifyPhonePost
     * @param contentType  (required)
     * @param xApiKey  (required)
     * @param phoneVerifyRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> 204 response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> 400 response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> 403 response </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> 429 response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call verifyPhonePostCall(String contentType, String xApiKey, PhoneVerifyRequest phoneVerifyRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = phoneVerifyRequest;

        // create path and map variables
        String localVarPath = "/verify/phone";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }

        if (xApiKey != null) {
            localVarHeaderParams.put("x-api-key", localVarApiClient.parameterToString(xApiKey));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call verifyPhonePostValidateBeforeCall(String contentType, String xApiKey, PhoneVerifyRequest phoneVerifyRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling verifyPhonePost(Async)");
        }
        
        // verify the required parameter 'xApiKey' is set
        if (xApiKey == null) {
            throw new ApiException("Missing the required parameter 'xApiKey' when calling verifyPhonePost(Async)");
        }
        
        // verify the required parameter 'phoneVerifyRequest' is set
        if (phoneVerifyRequest == null) {
            throw new ApiException("Missing the required parameter 'phoneVerifyRequest' when calling verifyPhonePost(Async)");
        }
        

        okhttp3.Call localVarCall = verifyPhonePostCall(contentType, xApiKey, phoneVerifyRequest, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param contentType  (required)
     * @param xApiKey  (required)
     * @param phoneVerifyRequest  (required)
     * @return PhoneVerifyResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> 204 response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> 400 response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> 403 response </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> 429 response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  -  </td></tr>
     </table>
     */
    public PhoneVerifyResponse verifyPhonePost(String contentType, String xApiKey, PhoneVerifyRequest phoneVerifyRequest) throws ApiException {
        ApiResponse<PhoneVerifyResponse> localVarResp = verifyPhonePostWithHttpInfo(contentType, xApiKey, phoneVerifyRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param contentType  (required)
     * @param xApiKey  (required)
     * @param phoneVerifyRequest  (required)
     * @return ApiResponse&lt;PhoneVerifyResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> 204 response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> 400 response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> 403 response </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> 429 response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PhoneVerifyResponse> verifyPhonePostWithHttpInfo(String contentType, String xApiKey, PhoneVerifyRequest phoneVerifyRequest) throws ApiException {
        okhttp3.Call localVarCall = verifyPhonePostValidateBeforeCall(contentType, xApiKey, phoneVerifyRequest, null);
        Type localVarReturnType = new TypeToken<PhoneVerifyResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param contentType  (required)
     * @param xApiKey  (required)
     * @param phoneVerifyRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> 204 response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> 400 response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> 403 response </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> 429 response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call verifyPhonePostAsync(String contentType, String xApiKey, PhoneVerifyRequest phoneVerifyRequest, final ApiCallback<PhoneVerifyResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = verifyPhonePostValidateBeforeCall(contentType, xApiKey, phoneVerifyRequest, _callback);
        Type localVarReturnType = new TypeToken<PhoneVerifyResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for verifyTcpaPost
     * @param contentType  (required)
     * @param xApiKey  (required)
     * @param tcpaVerifyRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> 204 response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> 400 response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> 403 response </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> 429 response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call verifyTcpaPostCall(String contentType, String xApiKey, TcpaVerifyRequest tcpaVerifyRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = tcpaVerifyRequest;

        // create path and map variables
        String localVarPath = "/verify/tcpa";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }

        if (xApiKey != null) {
            localVarHeaderParams.put("x-api-key", localVarApiClient.parameterToString(xApiKey));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call verifyTcpaPostValidateBeforeCall(String contentType, String xApiKey, TcpaVerifyRequest tcpaVerifyRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling verifyTcpaPost(Async)");
        }
        
        // verify the required parameter 'xApiKey' is set
        if (xApiKey == null) {
            throw new ApiException("Missing the required parameter 'xApiKey' when calling verifyTcpaPost(Async)");
        }
        
        // verify the required parameter 'tcpaVerifyRequest' is set
        if (tcpaVerifyRequest == null) {
            throw new ApiException("Missing the required parameter 'tcpaVerifyRequest' when calling verifyTcpaPost(Async)");
        }
        

        okhttp3.Call localVarCall = verifyTcpaPostCall(contentType, xApiKey, tcpaVerifyRequest, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param contentType  (required)
     * @param xApiKey  (required)
     * @param tcpaVerifyRequest  (required)
     * @return TcpaVerifyResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> 204 response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> 400 response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> 403 response </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> 429 response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  -  </td></tr>
     </table>
     */
    public TcpaVerifyResponse verifyTcpaPost(String contentType, String xApiKey, TcpaVerifyRequest tcpaVerifyRequest) throws ApiException {
        ApiResponse<TcpaVerifyResponse> localVarResp = verifyTcpaPostWithHttpInfo(contentType, xApiKey, tcpaVerifyRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param contentType  (required)
     * @param xApiKey  (required)
     * @param tcpaVerifyRequest  (required)
     * @return ApiResponse&lt;TcpaVerifyResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> 204 response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> 400 response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> 403 response </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> 429 response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TcpaVerifyResponse> verifyTcpaPostWithHttpInfo(String contentType, String xApiKey, TcpaVerifyRequest tcpaVerifyRequest) throws ApiException {
        okhttp3.Call localVarCall = verifyTcpaPostValidateBeforeCall(contentType, xApiKey, tcpaVerifyRequest, null);
        Type localVarReturnType = new TypeToken<TcpaVerifyResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param contentType  (required)
     * @param xApiKey  (required)
     * @param tcpaVerifyRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> 204 response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> 400 response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> 403 response </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> 429 response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call verifyTcpaPostAsync(String contentType, String xApiKey, TcpaVerifyRequest tcpaVerifyRequest, final ApiCallback<TcpaVerifyResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = verifyTcpaPostValidateBeforeCall(contentType, xApiKey, tcpaVerifyRequest, _callback);
        Type localVarReturnType = new TypeToken<TcpaVerifyResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
