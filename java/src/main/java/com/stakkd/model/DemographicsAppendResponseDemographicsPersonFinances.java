/*
 * Stakkd API
 * # Introduction The Stakkd platform provides comprehensive data services that meet the business objectives of organizations ranging from Fortune 500 companies to startups. Our clients work in an array of industries, including insurance, financial, legal, travel, hospitality, retail, health, media, and telecommunications.  The Stakkd API is documented using the Open API 3.0.1 standard.  All endpoints are available at https://api.stakkd.io/v1. Detailed documentation for each endpoint is below, including the full URL for the endpoint.  # Account Types The API supports two different account types, each with different permissions.  ## Paid Account Paid accounts provide unlimited access to all of the URIs.  ## Trial Account Trial Accounts have a limited number of queries to the APIs. Keep in mind that queries which do not return results still count against the Trial Account query limits. Trial Accounts are temporary, but can be upgraded or extended by contacting [support@stakkd.io](mailto:support@stakkd.io) 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.stakkd.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * DemographicsAppendResponseDemographicsPersonFinances
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-04-04T16:59:20.816781-04:00[America/New_York]")
public class DemographicsAppendResponseDemographicsPersonFinances {
  /**
   * The estimated income of the person, where: A &#x3D; &lt; $20, 000; B &#x3D; $20, 000 - $29, 999; C &#x3D; $30, 000 - $39, 999; D &#x3D; $40, 000 - $49, 999; E &#x3D; $50, 000 - $74, 999; F &#x3D; $75, 000 - $99, 999; G &#x3D; $100, 000 - $124, 999; H &#x3D; $125, 000 - $149, 999; I &#x3D; &gt; $149,999.
   */
  @JsonAdapter(EstimatedIncomeEnum.Adapter.class)
  public enum EstimatedIncomeEnum {
    A("A"),
    
    B("B"),
    
    C("C"),
    
    D("D"),
    
    E("E"),
    
    F("F"),
    
    G("G"),
    
    H("H"),
    
    I("I");

    private String value;

    EstimatedIncomeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static EstimatedIncomeEnum fromValue(String value) {
      for (EstimatedIncomeEnum b : EstimatedIncomeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<EstimatedIncomeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final EstimatedIncomeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public EstimatedIncomeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return EstimatedIncomeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_ESTIMATED_INCOME = "estimatedIncome";
  @SerializedName(SERIALIZED_NAME_ESTIMATED_INCOME)
  private EstimatedIncomeEnum estimatedIncome;

  /**
   * The estimated net worth of the person, where: A &#x3D; &lt; $5k; B &#x3D; $5k - $19k; C &#x3D; $20k - $49k; D &#x3D; $50k - $80k; E &#x3D; $81k - $99k; F &#x3D; $100k - $249k; G &#x3D; $250k - $499k; H &#x3D; &gt; $500k.
   */
  @JsonAdapter(EstimatedNetWorthEnum.Adapter.class)
  public enum EstimatedNetWorthEnum {
    A("A"),
    
    B("B"),
    
    C("C"),
    
    D("D"),
    
    E("E"),
    
    F("F"),
    
    G("G"),
    
    H("H");

    private String value;

    EstimatedNetWorthEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static EstimatedNetWorthEnum fromValue(String value) {
      for (EstimatedNetWorthEnum b : EstimatedNetWorthEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<EstimatedNetWorthEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final EstimatedNetWorthEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public EstimatedNetWorthEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return EstimatedNetWorthEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_ESTIMATED_NET_WORTH = "estimatedNetWorth";
  @SerializedName(SERIALIZED_NAME_ESTIMATED_NET_WORTH)
  private EstimatedNetWorthEnum estimatedNetWorth;

  public static final String SERIALIZED_NAME_IS_CHARITY_DONAR = "isCharityDonar";
  @SerializedName(SERIALIZED_NAME_IS_CHARITY_DONAR)
  private Boolean isCharityDonar;

  public static final String SERIALIZED_NAME_USES_CREDIT_CARD = "usesCreditCard";
  @SerializedName(SERIALIZED_NAME_USES_CREDIT_CARD)
  private Boolean usesCreditCard;

  public DemographicsAppendResponseDemographicsPersonFinances() { 
  }

  public DemographicsAppendResponseDemographicsPersonFinances estimatedIncome(EstimatedIncomeEnum estimatedIncome) {
    
    this.estimatedIncome = estimatedIncome;
    return this;
  }

   /**
   * The estimated income of the person, where: A &#x3D; &lt; $20, 000; B &#x3D; $20, 000 - $29, 999; C &#x3D; $30, 000 - $39, 999; D &#x3D; $40, 000 - $49, 999; E &#x3D; $50, 000 - $74, 999; F &#x3D; $75, 000 - $99, 999; G &#x3D; $100, 000 - $124, 999; H &#x3D; $125, 000 - $149, 999; I &#x3D; &gt; $149,999.
   * @return estimatedIncome
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The estimated income of the person, where: A = < $20, 000; B = $20, 000 - $29, 999; C = $30, 000 - $39, 999; D = $40, 000 - $49, 999; E = $50, 000 - $74, 999; F = $75, 000 - $99, 999; G = $100, 000 - $124, 999; H = $125, 000 - $149, 999; I = > $149,999.")

  public EstimatedIncomeEnum getEstimatedIncome() {
    return estimatedIncome;
  }


  public void setEstimatedIncome(EstimatedIncomeEnum estimatedIncome) {
    this.estimatedIncome = estimatedIncome;
  }


  public DemographicsAppendResponseDemographicsPersonFinances estimatedNetWorth(EstimatedNetWorthEnum estimatedNetWorth) {
    
    this.estimatedNetWorth = estimatedNetWorth;
    return this;
  }

   /**
   * The estimated net worth of the person, where: A &#x3D; &lt; $5k; B &#x3D; $5k - $19k; C &#x3D; $20k - $49k; D &#x3D; $50k - $80k; E &#x3D; $81k - $99k; F &#x3D; $100k - $249k; G &#x3D; $250k - $499k; H &#x3D; &gt; $500k.
   * @return estimatedNetWorth
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The estimated net worth of the person, where: A = < $5k; B = $5k - $19k; C = $20k - $49k; D = $50k - $80k; E = $81k - $99k; F = $100k - $249k; G = $250k - $499k; H = > $500k.")

  public EstimatedNetWorthEnum getEstimatedNetWorth() {
    return estimatedNetWorth;
  }


  public void setEstimatedNetWorth(EstimatedNetWorthEnum estimatedNetWorth) {
    this.estimatedNetWorth = estimatedNetWorth;
  }


  public DemographicsAppendResponseDemographicsPersonFinances isCharityDonar(Boolean isCharityDonar) {
    
    this.isCharityDonar = isCharityDonar;
    return this;
  }

   /**
   * Indicates whether the person is flagged as a charity donar.
   * @return isCharityDonar
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Indicates whether the person is flagged as a charity donar.")

  public Boolean getIsCharityDonar() {
    return isCharityDonar;
  }


  public void setIsCharityDonar(Boolean isCharityDonar) {
    this.isCharityDonar = isCharityDonar;
  }


  public DemographicsAppendResponseDemographicsPersonFinances usesCreditCard(Boolean usesCreditCard) {
    
    this.usesCreditCard = usesCreditCard;
    return this;
  }

   /**
   * Indicates whether the person is flagged as a credit card user.
   * @return usesCreditCard
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Indicates whether the person is flagged as a credit card user.")

  public Boolean getUsesCreditCard() {
    return usesCreditCard;
  }


  public void setUsesCreditCard(Boolean usesCreditCard) {
    this.usesCreditCard = usesCreditCard;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DemographicsAppendResponseDemographicsPersonFinances demographicsAppendResponseDemographicsPersonFinances = (DemographicsAppendResponseDemographicsPersonFinances) o;
    return Objects.equals(this.estimatedIncome, demographicsAppendResponseDemographicsPersonFinances.estimatedIncome) &&
        Objects.equals(this.estimatedNetWorth, demographicsAppendResponseDemographicsPersonFinances.estimatedNetWorth) &&
        Objects.equals(this.isCharityDonar, demographicsAppendResponseDemographicsPersonFinances.isCharityDonar) &&
        Objects.equals(this.usesCreditCard, demographicsAppendResponseDemographicsPersonFinances.usesCreditCard);
  }

  @Override
  public int hashCode() {
    return Objects.hash(estimatedIncome, estimatedNetWorth, isCharityDonar, usesCreditCard);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DemographicsAppendResponseDemographicsPersonFinances {\n");
    sb.append("    estimatedIncome: ").append(toIndentedString(estimatedIncome)).append("\n");
    sb.append("    estimatedNetWorth: ").append(toIndentedString(estimatedNetWorth)).append("\n");
    sb.append("    isCharityDonar: ").append(toIndentedString(isCharityDonar)).append("\n");
    sb.append("    usesCreditCard: ").append(toIndentedString(usesCreditCard)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

