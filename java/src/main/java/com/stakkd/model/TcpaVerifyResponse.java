/*
 * Stakkd API
 * # Introduction The Stakkd platform provides comprehensive data services that meet the business objectives of organizations ranging from Fortune 500 companies to startups. Our clients work in an array of industries, including insurance, financial, legal, travel, hospitality, retail, health, media, and telecommunications.  The Stakkd API is documented using the Open API 3.0.1 standard.  All endpoints are available at https://api.stakkd.io/v1. Detailed documentation for each endpoint is below, including the full URL for the endpoint.  # Account Types The API supports two different account types, each with different permissions.  ## Paid Account Paid accounts provide unlimited access to all of the URIs.  ## Trial Account Trial Accounts have a limited number of queries to the APIs. Keep in mind that queries which do not return results still count against the Trial Account query limits. Trial Accounts are temporary, but can be upgraded or extended by contacting [support@stakkd.io](mailto:support@stakkd.io) 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.stakkd.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * TcpaVerifyResponse
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-04-04T16:59:20.816781-04:00[America/New_York]")
public class TcpaVerifyResponse {
  /**
   * The phone type, where: L &#x3D; &#39;Landline&#39;, V &#x3D; &#39;VoIP&#39;, W &#x3D; &#39;Wireless&#39;, and O &#x3D; &#39;Other&#39;.
   */
  @JsonAdapter(PhoneTypeEnum.Adapter.class)
  public enum PhoneTypeEnum {
    L("L"),
    
    V("V"),
    
    W("W"),
    
    O("O");

    private String value;

    PhoneTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PhoneTypeEnum fromValue(String value) {
      for (PhoneTypeEnum b : PhoneTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<PhoneTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PhoneTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PhoneTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return PhoneTypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_PHONE_TYPE = "phoneType";
  @SerializedName(SERIALIZED_NAME_PHONE_TYPE)
  private PhoneTypeEnum phoneType;

  /**
   * The phone&#39;s verification code, where: V &#x3D; &#39;VoIP&#39;, L &#x3D; &#39;Landline&#39;, Y &#x3D; &#39;Record Verified&#39;, YP &#x3D; &#39;Record Verified, with partial name match&#39;, YX &#x3D; &#39;Record Verified, with non-authoritative match&#39;, N &#x3D; &#39;Phone matched a different person&#39;, U &#x3D; &#39;Unconfirmed&#39;.
   */
  @JsonAdapter(VerificationCodeEnum.Adapter.class)
  public enum VerificationCodeEnum {
    V("V"),
    
    L("L"),
    
    Y("Y"),
    
    YP("YP"),
    
    YX("YX"),
    
    N("N"),
    
    U("U");

    private String value;

    VerificationCodeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static VerificationCodeEnum fromValue(String value) {
      for (VerificationCodeEnum b : VerificationCodeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<VerificationCodeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final VerificationCodeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public VerificationCodeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return VerificationCodeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_VERIFICATION_CODE = "verificationCode";
  @SerializedName(SERIALIZED_NAME_VERIFICATION_CODE)
  private VerificationCodeEnum verificationCode;

  public TcpaVerifyResponse() { 
  }

  public TcpaVerifyResponse phoneType(PhoneTypeEnum phoneType) {
    
    this.phoneType = phoneType;
    return this;
  }

   /**
   * The phone type, where: L &#x3D; &#39;Landline&#39;, V &#x3D; &#39;VoIP&#39;, W &#x3D; &#39;Wireless&#39;, and O &#x3D; &#39;Other&#39;.
   * @return phoneType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The phone type, where: L = 'Landline', V = 'VoIP', W = 'Wireless', and O = 'Other'.")

  public PhoneTypeEnum getPhoneType() {
    return phoneType;
  }


  public void setPhoneType(PhoneTypeEnum phoneType) {
    this.phoneType = phoneType;
  }


  public TcpaVerifyResponse verificationCode(VerificationCodeEnum verificationCode) {
    
    this.verificationCode = verificationCode;
    return this;
  }

   /**
   * The phone&#39;s verification code, where: V &#x3D; &#39;VoIP&#39;, L &#x3D; &#39;Landline&#39;, Y &#x3D; &#39;Record Verified&#39;, YP &#x3D; &#39;Record Verified, with partial name match&#39;, YX &#x3D; &#39;Record Verified, with non-authoritative match&#39;, N &#x3D; &#39;Phone matched a different person&#39;, U &#x3D; &#39;Unconfirmed&#39;.
   * @return verificationCode
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The phone's verification code, where: V = 'VoIP', L = 'Landline', Y = 'Record Verified', YP = 'Record Verified, with partial name match', YX = 'Record Verified, with non-authoritative match', N = 'Phone matched a different person', U = 'Unconfirmed'.")

  public VerificationCodeEnum getVerificationCode() {
    return verificationCode;
  }


  public void setVerificationCode(VerificationCodeEnum verificationCode) {
    this.verificationCode = verificationCode;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TcpaVerifyResponse tcpaVerifyResponse = (TcpaVerifyResponse) o;
    return Objects.equals(this.phoneType, tcpaVerifyResponse.phoneType) &&
        Objects.equals(this.verificationCode, tcpaVerifyResponse.verificationCode);
  }

  @Override
  public int hashCode() {
    return Objects.hash(phoneType, verificationCode);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TcpaVerifyResponse {\n");
    sb.append("    phoneType: ").append(toIndentedString(phoneType)).append("\n");
    sb.append("    verificationCode: ").append(toIndentedString(verificationCode)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

