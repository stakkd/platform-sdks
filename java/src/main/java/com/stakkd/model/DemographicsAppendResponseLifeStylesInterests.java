/*
 * Stakkd API
 * # Introduction The Stakkd platform provides comprehensive data services that meet the business objectives of organizations ranging from Fortune 500 companies to startups. Our clients work in an array of industries, including insurance, financial, legal, travel, hospitality, retail, health, media, and telecommunications.  The Stakkd API is documented using the Open API 3.0.1 standard.  All endpoints are available at https://api.stakkd.io/v1. Detailed documentation for each endpoint is below, including the full URL for the endpoint.  # Account Types The API supports two different account types, each with different permissions.  ## Paid Account Paid accounts provide unlimited access to all of the URIs.  ## Trial Account Trial Accounts have a limited number of queries to the APIs. Keep in mind that queries which do not return results still count against the Trial Account query limits. Trial Accounts are temporary, but can be upgraded or extended by contacting [support@stakkd.io](mailto:support@stakkd.io) 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.stakkd.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * DemographicsAppendResponseLifeStylesInterests
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-04-04T16:59:20.816781-04:00[America/New_York]")
public class DemographicsAppendResponseLifeStylesInterests {
  /**
   * The type of home and garden activities the person has an interest in.
   */
  @JsonAdapter(HomeAndGardenEnum.Adapter.class)
  public enum HomeAndGardenEnum {
    SEWINGANDKNITTING("SEWINGANDKNITTING"),
    
    WOODWORKING("WOODWORKING"),
    
    PHOTOGRAPHY("PHOTOGRAPHY"),
    
    HOMEANDGARDEN("HOMEANDGARDEN");

    private String value;

    HomeAndGardenEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static HomeAndGardenEnum fromValue(String value) {
      for (HomeAndGardenEnum b : HomeAndGardenEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<HomeAndGardenEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final HomeAndGardenEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public HomeAndGardenEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return HomeAndGardenEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_HOME_AND_GARDEN = "homeAndGarden";
  @SerializedName(SERIALIZED_NAME_HOME_AND_GARDEN)
  private HomeAndGardenEnum homeAndGarden;

  public static final String SERIALIZED_NAME_MOTORCYCLING = "motorcycling";
  @SerializedName(SERIALIZED_NAME_MOTORCYCLING)
  private Boolean motorcycling;

  /**
   * The type of sports the person has an interest in.
   */
  @JsonAdapter(SportsEnum.Adapter.class)
  public enum SportsEnum {
    GENERALINTEREST("GENERALINTEREST"),
    
    FOOTBALL("FOOTBALL"),
    
    BASEBALL("BASEBALL"),
    
    GOLF("GOLF"),
    
    TENNIS("TENNIS"),
    
    RACING("RACING");

    private String value;

    SportsEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SportsEnum fromValue(String value) {
      for (SportsEnum b : SportsEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SportsEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SportsEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SportsEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SportsEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_SPORTS = "sports";
  @SerializedName(SERIALIZED_NAME_SPORTS)
  private SportsEnum sports;

  /**
   * The type of self improvement activities the person has an interest in.
   */
  @JsonAdapter(SelfImprovementEnum.Adapter.class)
  public enum SelfImprovementEnum {
    HEALTHANDMEDICAL("HEALTHANDMEDICAL"),
    
    DIETINGWEIGHTLOSS("DIETINGWEIGHTLOSS"),
    
    SELFIMPROVEMENT("SELFIMPROVEMENT");

    private String value;

    SelfImprovementEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SelfImprovementEnum fromValue(String value) {
      for (SelfImprovementEnum b : SelfImprovementEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SelfImprovementEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SelfImprovementEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SelfImprovementEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SelfImprovementEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_SELF_IMPROVEMENT = "selfImprovement";
  @SerializedName(SERIALIZED_NAME_SELF_IMPROVEMENT)
  private SelfImprovementEnum selfImprovement;

  public static final String SERIALIZED_NAME_GAMBLING = "gambling";
  @SerializedName(SERIALIZED_NAME_GAMBLING)
  private Boolean gambling;

  /**
   * The type of collectibles the person has an interest in.
   */
  @JsonAdapter(CollectiblesEnum.Adapter.class)
  public enum CollectiblesEnum {
    GENERALINTEREST("GENERALINTEREST"),
    
    ANTIQUESINTEREST("ANTIQUESINTEREST"),
    
    SPORTSINTEREST("SPORTSINTEREST");

    private String value;

    CollectiblesEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static CollectiblesEnum fromValue(String value) {
      for (CollectiblesEnum b : CollectiblesEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<CollectiblesEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CollectiblesEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public CollectiblesEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return CollectiblesEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_COLLECTIBLES = "collectibles";
  @SerializedName(SERIALIZED_NAME_COLLECTIBLES)
  private CollectiblesEnum collectibles;

  public static final String SERIALIZED_NAME_TECHNOLOGY = "technology";
  @SerializedName(SERIALIZED_NAME_TECHNOLOGY)
  private Boolean technology;

  /**
   * The type of outdoors activities the person has an interest in.
   */
  @JsonAdapter(OutdoorsEnum.Adapter.class)
  public enum OutdoorsEnum {
    GENERALINTEREST("GENERALINTEREST"),
    
    SNOWSPORTS("SNOWSPORTS"),
    
    WATERSPORTS("WATERSPORTS"),
    
    HUNTINGANDFISHING("HUNTINGANDFISHING");

    private String value;

    OutdoorsEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static OutdoorsEnum fromValue(String value) {
      for (OutdoorsEnum b : OutdoorsEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<OutdoorsEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final OutdoorsEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public OutdoorsEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return OutdoorsEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_OUTDOORS = "outdoors";
  @SerializedName(SERIALIZED_NAME_OUTDOORS)
  private OutdoorsEnum outdoors;

  /**
   * The type of fitness activities the person has an interest in.
   */
  @JsonAdapter(FitnessEnum.Adapter.class)
  public enum FitnessEnum {
    HEALTHEXERCISE("HEALTHEXERCISE"),
    
    RUNNING("RUNNING"),
    
    WALKING("WALKING"),
    
    AEROBICS("AEROBICS");

    private String value;

    FitnessEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static FitnessEnum fromValue(String value) {
      for (FitnessEnum b : FitnessEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<FitnessEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final FitnessEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public FitnessEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return FitnessEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_FITNESS = "fitness";
  @SerializedName(SERIALIZED_NAME_FITNESS)
  private FitnessEnum fitness;

  /**
   * The type of home improvement activities the person has an interest in.
   */
  @JsonAdapter(HomeImprovementEnum.Adapter.class)
  public enum HomeImprovementEnum {
    GENERALINTEREST("GENERALINTEREST"),
    
    DIYINTEREST("DIYINTEREST");

    private String value;

    HomeImprovementEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static HomeImprovementEnum fromValue(String value) {
      for (HomeImprovementEnum b : HomeImprovementEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<HomeImprovementEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final HomeImprovementEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public HomeImprovementEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return HomeImprovementEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_HOME_IMPROVEMENT = "homeImprovement";
  @SerializedName(SERIALIZED_NAME_HOME_IMPROVEMENT)
  private HomeImprovementEnum homeImprovement;

  /**
   * The type of food and cooking the person has an interest in.
   */
  @JsonAdapter(CookingEnum.Adapter.class)
  public enum CookingEnum {
    GOURMETFOODANDWINE("GOURMETFOODANDWINE"),
    
    COOKING("COOKING"),
    
    NATURALFOODS("NATURALFOODS");

    private String value;

    CookingEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static CookingEnum fromValue(String value) {
      for (CookingEnum b : CookingEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<CookingEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CookingEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public CookingEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return CookingEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_COOKING = "cooking";
  @SerializedName(SERIALIZED_NAME_COOKING)
  private CookingEnum cooking;

  public static final String SERIALIZED_NAME_AUTO_PARTS = "autoParts";
  @SerializedName(SERIALIZED_NAME_AUTO_PARTS)
  private Boolean autoParts;

  public static final String SERIALIZED_NAME_INVESTING = "investing";
  @SerializedName(SERIALIZED_NAME_INVESTING)
  private Boolean investing;

  public static final String SERIALIZED_NAME_BOATING = "boating";
  @SerializedName(SERIALIZED_NAME_BOATING)
  private Boolean boating;

  /**
   * The type of traveling the person has an interest in.
   */
  @JsonAdapter(TravelEnum.Adapter.class)
  public enum TravelEnum {
    TRAVEL("TRAVEL"),
    
    DOMESTIC("DOMESTIC"),
    
    INTERNATIONAL("INTERNATIONAL"),
    
    CRUISE("CRUISE");

    private String value;

    TravelEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TravelEnum fromValue(String value) {
      for (TravelEnum b : TravelEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TravelEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TravelEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TravelEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TravelEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_TRAVEL = "travel";
  @SerializedName(SERIALIZED_NAME_TRAVEL)
  private TravelEnum travel;

  /**
   * The type of arts the person has an interest in.
   */
  @JsonAdapter(ArtsEnum.Adapter.class)
  public enum ArtsEnum {
    ARTSINTEREST("ARTSINTEREST"),
    
    AVIDMUSICLISTENER("AVIDMUSICLISTENER"),
    
    ANTIQUESINTEREST("ANTIQUESINTEREST"),
    
    PERFORMINGARTSINTEREST("PERFORMINGARTSINTEREST");

    private String value;

    ArtsEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ArtsEnum fromValue(String value) {
      for (ArtsEnum b : ArtsEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ArtsEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ArtsEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ArtsEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ArtsEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_ARTS = "arts";
  @SerializedName(SERIALIZED_NAME_ARTS)
  private ArtsEnum arts;

  public DemographicsAppendResponseLifeStylesInterests() { 
  }

  public DemographicsAppendResponseLifeStylesInterests homeAndGarden(HomeAndGardenEnum homeAndGarden) {
    
    this.homeAndGarden = homeAndGarden;
    return this;
  }

   /**
   * The type of home and garden activities the person has an interest in.
   * @return homeAndGarden
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The type of home and garden activities the person has an interest in.")

  public HomeAndGardenEnum getHomeAndGarden() {
    return homeAndGarden;
  }


  public void setHomeAndGarden(HomeAndGardenEnum homeAndGarden) {
    this.homeAndGarden = homeAndGarden;
  }


  public DemographicsAppendResponseLifeStylesInterests motorcycling(Boolean motorcycling) {
    
    this.motorcycling = motorcycling;
    return this;
  }

   /**
   * Indicates whether the person is flagged as a having an interest in motorcycling.
   * @return motorcycling
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Indicates whether the person is flagged as a having an interest in motorcycling.")

  public Boolean getMotorcycling() {
    return motorcycling;
  }


  public void setMotorcycling(Boolean motorcycling) {
    this.motorcycling = motorcycling;
  }


  public DemographicsAppendResponseLifeStylesInterests sports(SportsEnum sports) {
    
    this.sports = sports;
    return this;
  }

   /**
   * The type of sports the person has an interest in.
   * @return sports
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The type of sports the person has an interest in.")

  public SportsEnum getSports() {
    return sports;
  }


  public void setSports(SportsEnum sports) {
    this.sports = sports;
  }


  public DemographicsAppendResponseLifeStylesInterests selfImprovement(SelfImprovementEnum selfImprovement) {
    
    this.selfImprovement = selfImprovement;
    return this;
  }

   /**
   * The type of self improvement activities the person has an interest in.
   * @return selfImprovement
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The type of self improvement activities the person has an interest in.")

  public SelfImprovementEnum getSelfImprovement() {
    return selfImprovement;
  }


  public void setSelfImprovement(SelfImprovementEnum selfImprovement) {
    this.selfImprovement = selfImprovement;
  }


  public DemographicsAppendResponseLifeStylesInterests gambling(Boolean gambling) {
    
    this.gambling = gambling;
    return this;
  }

   /**
   * Indicates whether the person is flagged as a having an interest in gambling.
   * @return gambling
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Indicates whether the person is flagged as a having an interest in gambling.")

  public Boolean getGambling() {
    return gambling;
  }


  public void setGambling(Boolean gambling) {
    this.gambling = gambling;
  }


  public DemographicsAppendResponseLifeStylesInterests collectibles(CollectiblesEnum collectibles) {
    
    this.collectibles = collectibles;
    return this;
  }

   /**
   * The type of collectibles the person has an interest in.
   * @return collectibles
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The type of collectibles the person has an interest in.")

  public CollectiblesEnum getCollectibles() {
    return collectibles;
  }


  public void setCollectibles(CollectiblesEnum collectibles) {
    this.collectibles = collectibles;
  }


  public DemographicsAppendResponseLifeStylesInterests technology(Boolean technology) {
    
    this.technology = technology;
    return this;
  }

   /**
   * Indicates whether the person is flagged as a having an interest in technology.
   * @return technology
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Indicates whether the person is flagged as a having an interest in technology.")

  public Boolean getTechnology() {
    return technology;
  }


  public void setTechnology(Boolean technology) {
    this.technology = technology;
  }


  public DemographicsAppendResponseLifeStylesInterests outdoors(OutdoorsEnum outdoors) {
    
    this.outdoors = outdoors;
    return this;
  }

   /**
   * The type of outdoors activities the person has an interest in.
   * @return outdoors
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The type of outdoors activities the person has an interest in.")

  public OutdoorsEnum getOutdoors() {
    return outdoors;
  }


  public void setOutdoors(OutdoorsEnum outdoors) {
    this.outdoors = outdoors;
  }


  public DemographicsAppendResponseLifeStylesInterests fitness(FitnessEnum fitness) {
    
    this.fitness = fitness;
    return this;
  }

   /**
   * The type of fitness activities the person has an interest in.
   * @return fitness
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The type of fitness activities the person has an interest in.")

  public FitnessEnum getFitness() {
    return fitness;
  }


  public void setFitness(FitnessEnum fitness) {
    this.fitness = fitness;
  }


  public DemographicsAppendResponseLifeStylesInterests homeImprovement(HomeImprovementEnum homeImprovement) {
    
    this.homeImprovement = homeImprovement;
    return this;
  }

   /**
   * The type of home improvement activities the person has an interest in.
   * @return homeImprovement
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The type of home improvement activities the person has an interest in.")

  public HomeImprovementEnum getHomeImprovement() {
    return homeImprovement;
  }


  public void setHomeImprovement(HomeImprovementEnum homeImprovement) {
    this.homeImprovement = homeImprovement;
  }


  public DemographicsAppendResponseLifeStylesInterests cooking(CookingEnum cooking) {
    
    this.cooking = cooking;
    return this;
  }

   /**
   * The type of food and cooking the person has an interest in.
   * @return cooking
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The type of food and cooking the person has an interest in.")

  public CookingEnum getCooking() {
    return cooking;
  }


  public void setCooking(CookingEnum cooking) {
    this.cooking = cooking;
  }


  public DemographicsAppendResponseLifeStylesInterests autoParts(Boolean autoParts) {
    
    this.autoParts = autoParts;
    return this;
  }

   /**
   * Indicates whether the person is flagged as a having an interest in automobile parts.
   * @return autoParts
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Indicates whether the person is flagged as a having an interest in automobile parts.")

  public Boolean getAutoParts() {
    return autoParts;
  }


  public void setAutoParts(Boolean autoParts) {
    this.autoParts = autoParts;
  }


  public DemographicsAppendResponseLifeStylesInterests investing(Boolean investing) {
    
    this.investing = investing;
    return this;
  }

   /**
   * Indicates whether the person is flagged as a having an interest in investing.
   * @return investing
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Indicates whether the person is flagged as a having an interest in investing.")

  public Boolean getInvesting() {
    return investing;
  }


  public void setInvesting(Boolean investing) {
    this.investing = investing;
  }


  public DemographicsAppendResponseLifeStylesInterests boating(Boolean boating) {
    
    this.boating = boating;
    return this;
  }

   /**
   * Indicates whether the person is flagged as a having an interest in boating.
   * @return boating
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Indicates whether the person is flagged as a having an interest in boating.")

  public Boolean getBoating() {
    return boating;
  }


  public void setBoating(Boolean boating) {
    this.boating = boating;
  }


  public DemographicsAppendResponseLifeStylesInterests travel(TravelEnum travel) {
    
    this.travel = travel;
    return this;
  }

   /**
   * The type of traveling the person has an interest in.
   * @return travel
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The type of traveling the person has an interest in.")

  public TravelEnum getTravel() {
    return travel;
  }


  public void setTravel(TravelEnum travel) {
    this.travel = travel;
  }


  public DemographicsAppendResponseLifeStylesInterests arts(ArtsEnum arts) {
    
    this.arts = arts;
    return this;
  }

   /**
   * The type of arts the person has an interest in.
   * @return arts
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The type of arts the person has an interest in.")

  public ArtsEnum getArts() {
    return arts;
  }


  public void setArts(ArtsEnum arts) {
    this.arts = arts;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DemographicsAppendResponseLifeStylesInterests demographicsAppendResponseLifeStylesInterests = (DemographicsAppendResponseLifeStylesInterests) o;
    return Objects.equals(this.homeAndGarden, demographicsAppendResponseLifeStylesInterests.homeAndGarden) &&
        Objects.equals(this.motorcycling, demographicsAppendResponseLifeStylesInterests.motorcycling) &&
        Objects.equals(this.sports, demographicsAppendResponseLifeStylesInterests.sports) &&
        Objects.equals(this.selfImprovement, demographicsAppendResponseLifeStylesInterests.selfImprovement) &&
        Objects.equals(this.gambling, demographicsAppendResponseLifeStylesInterests.gambling) &&
        Objects.equals(this.collectibles, demographicsAppendResponseLifeStylesInterests.collectibles) &&
        Objects.equals(this.technology, demographicsAppendResponseLifeStylesInterests.technology) &&
        Objects.equals(this.outdoors, demographicsAppendResponseLifeStylesInterests.outdoors) &&
        Objects.equals(this.fitness, demographicsAppendResponseLifeStylesInterests.fitness) &&
        Objects.equals(this.homeImprovement, demographicsAppendResponseLifeStylesInterests.homeImprovement) &&
        Objects.equals(this.cooking, demographicsAppendResponseLifeStylesInterests.cooking) &&
        Objects.equals(this.autoParts, demographicsAppendResponseLifeStylesInterests.autoParts) &&
        Objects.equals(this.investing, demographicsAppendResponseLifeStylesInterests.investing) &&
        Objects.equals(this.boating, demographicsAppendResponseLifeStylesInterests.boating) &&
        Objects.equals(this.travel, demographicsAppendResponseLifeStylesInterests.travel) &&
        Objects.equals(this.arts, demographicsAppendResponseLifeStylesInterests.arts);
  }

  @Override
  public int hashCode() {
    return Objects.hash(homeAndGarden, motorcycling, sports, selfImprovement, gambling, collectibles, technology, outdoors, fitness, homeImprovement, cooking, autoParts, investing, boating, travel, arts);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DemographicsAppendResponseLifeStylesInterests {\n");
    sb.append("    homeAndGarden: ").append(toIndentedString(homeAndGarden)).append("\n");
    sb.append("    motorcycling: ").append(toIndentedString(motorcycling)).append("\n");
    sb.append("    sports: ").append(toIndentedString(sports)).append("\n");
    sb.append("    selfImprovement: ").append(toIndentedString(selfImprovement)).append("\n");
    sb.append("    gambling: ").append(toIndentedString(gambling)).append("\n");
    sb.append("    collectibles: ").append(toIndentedString(collectibles)).append("\n");
    sb.append("    technology: ").append(toIndentedString(technology)).append("\n");
    sb.append("    outdoors: ").append(toIndentedString(outdoors)).append("\n");
    sb.append("    fitness: ").append(toIndentedString(fitness)).append("\n");
    sb.append("    homeImprovement: ").append(toIndentedString(homeImprovement)).append("\n");
    sb.append("    cooking: ").append(toIndentedString(cooking)).append("\n");
    sb.append("    autoParts: ").append(toIndentedString(autoParts)).append("\n");
    sb.append("    investing: ").append(toIndentedString(investing)).append("\n");
    sb.append("    boating: ").append(toIndentedString(boating)).append("\n");
    sb.append("    travel: ").append(toIndentedString(travel)).append("\n");
    sb.append("    arts: ").append(toIndentedString(arts)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

