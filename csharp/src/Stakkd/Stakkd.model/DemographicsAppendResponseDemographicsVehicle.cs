/*
 * Stakkd API
 *
 * # Introduction The Stakkd platform provides comprehensive data services that meet the business objectives of organizations ranging from Fortune 500 companies to startups. Our clients work in an array of industries, including insurance, financial, legal, travel, hospitality, retail, health, media, and telecommunications.  The Stakkd API is documented using the Open API 3.0.1 standard.  All endpoints are available at https://api.stakkd.io/v1. Detailed documentation for each endpoint is below, including the full URL for the endpoint.  # Account Types The API supports two different account types, each with different permissions.  ## Paid Account Paid accounts provide unlimited access to all of the URIs.  ## Trial Account Trial Accounts have a limited number of queries to the APIs. Keep in mind that queries which do not return results still count against the Trial Account query limits. Trial Accounts are temporary, but can be upgraded or extended by contacting [support@stakkd.io](mailto:support@stakkd.io) 
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Stakkd.Client.OpenAPIDateConverter;

namespace Stakkd.Stakkd.model
{
    /// <summary>
    /// DemographicsAppendResponseDemographicsVehicle
    /// </summary>
    [DataContract(Name = "demographicsAppendResponse_demographics_vehicle")]
    public partial class DemographicsAppendResponseDemographicsVehicle : IEquatable<DemographicsAppendResponseDemographicsVehicle>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DemographicsAppendResponseDemographicsVehicle" /> class.
        /// </summary>
        /// <param name="ownsSuvVehicle">Indicates whether the person is flagged as owning an SUV..</param>
        /// <param name="ownsLuxuryVehicle">Indicates whether the person is flagged as owning a luxury vehicle..</param>
        /// <param name="ownsPickupVehicle">Indicates whether the person is flagged as owning a pickup truck..</param>
        /// <param name="percentVehicleOwner">The Penetration Percentage for indicating whether the person owns a vehicle, +/- 3%..</param>
        public DemographicsAppendResponseDemographicsVehicle(bool ownsSuvVehicle = default(bool), bool ownsLuxuryVehicle = default(bool), bool ownsPickupVehicle = default(bool), int percentVehicleOwner = default(int))
        {
            this.OwnsSuvVehicle = ownsSuvVehicle;
            this.OwnsLuxuryVehicle = ownsLuxuryVehicle;
            this.OwnsPickupVehicle = ownsPickupVehicle;
            this.PercentVehicleOwner = percentVehicleOwner;
        }

        /// <summary>
        /// Indicates whether the person is flagged as owning an SUV.
        /// </summary>
        /// <value>Indicates whether the person is flagged as owning an SUV.</value>
        [DataMember(Name = "ownsSuvVehicle", EmitDefaultValue = true)]
        public bool OwnsSuvVehicle { get; set; }

        /// <summary>
        /// Indicates whether the person is flagged as owning a luxury vehicle.
        /// </summary>
        /// <value>Indicates whether the person is flagged as owning a luxury vehicle.</value>
        [DataMember(Name = "ownsLuxuryVehicle", EmitDefaultValue = true)]
        public bool OwnsLuxuryVehicle { get; set; }

        /// <summary>
        /// Indicates whether the person is flagged as owning a pickup truck.
        /// </summary>
        /// <value>Indicates whether the person is flagged as owning a pickup truck.</value>
        [DataMember(Name = "ownsPickupVehicle", EmitDefaultValue = true)]
        public bool OwnsPickupVehicle { get; set; }

        /// <summary>
        /// The Penetration Percentage for indicating whether the person owns a vehicle, +/- 3%.
        /// </summary>
        /// <value>The Penetration Percentage for indicating whether the person owns a vehicle, +/- 3%.</value>
        [DataMember(Name = "percentVehicleOwner", EmitDefaultValue = false)]
        public int PercentVehicleOwner { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DemographicsAppendResponseDemographicsVehicle {\n");
            sb.Append("  OwnsSuvVehicle: ").Append(OwnsSuvVehicle).Append("\n");
            sb.Append("  OwnsLuxuryVehicle: ").Append(OwnsLuxuryVehicle).Append("\n");
            sb.Append("  OwnsPickupVehicle: ").Append(OwnsPickupVehicle).Append("\n");
            sb.Append("  PercentVehicleOwner: ").Append(PercentVehicleOwner).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DemographicsAppendResponseDemographicsVehicle);
        }

        /// <summary>
        /// Returns true if DemographicsAppendResponseDemographicsVehicle instances are equal
        /// </summary>
        /// <param name="input">Instance of DemographicsAppendResponseDemographicsVehicle to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DemographicsAppendResponseDemographicsVehicle input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.OwnsSuvVehicle == input.OwnsSuvVehicle ||
                    this.OwnsSuvVehicle.Equals(input.OwnsSuvVehicle)
                ) && 
                (
                    this.OwnsLuxuryVehicle == input.OwnsLuxuryVehicle ||
                    this.OwnsLuxuryVehicle.Equals(input.OwnsLuxuryVehicle)
                ) && 
                (
                    this.OwnsPickupVehicle == input.OwnsPickupVehicle ||
                    this.OwnsPickupVehicle.Equals(input.OwnsPickupVehicle)
                ) && 
                (
                    this.PercentVehicleOwner == input.PercentVehicleOwner ||
                    this.PercentVehicleOwner.Equals(input.PercentVehicleOwner)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.OwnsSuvVehicle.GetHashCode();
                hashCode = (hashCode * 59) + this.OwnsLuxuryVehicle.GetHashCode();
                hashCode = (hashCode * 59) + this.OwnsPickupVehicle.GetHashCode();
                hashCode = (hashCode * 59) + this.PercentVehicleOwner.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
