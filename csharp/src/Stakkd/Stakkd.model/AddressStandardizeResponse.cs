/*
 * Stakkd API
 *
 * # Introduction The Stakkd platform provides comprehensive data services that meet the business objectives of organizations ranging from Fortune 500 companies to startups. Our clients work in an array of industries, including insurance, financial, legal, travel, hospitality, retail, health, media, and telecommunications.  The Stakkd API is documented using the Open API 3.0.1 standard.  All endpoints are available at https://api.stakkd.io/v1. Detailed documentation for each endpoint is below, including the full URL for the endpoint.  # Account Types The API supports two different account types, each with different permissions.  ## Paid Account Paid accounts provide unlimited access to all of the URIs.  ## Trial Account Trial Accounts have a limited number of queries to the APIs. Keep in mind that queries which do not return results still count against the Trial Account query limits. Trial Accounts are temporary, but can be upgraded or extended by contacting [support@stakkd.io](mailto:support@stakkd.io) 
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Stakkd.Client.OpenAPIDateConverter;

namespace Stakkd.Stakkd.model
{
    /// <summary>
    /// AddressStandardizeResponse
    /// </summary>
    [DataContract(Name = "addressStandardizeResponse")]
    public partial class AddressStandardizeResponse : IEquatable<AddressStandardizeResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AddressStandardizeResponse" /> class.
        /// </summary>
        /// <param name="zipcode">The address zipcode..</param>
        /// <param name="unitNumber">The address unit number..</param>
        /// <param name="city">The address city..</param>
        /// <param name="postDirection">The address street postfix direction, usually: N, S, E, or W..</param>
        /// <param name="streetNumber">The address number..</param>
        /// <param name="preDirection">The address street prefix direction, usually: N, S, E, or W..</param>
        /// <param name="streetType">The address street type..</param>
        /// <param name="state">The address state, abbreviated..</param>
        /// <param name="unitType">The address unit type, for example: Apt, Suite, ect..</param>
        /// <param name="streetName">The address street name..</param>
        public AddressStandardizeResponse(string zipcode = default(string), string unitNumber = default(string), string city = default(string), string postDirection = default(string), string streetNumber = default(string), string preDirection = default(string), string streetType = default(string), string state = default(string), string unitType = default(string), string streetName = default(string))
        {
            this.Zipcode = zipcode;
            this.UnitNumber = unitNumber;
            this.City = city;
            this.PostDirection = postDirection;
            this.StreetNumber = streetNumber;
            this.PreDirection = preDirection;
            this.StreetType = streetType;
            this.State = state;
            this.UnitType = unitType;
            this.StreetName = streetName;
        }

        /// <summary>
        /// The address zipcode.
        /// </summary>
        /// <value>The address zipcode.</value>
        [DataMember(Name = "zipcode", EmitDefaultValue = false)]
        public string Zipcode { get; set; }

        /// <summary>
        /// The address unit number.
        /// </summary>
        /// <value>The address unit number.</value>
        [DataMember(Name = "unitNumber", EmitDefaultValue = false)]
        public string UnitNumber { get; set; }

        /// <summary>
        /// The address city.
        /// </summary>
        /// <value>The address city.</value>
        [DataMember(Name = "city", EmitDefaultValue = false)]
        public string City { get; set; }

        /// <summary>
        /// The address street postfix direction, usually: N, S, E, or W.
        /// </summary>
        /// <value>The address street postfix direction, usually: N, S, E, or W.</value>
        [DataMember(Name = "postDirection", EmitDefaultValue = false)]
        public string PostDirection { get; set; }

        /// <summary>
        /// The address number.
        /// </summary>
        /// <value>The address number.</value>
        [DataMember(Name = "streetNumber", EmitDefaultValue = false)]
        public string StreetNumber { get; set; }

        /// <summary>
        /// The address street prefix direction, usually: N, S, E, or W.
        /// </summary>
        /// <value>The address street prefix direction, usually: N, S, E, or W.</value>
        [DataMember(Name = "preDirection", EmitDefaultValue = false)]
        public string PreDirection { get; set; }

        /// <summary>
        /// The address street type.
        /// </summary>
        /// <value>The address street type.</value>
        [DataMember(Name = "streetType", EmitDefaultValue = false)]
        public string StreetType { get; set; }

        /// <summary>
        /// The address state, abbreviated.
        /// </summary>
        /// <value>The address state, abbreviated.</value>
        [DataMember(Name = "state", EmitDefaultValue = false)]
        public string State { get; set; }

        /// <summary>
        /// The address unit type, for example: Apt, Suite, ect.
        /// </summary>
        /// <value>The address unit type, for example: Apt, Suite, ect.</value>
        [DataMember(Name = "unitType", EmitDefaultValue = false)]
        public string UnitType { get; set; }

        /// <summary>
        /// The address street name.
        /// </summary>
        /// <value>The address street name.</value>
        [DataMember(Name = "streetName", EmitDefaultValue = false)]
        public string StreetName { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AddressStandardizeResponse {\n");
            sb.Append("  Zipcode: ").Append(Zipcode).Append("\n");
            sb.Append("  UnitNumber: ").Append(UnitNumber).Append("\n");
            sb.Append("  City: ").Append(City).Append("\n");
            sb.Append("  PostDirection: ").Append(PostDirection).Append("\n");
            sb.Append("  StreetNumber: ").Append(StreetNumber).Append("\n");
            sb.Append("  PreDirection: ").Append(PreDirection).Append("\n");
            sb.Append("  StreetType: ").Append(StreetType).Append("\n");
            sb.Append("  State: ").Append(State).Append("\n");
            sb.Append("  UnitType: ").Append(UnitType).Append("\n");
            sb.Append("  StreetName: ").Append(StreetName).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AddressStandardizeResponse);
        }

        /// <summary>
        /// Returns true if AddressStandardizeResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of AddressStandardizeResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AddressStandardizeResponse input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Zipcode == input.Zipcode ||
                    (this.Zipcode != null &&
                    this.Zipcode.Equals(input.Zipcode))
                ) && 
                (
                    this.UnitNumber == input.UnitNumber ||
                    (this.UnitNumber != null &&
                    this.UnitNumber.Equals(input.UnitNumber))
                ) && 
                (
                    this.City == input.City ||
                    (this.City != null &&
                    this.City.Equals(input.City))
                ) && 
                (
                    this.PostDirection == input.PostDirection ||
                    (this.PostDirection != null &&
                    this.PostDirection.Equals(input.PostDirection))
                ) && 
                (
                    this.StreetNumber == input.StreetNumber ||
                    (this.StreetNumber != null &&
                    this.StreetNumber.Equals(input.StreetNumber))
                ) && 
                (
                    this.PreDirection == input.PreDirection ||
                    (this.PreDirection != null &&
                    this.PreDirection.Equals(input.PreDirection))
                ) && 
                (
                    this.StreetType == input.StreetType ||
                    (this.StreetType != null &&
                    this.StreetType.Equals(input.StreetType))
                ) && 
                (
                    this.State == input.State ||
                    (this.State != null &&
                    this.State.Equals(input.State))
                ) && 
                (
                    this.UnitType == input.UnitType ||
                    (this.UnitType != null &&
                    this.UnitType.Equals(input.UnitType))
                ) && 
                (
                    this.StreetName == input.StreetName ||
                    (this.StreetName != null &&
                    this.StreetName.Equals(input.StreetName))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Zipcode != null)
                {
                    hashCode = (hashCode * 59) + this.Zipcode.GetHashCode();
                }
                if (this.UnitNumber != null)
                {
                    hashCode = (hashCode * 59) + this.UnitNumber.GetHashCode();
                }
                if (this.City != null)
                {
                    hashCode = (hashCode * 59) + this.City.GetHashCode();
                }
                if (this.PostDirection != null)
                {
                    hashCode = (hashCode * 59) + this.PostDirection.GetHashCode();
                }
                if (this.StreetNumber != null)
                {
                    hashCode = (hashCode * 59) + this.StreetNumber.GetHashCode();
                }
                if (this.PreDirection != null)
                {
                    hashCode = (hashCode * 59) + this.PreDirection.GetHashCode();
                }
                if (this.StreetType != null)
                {
                    hashCode = (hashCode * 59) + this.StreetType.GetHashCode();
                }
                if (this.State != null)
                {
                    hashCode = (hashCode * 59) + this.State.GetHashCode();
                }
                if (this.UnitType != null)
                {
                    hashCode = (hashCode * 59) + this.UnitType.GetHashCode();
                }
                if (this.StreetName != null)
                {
                    hashCode = (hashCode * 59) + this.StreetName.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
