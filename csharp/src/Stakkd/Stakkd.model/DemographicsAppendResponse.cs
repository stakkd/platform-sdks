/*
 * Stakkd API
 *
 * # Introduction The Stakkd platform provides comprehensive data services that meet the business objectives of organizations ranging from Fortune 500 companies to startups. Our clients work in an array of industries, including insurance, financial, legal, travel, hospitality, retail, health, media, and telecommunications.  The Stakkd API is documented using the Open API 3.0.1 standard.  All endpoints are available at https://api.stakkd.io/v1. Detailed documentation for each endpoint is below, including the full URL for the endpoint.  # Account Types The API supports two different account types, each with different permissions.  ## Paid Account Paid accounts provide unlimited access to all of the URIs.  ## Trial Account Trial Accounts have a limited number of queries to the APIs. Keep in mind that queries which do not return results still count against the Trial Account query limits. Trial Accounts are temporary, but can be upgraded or extended by contacting [support@stakkd.io](mailto:support@stakkd.io) 
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Stakkd.Client.OpenAPIDateConverter;

namespace Stakkd.Stakkd.model
{
    /// <summary>
    /// DemographicsAppendResponse
    /// </summary>
    [DataContract(Name = "demographicsAppendResponse")]
    public partial class DemographicsAppendResponse : IEquatable<DemographicsAppendResponse>, IValidatableObject
    {
        /// <summary>
        /// The type of match the data represents.
        /// </summary>
        /// <value>The type of match the data represents.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum CategoryMatchEnum
        {
            /// <summary>
            /// Enum ADDRESS for value: ADDRESS
            /// </summary>
            [EnumMember(Value = "ADDRESS")]
            ADDRESS = 1,

            /// <summary>
            /// Enum HOUSEHOLD for value: HOUSEHOLD
            /// </summary>
            [EnumMember(Value = "HOUSEHOLD")]
            HOUSEHOLD = 2,

            /// <summary>
            /// Enum INDIVIDUAL for value: INDIVIDUAL
            /// </summary>
            [EnumMember(Value = "INDIVIDUAL")]
            INDIVIDUAL = 3,

            /// <summary>
            /// Enum NAMEANDZIP for value: NAMEANDZIP
            /// </summary>
            [EnumMember(Value = "NAMEANDZIP")]
            NAMEANDZIP = 4,

            /// <summary>
            /// Enum NONE for value: NONE
            /// </summary>
            [EnumMember(Value = "NONE")]
            NONE = 5

        }


        /// <summary>
        /// The type of match the data represents.
        /// </summary>
        /// <value>The type of match the data represents.</value>
        [DataMember(Name = "categoryMatch", EmitDefaultValue = false)]
        public CategoryMatchEnum? CategoryMatch { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="DemographicsAppendResponse" /> class.
        /// </summary>
        /// <param name="address">address.</param>
        /// <param name="phones">An array of related phone numbers..</param>
        /// <param name="categoryMatch">The type of match the data represents..</param>
        /// <param name="lifeStyles">lifeStyles.</param>
        /// <param name="demographics">demographics.</param>
        public DemographicsAppendResponse(IpLookupResponseAddress address = default(IpLookupResponseAddress), List<DemographicsAppendResponsePhones> phones = default(List<DemographicsAppendResponsePhones>), CategoryMatchEnum? categoryMatch = default(CategoryMatchEnum?), DemographicsAppendResponseLifeStyles lifeStyles = default(DemographicsAppendResponseLifeStyles), DemographicsAppendResponseDemographics demographics = default(DemographicsAppendResponseDemographics))
        {
            this.Address = address;
            this.Phones = phones;
            this.CategoryMatch = categoryMatch;
            this.LifeStyles = lifeStyles;
            this.Demographics = demographics;
        }

        /// <summary>
        /// Gets or Sets Address
        /// </summary>
        [DataMember(Name = "address", EmitDefaultValue = false)]
        public IpLookupResponseAddress Address { get; set; }

        /// <summary>
        /// An array of related phone numbers.
        /// </summary>
        /// <value>An array of related phone numbers.</value>
        [DataMember(Name = "phones", EmitDefaultValue = false)]
        public List<DemographicsAppendResponsePhones> Phones { get; set; }

        /// <summary>
        /// Gets or Sets LifeStyles
        /// </summary>
        [DataMember(Name = "lifeStyles", EmitDefaultValue = false)]
        public DemographicsAppendResponseLifeStyles LifeStyles { get; set; }

        /// <summary>
        /// Gets or Sets Demographics
        /// </summary>
        [DataMember(Name = "demographics", EmitDefaultValue = false)]
        public DemographicsAppendResponseDemographics Demographics { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DemographicsAppendResponse {\n");
            sb.Append("  Address: ").Append(Address).Append("\n");
            sb.Append("  Phones: ").Append(Phones).Append("\n");
            sb.Append("  CategoryMatch: ").Append(CategoryMatch).Append("\n");
            sb.Append("  LifeStyles: ").Append(LifeStyles).Append("\n");
            sb.Append("  Demographics: ").Append(Demographics).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DemographicsAppendResponse);
        }

        /// <summary>
        /// Returns true if DemographicsAppendResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of DemographicsAppendResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DemographicsAppendResponse input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Address == input.Address ||
                    (this.Address != null &&
                    this.Address.Equals(input.Address))
                ) && 
                (
                    this.Phones == input.Phones ||
                    this.Phones != null &&
                    input.Phones != null &&
                    this.Phones.SequenceEqual(input.Phones)
                ) && 
                (
                    this.CategoryMatch == input.CategoryMatch ||
                    this.CategoryMatch.Equals(input.CategoryMatch)
                ) && 
                (
                    this.LifeStyles == input.LifeStyles ||
                    (this.LifeStyles != null &&
                    this.LifeStyles.Equals(input.LifeStyles))
                ) && 
                (
                    this.Demographics == input.Demographics ||
                    (this.Demographics != null &&
                    this.Demographics.Equals(input.Demographics))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Address != null)
                {
                    hashCode = (hashCode * 59) + this.Address.GetHashCode();
                }
                if (this.Phones != null)
                {
                    hashCode = (hashCode * 59) + this.Phones.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.CategoryMatch.GetHashCode();
                if (this.LifeStyles != null)
                {
                    hashCode = (hashCode * 59) + this.LifeStyles.GetHashCode();
                }
                if (this.Demographics != null)
                {
                    hashCode = (hashCode * 59) + this.Demographics.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
