/*
 * Stakkd API
 *
 * # Introduction The Stakkd platform provides comprehensive data services that meet the business objectives of organizations ranging from Fortune 500 companies to startups. Our clients work in an array of industries, including insurance, financial, legal, travel, hospitality, retail, health, media, and telecommunications.  The Stakkd API is documented using the Open API 3.0.1 standard.  All endpoints are available at https://api.stakkd.io/v1. Detailed documentation for each endpoint is below, including the full URL for the endpoint.  # Account Types The API supports two different account types, each with different permissions.  ## Paid Account Paid accounts provide unlimited access to all of the URIs.  ## Trial Account Trial Accounts have a limited number of queries to the APIs. Keep in mind that queries which do not return results still count against the Trial Account query limits. Trial Accounts are temporary, but can be upgraded or extended by contacting [support@stakkd.io](mailto:support@stakkd.io) 
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Stakkd.Client.OpenAPIDateConverter;

namespace Stakkd.Stakkd.model
{
    /// <summary>
    /// DemographicsAppendResponseDemographicsResidence
    /// </summary>
    [DataContract(Name = "demographicsAppendResponse_demographics_residence")]
    public partial class DemographicsAppendResponseDemographicsResidence : IEquatable<DemographicsAppendResponseDemographicsResidence>, IValidatableObject
    {
        /// <summary>
        /// Indicates whether the person is the owner or a tenant of the residence.
        /// </summary>
        /// <value>Indicates whether the person is the owner or a tenant of the residence.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum HomeownerEnum
        {
            /// <summary>
            /// Enum TENANT for value: TENANT
            /// </summary>
            [EnumMember(Value = "TENANT")]
            TENANT = 1,

            /// <summary>
            /// Enum OWNER for value: OWNER
            /// </summary>
            [EnumMember(Value = "OWNER")]
            OWNER = 2

        }


        /// <summary>
        /// Indicates whether the person is the owner or a tenant of the residence.
        /// </summary>
        /// <value>Indicates whether the person is the owner or a tenant of the residence.</value>
        [DataMember(Name = "homeowner", EmitDefaultValue = false)]
        public HomeownerEnum? Homeowner { get; set; }
        /// <summary>
        /// The estimated market value of the residence, where A &#x3D; $1, 000 - $24, 999; B &#x3D; $25, 000 - $49, 999; C &#x3D; $50, 000 - $74, 999; D &#x3D; $75, 000 - $99, 999; E &#x3D; $100, 000 - $124, 999; F &#x3D; $125, 000 - $149, 999; G &#x3D; $150, 000 - $174, 999; H &#x3D; $175, 000 - $199, 999; I &#x3D; $200, 000 - $224, 999; J &#x3D; $225, 000 - $249, 999; K &#x3D; $250, 000 - $274, 999; L &#x3D; $275, 000 - $299, 999; M &#x3D; $300, 000 - $349, 999; N &#x3D; $350, 000 - $399, 999; O &#x3D; $400, 000 - $449, 999; P &#x3D; $450, 000 - $499, 999; Q &#x3D; $500, 000 - $749, 999; R &#x3D; $750, 000 - $999, 999; S &#x3D; &gt; $999,999.
        /// </summary>
        /// <value>The estimated market value of the residence, where A &#x3D; $1, 000 - $24, 999; B &#x3D; $25, 000 - $49, 999; C &#x3D; $50, 000 - $74, 999; D &#x3D; $75, 000 - $99, 999; E &#x3D; $100, 000 - $124, 999; F &#x3D; $125, 000 - $149, 999; G &#x3D; $150, 000 - $174, 999; H &#x3D; $175, 000 - $199, 999; I &#x3D; $200, 000 - $224, 999; J &#x3D; $225, 000 - $249, 999; K &#x3D; $250, 000 - $274, 999; L &#x3D; $275, 000 - $299, 999; M &#x3D; $300, 000 - $349, 999; N &#x3D; $350, 000 - $399, 999; O &#x3D; $400, 000 - $449, 999; P &#x3D; $450, 000 - $499, 999; Q &#x3D; $500, 000 - $749, 999; R &#x3D; $750, 000 - $999, 999; S &#x3D; &gt; $999,999.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum EstimatedMarketValueEnum
        {
            /// <summary>
            /// Enum A for value: A
            /// </summary>
            [EnumMember(Value = "A")]
            A = 1,

            /// <summary>
            /// Enum B for value: B
            /// </summary>
            [EnumMember(Value = "B")]
            B = 2,

            /// <summary>
            /// Enum C for value: C
            /// </summary>
            [EnumMember(Value = "C")]
            C = 3,

            /// <summary>
            /// Enum D for value: D
            /// </summary>
            [EnumMember(Value = "D")]
            D = 4,

            /// <summary>
            /// Enum E for value: E
            /// </summary>
            [EnumMember(Value = "E")]
            E = 5,

            /// <summary>
            /// Enum F for value: F
            /// </summary>
            [EnumMember(Value = "F")]
            F = 6,

            /// <summary>
            /// Enum G for value: G
            /// </summary>
            [EnumMember(Value = "G")]
            G = 7,

            /// <summary>
            /// Enum H for value: H
            /// </summary>
            [EnumMember(Value = "H")]
            H = 8,

            /// <summary>
            /// Enum I for value: I
            /// </summary>
            [EnumMember(Value = "I")]
            I = 9,

            /// <summary>
            /// Enum J for value: J
            /// </summary>
            [EnumMember(Value = "J")]
            J = 10,

            /// <summary>
            /// Enum K for value: K
            /// </summary>
            [EnumMember(Value = "K")]
            K = 11,

            /// <summary>
            /// Enum L for value: L
            /// </summary>
            [EnumMember(Value = "L")]
            L = 12,

            /// <summary>
            /// Enum M for value: M
            /// </summary>
            [EnumMember(Value = "M")]
            M = 13,

            /// <summary>
            /// Enum N for value: N
            /// </summary>
            [EnumMember(Value = "N")]
            N = 14,

            /// <summary>
            /// Enum O for value: O
            /// </summary>
            [EnumMember(Value = "O")]
            O = 15,

            /// <summary>
            /// Enum P for value: P
            /// </summary>
            [EnumMember(Value = "P")]
            P = 16,

            /// <summary>
            /// Enum Q for value: Q
            /// </summary>
            [EnumMember(Value = "Q")]
            Q = 17,

            /// <summary>
            /// Enum R for value: R
            /// </summary>
            [EnumMember(Value = "R")]
            R = 18,

            /// <summary>
            /// Enum S for value: S
            /// </summary>
            [EnumMember(Value = "S")]
            S = 19

        }


        /// <summary>
        /// The estimated market value of the residence, where A &#x3D; $1, 000 - $24, 999; B &#x3D; $25, 000 - $49, 999; C &#x3D; $50, 000 - $74, 999; D &#x3D; $75, 000 - $99, 999; E &#x3D; $100, 000 - $124, 999; F &#x3D; $125, 000 - $149, 999; G &#x3D; $150, 000 - $174, 999; H &#x3D; $175, 000 - $199, 999; I &#x3D; $200, 000 - $224, 999; J &#x3D; $225, 000 - $249, 999; K &#x3D; $250, 000 - $274, 999; L &#x3D; $275, 000 - $299, 999; M &#x3D; $300, 000 - $349, 999; N &#x3D; $350, 000 - $399, 999; O &#x3D; $400, 000 - $449, 999; P &#x3D; $450, 000 - $499, 999; Q &#x3D; $500, 000 - $749, 999; R &#x3D; $750, 000 - $999, 999; S &#x3D; &gt; $999,999.
        /// </summary>
        /// <value>The estimated market value of the residence, where A &#x3D; $1, 000 - $24, 999; B &#x3D; $25, 000 - $49, 999; C &#x3D; $50, 000 - $74, 999; D &#x3D; $75, 000 - $99, 999; E &#x3D; $100, 000 - $124, 999; F &#x3D; $125, 000 - $149, 999; G &#x3D; $150, 000 - $174, 999; H &#x3D; $175, 000 - $199, 999; I &#x3D; $200, 000 - $224, 999; J &#x3D; $225, 000 - $249, 999; K &#x3D; $250, 000 - $274, 999; L &#x3D; $275, 000 - $299, 999; M &#x3D; $300, 000 - $349, 999; N &#x3D; $350, 000 - $399, 999; O &#x3D; $400, 000 - $449, 999; P &#x3D; $450, 000 - $499, 999; Q &#x3D; $500, 000 - $749, 999; R &#x3D; $750, 000 - $999, 999; S &#x3D; &gt; $999,999.</value>
        [DataMember(Name = "estimatedMarketValue", EmitDefaultValue = false)]
        public EstimatedMarketValueEnum? EstimatedMarketValue { get; set; }
        /// <summary>
        /// The median value of the residence, where A &#x3D; &lt; $50, 000; B &#x3D; $50, 000 - $99, 999; C &#x3D; $100, 000 - $149, 999; D &#x3D; $150, 000 - $249, 999; E &#x3D; $250, 000 - $349, 999; F &#x3D; $350, 000 - $499, 999; G &#x3D; $500, 000 - $749, 999; H &#x3D; $750, 000 - $999, 999; I &#x3D; &gt; $999,999.
        /// </summary>
        /// <value>The median value of the residence, where A &#x3D; &lt; $50, 000; B &#x3D; $50, 000 - $99, 999; C &#x3D; $100, 000 - $149, 999; D &#x3D; $150, 000 - $249, 999; E &#x3D; $250, 000 - $349, 999; F &#x3D; $350, 000 - $499, 999; G &#x3D; $500, 000 - $749, 999; H &#x3D; $750, 000 - $999, 999; I &#x3D; &gt; $999,999.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum MedianHouseValueEnum
        {
            /// <summary>
            /// Enum A for value: A
            /// </summary>
            [EnumMember(Value = "A")]
            A = 1,

            /// <summary>
            /// Enum B for value: B
            /// </summary>
            [EnumMember(Value = "B")]
            B = 2,

            /// <summary>
            /// Enum C for value: C
            /// </summary>
            [EnumMember(Value = "C")]
            C = 3,

            /// <summary>
            /// Enum D for value: D
            /// </summary>
            [EnumMember(Value = "D")]
            D = 4,

            /// <summary>
            /// Enum E for value: E
            /// </summary>
            [EnumMember(Value = "E")]
            E = 5,

            /// <summary>
            /// Enum F for value: F
            /// </summary>
            [EnumMember(Value = "F")]
            F = 6,

            /// <summary>
            /// Enum G for value: G
            /// </summary>
            [EnumMember(Value = "G")]
            G = 7,

            /// <summary>
            /// Enum H for value: H
            /// </summary>
            [EnumMember(Value = "H")]
            H = 8,

            /// <summary>
            /// Enum I for value: I
            /// </summary>
            [EnumMember(Value = "I")]
            I = 9

        }


        /// <summary>
        /// The median value of the residence, where A &#x3D; &lt; $50, 000; B &#x3D; $50, 000 - $99, 999; C &#x3D; $100, 000 - $149, 999; D &#x3D; $150, 000 - $249, 999; E &#x3D; $250, 000 - $349, 999; F &#x3D; $350, 000 - $499, 999; G &#x3D; $500, 000 - $749, 999; H &#x3D; $750, 000 - $999, 999; I &#x3D; &gt; $999,999.
        /// </summary>
        /// <value>The median value of the residence, where A &#x3D; &lt; $50, 000; B &#x3D; $50, 000 - $99, 999; C &#x3D; $100, 000 - $149, 999; D &#x3D; $150, 000 - $249, 999; E &#x3D; $250, 000 - $349, 999; F &#x3D; $350, 000 - $499, 999; G &#x3D; $500, 000 - $749, 999; H &#x3D; $750, 000 - $999, 999; I &#x3D; &gt; $999,999.</value>
        [DataMember(Name = "medianHouseValue", EmitDefaultValue = false)]
        public MedianHouseValueEnum? MedianHouseValue { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="DemographicsAppendResponseDemographicsResidence" /> class.
        /// </summary>
        /// <param name="homeowner">Indicates whether the person is the owner or a tenant of the residence..</param>
        /// <param name="hasPool">Indicates whether the residence is flagged as having a pool..</param>
        /// <param name="estimatedMarketValue">The estimated market value of the residence, where A &#x3D; $1, 000 - $24, 999; B &#x3D; $25, 000 - $49, 999; C &#x3D; $50, 000 - $74, 999; D &#x3D; $75, 000 - $99, 999; E &#x3D; $100, 000 - $124, 999; F &#x3D; $125, 000 - $149, 999; G &#x3D; $150, 000 - $174, 999; H &#x3D; $175, 000 - $199, 999; I &#x3D; $200, 000 - $224, 999; J &#x3D; $225, 000 - $249, 999; K &#x3D; $250, 000 - $274, 999; L &#x3D; $275, 000 - $299, 999; M &#x3D; $300, 000 - $349, 999; N &#x3D; $350, 000 - $399, 999; O &#x3D; $400, 000 - $449, 999; P &#x3D; $450, 000 - $499, 999; Q &#x3D; $500, 000 - $749, 999; R &#x3D; $750, 000 - $999, 999; S &#x3D; &gt; $999,999..</param>
        /// <param name="lengthOfResidence">The number of years the person has lived at the residence..</param>
        /// <param name="yearHomeBuilt">The year the residence was built..</param>
        /// <param name="medianHouseValue">The median value of the residence, where A &#x3D; &lt; $50, 000; B &#x3D; $50, 000 - $99, 999; C &#x3D; $100, 000 - $149, 999; D &#x3D; $150, 000 - $249, 999; E &#x3D; $250, 000 - $349, 999; F &#x3D; $350, 000 - $499, 999; G &#x3D; $500, 000 - $749, 999; H &#x3D; $750, 000 - $999, 999; I &#x3D; &gt; $999,999..</param>
        /// <param name="dwelling">dwelling.</param>
        /// <param name="isMobileHome">Indicates whether the residence is flagged as a mobile home..</param>
        /// <param name="hasFireplace">Indicates whether the residence is flagged as having a fireplace..</param>
        public DemographicsAppendResponseDemographicsResidence(HomeownerEnum? homeowner = default(HomeownerEnum?), bool hasPool = default(bool), EstimatedMarketValueEnum? estimatedMarketValue = default(EstimatedMarketValueEnum?), int lengthOfResidence = default(int), int yearHomeBuilt = default(int), MedianHouseValueEnum? medianHouseValue = default(MedianHouseValueEnum?), DemographicsAppendResponseDemographicsResidenceDwelling dwelling = default(DemographicsAppendResponseDemographicsResidenceDwelling), bool isMobileHome = default(bool), bool hasFireplace = default(bool))
        {
            this.Homeowner = homeowner;
            this.HasPool = hasPool;
            this.EstimatedMarketValue = estimatedMarketValue;
            this.LengthOfResidence = lengthOfResidence;
            this.YearHomeBuilt = yearHomeBuilt;
            this.MedianHouseValue = medianHouseValue;
            this.Dwelling = dwelling;
            this.IsMobileHome = isMobileHome;
            this.HasFireplace = hasFireplace;
        }

        /// <summary>
        /// Indicates whether the residence is flagged as having a pool.
        /// </summary>
        /// <value>Indicates whether the residence is flagged as having a pool.</value>
        [DataMember(Name = "hasPool", EmitDefaultValue = true)]
        public bool HasPool { get; set; }

        /// <summary>
        /// The number of years the person has lived at the residence.
        /// </summary>
        /// <value>The number of years the person has lived at the residence.</value>
        [DataMember(Name = "lengthOfResidence", EmitDefaultValue = false)]
        public int LengthOfResidence { get; set; }

        /// <summary>
        /// The year the residence was built.
        /// </summary>
        /// <value>The year the residence was built.</value>
        [DataMember(Name = "yearHomeBuilt", EmitDefaultValue = false)]
        public int YearHomeBuilt { get; set; }

        /// <summary>
        /// Gets or Sets Dwelling
        /// </summary>
        [DataMember(Name = "dwelling", EmitDefaultValue = false)]
        public DemographicsAppendResponseDemographicsResidenceDwelling Dwelling { get; set; }

        /// <summary>
        /// Indicates whether the residence is flagged as a mobile home.
        /// </summary>
        /// <value>Indicates whether the residence is flagged as a mobile home.</value>
        [DataMember(Name = "isMobileHome", EmitDefaultValue = true)]
        public bool IsMobileHome { get; set; }

        /// <summary>
        /// Indicates whether the residence is flagged as having a fireplace.
        /// </summary>
        /// <value>Indicates whether the residence is flagged as having a fireplace.</value>
        [DataMember(Name = "hasFireplace", EmitDefaultValue = true)]
        public bool HasFireplace { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DemographicsAppendResponseDemographicsResidence {\n");
            sb.Append("  Homeowner: ").Append(Homeowner).Append("\n");
            sb.Append("  HasPool: ").Append(HasPool).Append("\n");
            sb.Append("  EstimatedMarketValue: ").Append(EstimatedMarketValue).Append("\n");
            sb.Append("  LengthOfResidence: ").Append(LengthOfResidence).Append("\n");
            sb.Append("  YearHomeBuilt: ").Append(YearHomeBuilt).Append("\n");
            sb.Append("  MedianHouseValue: ").Append(MedianHouseValue).Append("\n");
            sb.Append("  Dwelling: ").Append(Dwelling).Append("\n");
            sb.Append("  IsMobileHome: ").Append(IsMobileHome).Append("\n");
            sb.Append("  HasFireplace: ").Append(HasFireplace).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DemographicsAppendResponseDemographicsResidence);
        }

        /// <summary>
        /// Returns true if DemographicsAppendResponseDemographicsResidence instances are equal
        /// </summary>
        /// <param name="input">Instance of DemographicsAppendResponseDemographicsResidence to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DemographicsAppendResponseDemographicsResidence input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Homeowner == input.Homeowner ||
                    this.Homeowner.Equals(input.Homeowner)
                ) && 
                (
                    this.HasPool == input.HasPool ||
                    this.HasPool.Equals(input.HasPool)
                ) && 
                (
                    this.EstimatedMarketValue == input.EstimatedMarketValue ||
                    this.EstimatedMarketValue.Equals(input.EstimatedMarketValue)
                ) && 
                (
                    this.LengthOfResidence == input.LengthOfResidence ||
                    this.LengthOfResidence.Equals(input.LengthOfResidence)
                ) && 
                (
                    this.YearHomeBuilt == input.YearHomeBuilt ||
                    this.YearHomeBuilt.Equals(input.YearHomeBuilt)
                ) && 
                (
                    this.MedianHouseValue == input.MedianHouseValue ||
                    this.MedianHouseValue.Equals(input.MedianHouseValue)
                ) && 
                (
                    this.Dwelling == input.Dwelling ||
                    (this.Dwelling != null &&
                    this.Dwelling.Equals(input.Dwelling))
                ) && 
                (
                    this.IsMobileHome == input.IsMobileHome ||
                    this.IsMobileHome.Equals(input.IsMobileHome)
                ) && 
                (
                    this.HasFireplace == input.HasFireplace ||
                    this.HasFireplace.Equals(input.HasFireplace)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Homeowner.GetHashCode();
                hashCode = (hashCode * 59) + this.HasPool.GetHashCode();
                hashCode = (hashCode * 59) + this.EstimatedMarketValue.GetHashCode();
                hashCode = (hashCode * 59) + this.LengthOfResidence.GetHashCode();
                hashCode = (hashCode * 59) + this.YearHomeBuilt.GetHashCode();
                hashCode = (hashCode * 59) + this.MedianHouseValue.GetHashCode();
                if (this.Dwelling != null)
                {
                    hashCode = (hashCode * 59) + this.Dwelling.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.IsMobileHome.GetHashCode();
                hashCode = (hashCode * 59) + this.HasFireplace.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
