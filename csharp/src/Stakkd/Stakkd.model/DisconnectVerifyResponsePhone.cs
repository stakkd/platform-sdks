/*
 * Stakkd API
 *
 * # Introduction The Stakkd platform provides comprehensive data services that meet the business objectives of organizations ranging from Fortune 500 companies to startups. Our clients work in an array of industries, including insurance, financial, legal, travel, hospitality, retail, health, media, and telecommunications.  The Stakkd API is documented using the Open API 3.0.1 standard.  All endpoints are available at https://api.stakkd.io/v1. Detailed documentation for each endpoint is below, including the full URL for the endpoint.  # Account Types The API supports two different account types, each with different permissions.  ## Paid Account Paid accounts provide unlimited access to all of the URIs.  ## Trial Account Trial Accounts have a limited number of queries to the APIs. Keep in mind that queries which do not return results still count against the Trial Account query limits. Trial Accounts are temporary, but can be upgraded or extended by contacting [support@stakkd.io](mailto:support@stakkd.io) 
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Stakkd.Client.OpenAPIDateConverter;

namespace Stakkd.Stakkd.model
{
    /// <summary>
    /// DisconnectVerifyResponsePhone
    /// </summary>
    [DataContract(Name = "disconnectVerifyResponse_phone")]
    public partial class DisconnectVerifyResponsePhone : IEquatable<DisconnectVerifyResponsePhone>, IValidatableObject
    {
        /// <summary>
        /// The phone type, where: L &#x3D; &#39;Landline&#39;, V &#x3D; &#39;VoIP&#39;, W &#x3D; &#39;Wireless&#39;, and O &#x3D; &#39;Other&#39;.
        /// </summary>
        /// <value>The phone type, where: L &#x3D; &#39;Landline&#39;, V &#x3D; &#39;VoIP&#39;, W &#x3D; &#39;Wireless&#39;, and O &#x3D; &#39;Other&#39;.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum PhoneTypeEnum
        {
            /// <summary>
            /// Enum L for value: L
            /// </summary>
            [EnumMember(Value = "L")]
            L = 1,

            /// <summary>
            /// Enum V for value: V
            /// </summary>
            [EnumMember(Value = "V")]
            V = 2,

            /// <summary>
            /// Enum W for value: W
            /// </summary>
            [EnumMember(Value = "W")]
            W = 3,

            /// <summary>
            /// Enum O for value: O
            /// </summary>
            [EnumMember(Value = "O")]
            O = 4

        }


        /// <summary>
        /// The phone type, where: L &#x3D; &#39;Landline&#39;, V &#x3D; &#39;VoIP&#39;, W &#x3D; &#39;Wireless&#39;, and O &#x3D; &#39;Other&#39;.
        /// </summary>
        /// <value>The phone type, where: L &#x3D; &#39;Landline&#39;, V &#x3D; &#39;VoIP&#39;, W &#x3D; &#39;Wireless&#39;, and O &#x3D; &#39;Other&#39;.</value>
        [DataMember(Name = "phoneType", EmitDefaultValue = false)]
        public PhoneTypeEnum? PhoneType { get; set; }
        /// <summary>
        /// The directory assistance indicator.
        /// </summary>
        /// <value>The directory assistance indicator.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum DirectoryAssistanceEnum
        {
            /// <summary>
            /// Enum PRIVATE for value: PRIVATE
            /// </summary>
            [EnumMember(Value = "PRIVATE")]
            PRIVATE = 1,

            /// <summary>
            /// Enum REMOVED for value: REMOVED
            /// </summary>
            [EnumMember(Value = "REMOVED")]
            REMOVED = 2,

            /// <summary>
            /// Enum EXISTS for value: EXISTS
            /// </summary>
            [EnumMember(Value = "EXISTS")]
            EXISTS = 3

        }


        /// <summary>
        /// The directory assistance indicator.
        /// </summary>
        /// <value>The directory assistance indicator.</value>
        [DataMember(Name = "directoryAssistance", EmitDefaultValue = false)]
        public DirectoryAssistanceEnum? DirectoryAssistance { get; set; }
        /// <summary>
        /// The phone record type.
        /// </summary>
        /// <value>The phone record type.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum RecordTypeEnum
        {
            /// <summary>
            /// Enum PAYPHONE for value: PAYPHONE
            /// </summary>
            [EnumMember(Value = "PAYPHONE")]
            PAYPHONE = 1,

            /// <summary>
            /// Enum RESIDENTIAL for value: RESIDENTIAL
            /// </summary>
            [EnumMember(Value = "RESIDENTIAL")]
            RESIDENTIAL = 2,

            /// <summary>
            /// Enum BUSINESS for value: BUSINESS
            /// </summary>
            [EnumMember(Value = "BUSINESS")]
            BUSINESS = 3,

            /// <summary>
            /// Enum UNKNOWN for value: UNKNOWN
            /// </summary>
            [EnumMember(Value = "UNKNOWN")]
            UNKNOWN = 4

        }


        /// <summary>
        /// The phone record type.
        /// </summary>
        /// <value>The phone record type.</value>
        [DataMember(Name = "recordType", EmitDefaultValue = false)]
        public RecordTypeEnum? RecordType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="DisconnectVerifyResponsePhone" /> class.
        /// </summary>
        /// <param name="phoneType">The phone type, where: L &#x3D; &#39;Landline&#39;, V &#x3D; &#39;VoIP&#39;, W &#x3D; &#39;Wireless&#39;, and O &#x3D; &#39;Other&#39;..</param>
        /// <param name="phone">The phone number..</param>
        /// <param name="provider">The name of the phone provider..</param>
        /// <param name="operatingCompanyNumber">The 4 character alphanumeric phone operating company number..</param>
        /// <param name="confidenceScore">The telephone confidence score, ranging between 1 and 7, where 1 indicates highest confidence and 7 indicates unconfirmed..</param>
        /// <param name="initialDateReceived">The date the record was first received, formatted: YYYYMMDD.</param>
        /// <param name="lastDateReceived">The date the reocrd was last received as connected, formatted: YYYYMMDD.</param>
        /// <param name="directoryAssistance">The directory assistance indicator..</param>
        /// <param name="recordType">The phone record type..</param>
        /// <param name="directInwardDialNumber">Indicates whether or not the phone is flagged as a Direct Inward Dial Number..</param>
        public DisconnectVerifyResponsePhone(PhoneTypeEnum? phoneType = default(PhoneTypeEnum?), string phone = default(string), string provider = default(string), string operatingCompanyNumber = default(string), int confidenceScore = default(int), string initialDateReceived = default(string), string lastDateReceived = default(string), DirectoryAssistanceEnum? directoryAssistance = default(DirectoryAssistanceEnum?), RecordTypeEnum? recordType = default(RecordTypeEnum?), bool directInwardDialNumber = default(bool))
        {
            this.PhoneType = phoneType;
            this.Phone = phone;
            this.Provider = provider;
            this.OperatingCompanyNumber = operatingCompanyNumber;
            this.ConfidenceScore = confidenceScore;
            this.InitialDateReceived = initialDateReceived;
            this.LastDateReceived = lastDateReceived;
            this.DirectoryAssistance = directoryAssistance;
            this.RecordType = recordType;
            this.DirectInwardDialNumber = directInwardDialNumber;
        }

        /// <summary>
        /// The phone number.
        /// </summary>
        /// <value>The phone number.</value>
        [DataMember(Name = "phone", EmitDefaultValue = false)]
        public string Phone { get; set; }

        /// <summary>
        /// The name of the phone provider.
        /// </summary>
        /// <value>The name of the phone provider.</value>
        [DataMember(Name = "provider", EmitDefaultValue = false)]
        public string Provider { get; set; }

        /// <summary>
        /// The 4 character alphanumeric phone operating company number.
        /// </summary>
        /// <value>The 4 character alphanumeric phone operating company number.</value>
        [DataMember(Name = "operatingCompanyNumber", EmitDefaultValue = false)]
        public string OperatingCompanyNumber { get; set; }

        /// <summary>
        /// The telephone confidence score, ranging between 1 and 7, where 1 indicates highest confidence and 7 indicates unconfirmed.
        /// </summary>
        /// <value>The telephone confidence score, ranging between 1 and 7, where 1 indicates highest confidence and 7 indicates unconfirmed.</value>
        [DataMember(Name = "confidenceScore", EmitDefaultValue = false)]
        public int ConfidenceScore { get; set; }

        /// <summary>
        /// The date the record was first received, formatted: YYYYMMDD
        /// </summary>
        /// <value>The date the record was first received, formatted: YYYYMMDD</value>
        [DataMember(Name = "initialDateReceived", EmitDefaultValue = false)]
        public string InitialDateReceived { get; set; }

        /// <summary>
        /// The date the reocrd was last received as connected, formatted: YYYYMMDD
        /// </summary>
        /// <value>The date the reocrd was last received as connected, formatted: YYYYMMDD</value>
        [DataMember(Name = "lastDateReceived", EmitDefaultValue = false)]
        public string LastDateReceived { get; set; }

        /// <summary>
        /// Indicates whether or not the phone is flagged as a Direct Inward Dial Number.
        /// </summary>
        /// <value>Indicates whether or not the phone is flagged as a Direct Inward Dial Number.</value>
        [DataMember(Name = "directInwardDialNumber", EmitDefaultValue = true)]
        public bool DirectInwardDialNumber { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DisconnectVerifyResponsePhone {\n");
            sb.Append("  PhoneType: ").Append(PhoneType).Append("\n");
            sb.Append("  Phone: ").Append(Phone).Append("\n");
            sb.Append("  Provider: ").Append(Provider).Append("\n");
            sb.Append("  OperatingCompanyNumber: ").Append(OperatingCompanyNumber).Append("\n");
            sb.Append("  ConfidenceScore: ").Append(ConfidenceScore).Append("\n");
            sb.Append("  InitialDateReceived: ").Append(InitialDateReceived).Append("\n");
            sb.Append("  LastDateReceived: ").Append(LastDateReceived).Append("\n");
            sb.Append("  DirectoryAssistance: ").Append(DirectoryAssistance).Append("\n");
            sb.Append("  RecordType: ").Append(RecordType).Append("\n");
            sb.Append("  DirectInwardDialNumber: ").Append(DirectInwardDialNumber).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DisconnectVerifyResponsePhone);
        }

        /// <summary>
        /// Returns true if DisconnectVerifyResponsePhone instances are equal
        /// </summary>
        /// <param name="input">Instance of DisconnectVerifyResponsePhone to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DisconnectVerifyResponsePhone input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.PhoneType == input.PhoneType ||
                    this.PhoneType.Equals(input.PhoneType)
                ) && 
                (
                    this.Phone == input.Phone ||
                    (this.Phone != null &&
                    this.Phone.Equals(input.Phone))
                ) && 
                (
                    this.Provider == input.Provider ||
                    (this.Provider != null &&
                    this.Provider.Equals(input.Provider))
                ) && 
                (
                    this.OperatingCompanyNumber == input.OperatingCompanyNumber ||
                    (this.OperatingCompanyNumber != null &&
                    this.OperatingCompanyNumber.Equals(input.OperatingCompanyNumber))
                ) && 
                (
                    this.ConfidenceScore == input.ConfidenceScore ||
                    this.ConfidenceScore.Equals(input.ConfidenceScore)
                ) && 
                (
                    this.InitialDateReceived == input.InitialDateReceived ||
                    (this.InitialDateReceived != null &&
                    this.InitialDateReceived.Equals(input.InitialDateReceived))
                ) && 
                (
                    this.LastDateReceived == input.LastDateReceived ||
                    (this.LastDateReceived != null &&
                    this.LastDateReceived.Equals(input.LastDateReceived))
                ) && 
                (
                    this.DirectoryAssistance == input.DirectoryAssistance ||
                    this.DirectoryAssistance.Equals(input.DirectoryAssistance)
                ) && 
                (
                    this.RecordType == input.RecordType ||
                    this.RecordType.Equals(input.RecordType)
                ) && 
                (
                    this.DirectInwardDialNumber == input.DirectInwardDialNumber ||
                    this.DirectInwardDialNumber.Equals(input.DirectInwardDialNumber)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.PhoneType.GetHashCode();
                if (this.Phone != null)
                {
                    hashCode = (hashCode * 59) + this.Phone.GetHashCode();
                }
                if (this.Provider != null)
                {
                    hashCode = (hashCode * 59) + this.Provider.GetHashCode();
                }
                if (this.OperatingCompanyNumber != null)
                {
                    hashCode = (hashCode * 59) + this.OperatingCompanyNumber.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.ConfidenceScore.GetHashCode();
                if (this.InitialDateReceived != null)
                {
                    hashCode = (hashCode * 59) + this.InitialDateReceived.GetHashCode();
                }
                if (this.LastDateReceived != null)
                {
                    hashCode = (hashCode * 59) + this.LastDateReceived.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.DirectoryAssistance.GetHashCode();
                hashCode = (hashCode * 59) + this.RecordType.GetHashCode();
                hashCode = (hashCode * 59) + this.DirectInwardDialNumber.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
