/*
 * Stakkd API
 *
 * # Introduction The Stakkd platform provides comprehensive data services that meet the business objectives of organizations ranging from Fortune 500 companies to startups. Our clients work in an array of industries, including insurance, financial, legal, travel, hospitality, retail, health, media, and telecommunications.  The Stakkd API is documented using the Open API 3.0.1 standard.  All endpoints are available at https://api.stakkd.io/v1. Detailed documentation for each endpoint is below, including the full URL for the endpoint.  # Account Types The API supports two different account types, each with different permissions.  ## Paid Account Paid accounts provide unlimited access to all of the URIs.  ## Trial Account Trial Accounts have a limited number of queries to the APIs. Keep in mind that queries which do not return results still count against the Trial Account query limits. Trial Accounts are temporary, but can be upgraded or extended by contacting [support@stakkd.io](mailto:support@stakkd.io) 
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Stakkd.Client.OpenAPIDateConverter;

namespace Stakkd.Stakkd.model
{
    /// <summary>
    /// DemographicsAppendResponseDemographicsPerson
    /// </summary>
    [DataContract(Name = "demographicsAppendResponse_demographics_person")]
    public partial class DemographicsAppendResponseDemographicsPerson : IEquatable<DemographicsAppendResponseDemographicsPerson>, IValidatableObject
    {
        /// <summary>
        /// The gender of the person, where: M &#x3D; Male; F &#x3D; Female; U &#x3D; Unknown.
        /// </summary>
        /// <value>The gender of the person, where: M &#x3D; Male; F &#x3D; Female; U &#x3D; Unknown.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum GenderEnum
        {
            /// <summary>
            /// Enum M for value: M
            /// </summary>
            [EnumMember(Value = "M")]
            M = 1,

            /// <summary>
            /// Enum F for value: F
            /// </summary>
            [EnumMember(Value = "F")]
            F = 2,

            /// <summary>
            /// Enum U for value: U
            /// </summary>
            [EnumMember(Value = "U")]
            U = 3

        }


        /// <summary>
        /// The gender of the person, where: M &#x3D; Male; F &#x3D; Female; U &#x3D; Unknown.
        /// </summary>
        /// <value>The gender of the person, where: M &#x3D; Male; F &#x3D; Female; U &#x3D; Unknown.</value>
        [DataMember(Name = "gender", EmitDefaultValue = false)]
        public GenderEnum? Gender { get; set; }
        /// <summary>
        /// The ethnicity of the person.
        /// </summary>
        /// <value>The ethnicity of the person.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum EthnicityEnum
        {
            /// <summary>
            /// Enum ASIAN for value: ASIAN
            /// </summary>
            [EnumMember(Value = "ASIAN")]
            ASIAN = 1,

            /// <summary>
            /// Enum AFRICANAMERICAN for value: AFRICANAMERICAN
            /// </summary>
            [EnumMember(Value = "AFRICANAMERICAN")]
            AFRICANAMERICAN = 2,

            /// <summary>
            /// Enum HISPANIC for value: HISPANIC
            /// </summary>
            [EnumMember(Value = "HISPANIC")]
            HISPANIC = 3

        }


        /// <summary>
        /// The ethnicity of the person.
        /// </summary>
        /// <value>The ethnicity of the person.</value>
        [DataMember(Name = "ethnicity", EmitDefaultValue = false)]
        public EthnicityEnum? Ethnicity { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="DemographicsAppendResponseDemographicsPerson" /> class.
        /// </summary>
        /// <param name="education">education.</param>
        /// <param name="gender">The gender of the person, where: M &#x3D; Male; F &#x3D; Female; U &#x3D; Unknown..</param>
        /// <param name="ethnicity">The ethnicity of the person..</param>
        /// <param name="race">race.</param>
        /// <param name="dateOfBirth">The date of birth as the person, formatted: yyyyMM.</param>
        /// <param name="workerType">workerType.</param>
        /// <param name="percentMailOrderRespondent">The Penetration Percentage for indicating whether the person is a mail order respondent, +/- 3%..</param>
        /// <param name="language">language.</param>
        /// <param name="finances">finances.</param>
        /// <param name="isSenior">Indicates whether the person is flagged as a senior..</param>
        /// <param name="age">The age of the person..</param>
        public DemographicsAppendResponseDemographicsPerson(DemographicsAppendResponseDemographicsPersonEducation education = default(DemographicsAppendResponseDemographicsPersonEducation), GenderEnum? gender = default(GenderEnum?), EthnicityEnum? ethnicity = default(EthnicityEnum?), DemographicsAppendResponseDemographicsPersonRace race = default(DemographicsAppendResponseDemographicsPersonRace), string dateOfBirth = default(string), DemographicsAppendResponseDemographicsPersonWorkerType workerType = default(DemographicsAppendResponseDemographicsPersonWorkerType), int percentMailOrderRespondent = default(int), DemographicsAppendResponseDemographicsPersonLanguage language = default(DemographicsAppendResponseDemographicsPersonLanguage), DemographicsAppendResponseDemographicsPersonFinances finances = default(DemographicsAppendResponseDemographicsPersonFinances), bool isSenior = default(bool), int age = default(int))
        {
            this.Education = education;
            this.Gender = gender;
            this.Ethnicity = ethnicity;
            this.Race = race;
            this.DateOfBirth = dateOfBirth;
            this.WorkerType = workerType;
            this.PercentMailOrderRespondent = percentMailOrderRespondent;
            this.Language = language;
            this.Finances = finances;
            this.IsSenior = isSenior;
            this.Age = age;
        }

        /// <summary>
        /// Gets or Sets Education
        /// </summary>
        [DataMember(Name = "education", EmitDefaultValue = false)]
        public DemographicsAppendResponseDemographicsPersonEducation Education { get; set; }

        /// <summary>
        /// Gets or Sets Race
        /// </summary>
        [DataMember(Name = "race", EmitDefaultValue = false)]
        public DemographicsAppendResponseDemographicsPersonRace Race { get; set; }

        /// <summary>
        /// The date of birth as the person, formatted: yyyyMM
        /// </summary>
        /// <value>The date of birth as the person, formatted: yyyyMM</value>
        [DataMember(Name = "dateOfBirth", EmitDefaultValue = false)]
        public string DateOfBirth { get; set; }

        /// <summary>
        /// Gets or Sets WorkerType
        /// </summary>
        [DataMember(Name = "workerType", EmitDefaultValue = false)]
        public DemographicsAppendResponseDemographicsPersonWorkerType WorkerType { get; set; }

        /// <summary>
        /// The Penetration Percentage for indicating whether the person is a mail order respondent, +/- 3%.
        /// </summary>
        /// <value>The Penetration Percentage for indicating whether the person is a mail order respondent, +/- 3%.</value>
        [DataMember(Name = "percentMailOrderRespondent", EmitDefaultValue = false)]
        public int PercentMailOrderRespondent { get; set; }

        /// <summary>
        /// Gets or Sets Language
        /// </summary>
        [DataMember(Name = "language", EmitDefaultValue = false)]
        public DemographicsAppendResponseDemographicsPersonLanguage Language { get; set; }

        /// <summary>
        /// Gets or Sets Finances
        /// </summary>
        [DataMember(Name = "finances", EmitDefaultValue = false)]
        public DemographicsAppendResponseDemographicsPersonFinances Finances { get; set; }

        /// <summary>
        /// Indicates whether the person is flagged as a senior.
        /// </summary>
        /// <value>Indicates whether the person is flagged as a senior.</value>
        [DataMember(Name = "isSenior", EmitDefaultValue = true)]
        public bool IsSenior { get; set; }

        /// <summary>
        /// The age of the person.
        /// </summary>
        /// <value>The age of the person.</value>
        [DataMember(Name = "age", EmitDefaultValue = false)]
        public int Age { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DemographicsAppendResponseDemographicsPerson {\n");
            sb.Append("  Education: ").Append(Education).Append("\n");
            sb.Append("  Gender: ").Append(Gender).Append("\n");
            sb.Append("  Ethnicity: ").Append(Ethnicity).Append("\n");
            sb.Append("  Race: ").Append(Race).Append("\n");
            sb.Append("  DateOfBirth: ").Append(DateOfBirth).Append("\n");
            sb.Append("  WorkerType: ").Append(WorkerType).Append("\n");
            sb.Append("  PercentMailOrderRespondent: ").Append(PercentMailOrderRespondent).Append("\n");
            sb.Append("  Language: ").Append(Language).Append("\n");
            sb.Append("  Finances: ").Append(Finances).Append("\n");
            sb.Append("  IsSenior: ").Append(IsSenior).Append("\n");
            sb.Append("  Age: ").Append(Age).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DemographicsAppendResponseDemographicsPerson);
        }

        /// <summary>
        /// Returns true if DemographicsAppendResponseDemographicsPerson instances are equal
        /// </summary>
        /// <param name="input">Instance of DemographicsAppendResponseDemographicsPerson to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DemographicsAppendResponseDemographicsPerson input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Education == input.Education ||
                    (this.Education != null &&
                    this.Education.Equals(input.Education))
                ) && 
                (
                    this.Gender == input.Gender ||
                    this.Gender.Equals(input.Gender)
                ) && 
                (
                    this.Ethnicity == input.Ethnicity ||
                    this.Ethnicity.Equals(input.Ethnicity)
                ) && 
                (
                    this.Race == input.Race ||
                    (this.Race != null &&
                    this.Race.Equals(input.Race))
                ) && 
                (
                    this.DateOfBirth == input.DateOfBirth ||
                    (this.DateOfBirth != null &&
                    this.DateOfBirth.Equals(input.DateOfBirth))
                ) && 
                (
                    this.WorkerType == input.WorkerType ||
                    (this.WorkerType != null &&
                    this.WorkerType.Equals(input.WorkerType))
                ) && 
                (
                    this.PercentMailOrderRespondent == input.PercentMailOrderRespondent ||
                    this.PercentMailOrderRespondent.Equals(input.PercentMailOrderRespondent)
                ) && 
                (
                    this.Language == input.Language ||
                    (this.Language != null &&
                    this.Language.Equals(input.Language))
                ) && 
                (
                    this.Finances == input.Finances ||
                    (this.Finances != null &&
                    this.Finances.Equals(input.Finances))
                ) && 
                (
                    this.IsSenior == input.IsSenior ||
                    this.IsSenior.Equals(input.IsSenior)
                ) && 
                (
                    this.Age == input.Age ||
                    this.Age.Equals(input.Age)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Education != null)
                {
                    hashCode = (hashCode * 59) + this.Education.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Gender.GetHashCode();
                hashCode = (hashCode * 59) + this.Ethnicity.GetHashCode();
                if (this.Race != null)
                {
                    hashCode = (hashCode * 59) + this.Race.GetHashCode();
                }
                if (this.DateOfBirth != null)
                {
                    hashCode = (hashCode * 59) + this.DateOfBirth.GetHashCode();
                }
                if (this.WorkerType != null)
                {
                    hashCode = (hashCode * 59) + this.WorkerType.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.PercentMailOrderRespondent.GetHashCode();
                if (this.Language != null)
                {
                    hashCode = (hashCode * 59) + this.Language.GetHashCode();
                }
                if (this.Finances != null)
                {
                    hashCode = (hashCode * 59) + this.Finances.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.IsSenior.GetHashCode();
                hashCode = (hashCode * 59) + this.Age.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
