/*
 * Stakkd API
 *
 * # Introduction The Stakkd platform provides comprehensive data services that meet the business objectives of organizations ranging from Fortune 500 companies to startups. Our clients work in an array of industries, including insurance, financial, legal, travel, hospitality, retail, health, media, and telecommunications.  The Stakkd API is documented using the Open API 3.0.1 standard.  All endpoints are available at https://api.stakkd.io/v1. Detailed documentation for each endpoint is below, including the full URL for the endpoint.  # Account Types The API supports two different account types, each with different permissions.  ## Paid Account Paid accounts provide unlimited access to all of the URIs.  ## Trial Account Trial Accounts have a limited number of queries to the APIs. Keep in mind that queries which do not return results still count against the Trial Account query limits. Trial Accounts are temporary, but can be upgraded or extended by contacting [support@stakkd.io](mailto:support@stakkd.io) 
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Stakkd.Client;
using Stakkd.Stakkd.model;

namespace Stakkd.Stakkd
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAppendApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Stakkd.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="xApiKey"></param>
        /// <param name="demographicsAppendRequest"></param>
        /// <returns>DemographicsAppendResponse</returns>
        DemographicsAppendResponse AppendDemographicsPost(string contentType, string xApiKey, DemographicsAppendRequest demographicsAppendRequest);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Stakkd.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="xApiKey"></param>
        /// <param name="demographicsAppendRequest"></param>
        /// <returns>ApiResponse of DemographicsAppendResponse</returns>
        ApiResponse<DemographicsAppendResponse> AppendDemographicsPostWithHttpInfo(string contentType, string xApiKey, DemographicsAppendRequest demographicsAppendRequest);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Stakkd.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="xApiKey"></param>
        /// <param name="emailAppendRequest"></param>
        /// <returns>EmailAppendResponse</returns>
        EmailAppendResponse AppendEmailPost(string contentType, string xApiKey, EmailAppendRequest emailAppendRequest);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Stakkd.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="xApiKey"></param>
        /// <param name="emailAppendRequest"></param>
        /// <returns>ApiResponse of EmailAppendResponse</returns>
        ApiResponse<EmailAppendResponse> AppendEmailPostWithHttpInfo(string contentType, string xApiKey, EmailAppendRequest emailAppendRequest);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Stakkd.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="xApiKey"></param>
        /// <param name="mobileAppendRequest"></param>
        /// <returns>MobileAppendResponse</returns>
        MobileAppendResponse AppendMobilePost(string contentType, string xApiKey, MobileAppendRequest mobileAppendRequest);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Stakkd.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="xApiKey"></param>
        /// <param name="mobileAppendRequest"></param>
        /// <returns>ApiResponse of MobileAppendResponse</returns>
        ApiResponse<MobileAppendResponse> AppendMobilePostWithHttpInfo(string contentType, string xApiKey, MobileAppendRequest mobileAppendRequest);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Stakkd.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="xApiKey"></param>
        /// <param name="phoneAppendRequest"></param>
        /// <returns>PhoneAppendResponse</returns>
        PhoneAppendResponse AppendPhonePost(string contentType, string xApiKey, PhoneAppendRequest phoneAppendRequest);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Stakkd.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="xApiKey"></param>
        /// <param name="phoneAppendRequest"></param>
        /// <returns>ApiResponse of PhoneAppendResponse</returns>
        ApiResponse<PhoneAppendResponse> AppendPhonePostWithHttpInfo(string contentType, string xApiKey, PhoneAppendRequest phoneAppendRequest);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Stakkd.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="xApiKey"></param>
        /// <param name="vehicleAppendRequest"></param>
        /// <returns>VehicleAppendResponse</returns>
        VehicleAppendResponse AppendVehiclePost(string contentType, string xApiKey, VehicleAppendRequest vehicleAppendRequest);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Stakkd.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="xApiKey"></param>
        /// <param name="vehicleAppendRequest"></param>
        /// <returns>ApiResponse of VehicleAppendResponse</returns>
        ApiResponse<VehicleAppendResponse> AppendVehiclePostWithHttpInfo(string contentType, string xApiKey, VehicleAppendRequest vehicleAppendRequest);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAppendApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Stakkd.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="xApiKey"></param>
        /// <param name="demographicsAppendRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DemographicsAppendResponse</returns>
        System.Threading.Tasks.Task<DemographicsAppendResponse> AppendDemographicsPostAsync(string contentType, string xApiKey, DemographicsAppendRequest demographicsAppendRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Stakkd.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="xApiKey"></param>
        /// <param name="demographicsAppendRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DemographicsAppendResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<DemographicsAppendResponse>> AppendDemographicsPostWithHttpInfoAsync(string contentType, string xApiKey, DemographicsAppendRequest demographicsAppendRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Stakkd.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="xApiKey"></param>
        /// <param name="emailAppendRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EmailAppendResponse</returns>
        System.Threading.Tasks.Task<EmailAppendResponse> AppendEmailPostAsync(string contentType, string xApiKey, EmailAppendRequest emailAppendRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Stakkd.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="xApiKey"></param>
        /// <param name="emailAppendRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EmailAppendResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<EmailAppendResponse>> AppendEmailPostWithHttpInfoAsync(string contentType, string xApiKey, EmailAppendRequest emailAppendRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Stakkd.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="xApiKey"></param>
        /// <param name="mobileAppendRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MobileAppendResponse</returns>
        System.Threading.Tasks.Task<MobileAppendResponse> AppendMobilePostAsync(string contentType, string xApiKey, MobileAppendRequest mobileAppendRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Stakkd.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="xApiKey"></param>
        /// <param name="mobileAppendRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MobileAppendResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<MobileAppendResponse>> AppendMobilePostWithHttpInfoAsync(string contentType, string xApiKey, MobileAppendRequest mobileAppendRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Stakkd.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="xApiKey"></param>
        /// <param name="phoneAppendRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PhoneAppendResponse</returns>
        System.Threading.Tasks.Task<PhoneAppendResponse> AppendPhonePostAsync(string contentType, string xApiKey, PhoneAppendRequest phoneAppendRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Stakkd.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="xApiKey"></param>
        /// <param name="phoneAppendRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PhoneAppendResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<PhoneAppendResponse>> AppendPhonePostWithHttpInfoAsync(string contentType, string xApiKey, PhoneAppendRequest phoneAppendRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Stakkd.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="xApiKey"></param>
        /// <param name="vehicleAppendRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of VehicleAppendResponse</returns>
        System.Threading.Tasks.Task<VehicleAppendResponse> AppendVehiclePostAsync(string contentType, string xApiKey, VehicleAppendRequest vehicleAppendRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Stakkd.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="xApiKey"></param>
        /// <param name="vehicleAppendRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (VehicleAppendResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<VehicleAppendResponse>> AppendVehiclePostWithHttpInfoAsync(string contentType, string xApiKey, VehicleAppendRequest vehicleAppendRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAppendApi : IAppendApiSync, IAppendApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class AppendApi : IAppendApi
    {
        private Stakkd.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="AppendApi"/> class.
        /// </summary>
        /// <returns></returns>
        public AppendApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AppendApi"/> class.
        /// </summary>
        /// <returns></returns>
        public AppendApi(string basePath)
        {
            this.Configuration = Stakkd.Client.Configuration.MergeConfigurations(
                Stakkd.Client.GlobalConfiguration.Instance,
                new Stakkd.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Stakkd.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Stakkd.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Stakkd.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AppendApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public AppendApi(Stakkd.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Stakkd.Client.Configuration.MergeConfigurations(
                Stakkd.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Stakkd.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Stakkd.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Stakkd.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AppendApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public AppendApi(Stakkd.Client.ISynchronousClient client, Stakkd.Client.IAsynchronousClient asyncClient, Stakkd.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Stakkd.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Stakkd.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Stakkd.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Stakkd.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Stakkd.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Stakkd.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="xApiKey"></param>
        /// <param name="demographicsAppendRequest"></param>
        /// <returns>DemographicsAppendResponse</returns>
        public DemographicsAppendResponse AppendDemographicsPost(string contentType, string xApiKey, DemographicsAppendRequest demographicsAppendRequest)
        {
            Stakkd.Client.ApiResponse<DemographicsAppendResponse> localVarResponse = AppendDemographicsPostWithHttpInfo(contentType, xApiKey, demographicsAppendRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Stakkd.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="xApiKey"></param>
        /// <param name="demographicsAppendRequest"></param>
        /// <returns>ApiResponse of DemographicsAppendResponse</returns>
        public Stakkd.Client.ApiResponse<DemographicsAppendResponse> AppendDemographicsPostWithHttpInfo(string contentType, string xApiKey, DemographicsAppendRequest demographicsAppendRequest)
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
            {
                throw new Stakkd.Client.ApiException(400, "Missing required parameter 'contentType' when calling AppendApi->AppendDemographicsPost");
            }

            // verify the required parameter 'xApiKey' is set
            if (xApiKey == null)
            {
                throw new Stakkd.Client.ApiException(400, "Missing required parameter 'xApiKey' when calling AppendApi->AppendDemographicsPost");
            }

            // verify the required parameter 'demographicsAppendRequest' is set
            if (demographicsAppendRequest == null)
            {
                throw new Stakkd.Client.ApiException(400, "Missing required parameter 'demographicsAppendRequest' when calling AppendApi->AppendDemographicsPost");
            }

            Stakkd.Client.RequestOptions localVarRequestOptions = new Stakkd.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Stakkd.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Stakkd.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.HeaderParameters.Add("Content-Type", Stakkd.Client.ClientUtils.ParameterToString(contentType)); // header parameter
            localVarRequestOptions.HeaderParameters.Add("x-api-key", Stakkd.Client.ClientUtils.ParameterToString(xApiKey)); // header parameter
            localVarRequestOptions.Data = demographicsAppendRequest;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<DemographicsAppendResponse>("/append/demographics", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AppendDemographicsPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Stakkd.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="xApiKey"></param>
        /// <param name="demographicsAppendRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DemographicsAppendResponse</returns>
        public async System.Threading.Tasks.Task<DemographicsAppendResponse> AppendDemographicsPostAsync(string contentType, string xApiKey, DemographicsAppendRequest demographicsAppendRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Stakkd.Client.ApiResponse<DemographicsAppendResponse> localVarResponse = await AppendDemographicsPostWithHttpInfoAsync(contentType, xApiKey, demographicsAppendRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Stakkd.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="xApiKey"></param>
        /// <param name="demographicsAppendRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DemographicsAppendResponse)</returns>
        public async System.Threading.Tasks.Task<Stakkd.Client.ApiResponse<DemographicsAppendResponse>> AppendDemographicsPostWithHttpInfoAsync(string contentType, string xApiKey, DemographicsAppendRequest demographicsAppendRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
            {
                throw new Stakkd.Client.ApiException(400, "Missing required parameter 'contentType' when calling AppendApi->AppendDemographicsPost");
            }

            // verify the required parameter 'xApiKey' is set
            if (xApiKey == null)
            {
                throw new Stakkd.Client.ApiException(400, "Missing required parameter 'xApiKey' when calling AppendApi->AppendDemographicsPost");
            }

            // verify the required parameter 'demographicsAppendRequest' is set
            if (demographicsAppendRequest == null)
            {
                throw new Stakkd.Client.ApiException(400, "Missing required parameter 'demographicsAppendRequest' when calling AppendApi->AppendDemographicsPost");
            }


            Stakkd.Client.RequestOptions localVarRequestOptions = new Stakkd.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Stakkd.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Stakkd.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.HeaderParameters.Add("Content-Type", Stakkd.Client.ClientUtils.ParameterToString(contentType)); // header parameter
            localVarRequestOptions.HeaderParameters.Add("x-api-key", Stakkd.Client.ClientUtils.ParameterToString(xApiKey)); // header parameter
            localVarRequestOptions.Data = demographicsAppendRequest;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<DemographicsAppendResponse>("/append/demographics", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AppendDemographicsPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Stakkd.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="xApiKey"></param>
        /// <param name="emailAppendRequest"></param>
        /// <returns>EmailAppendResponse</returns>
        public EmailAppendResponse AppendEmailPost(string contentType, string xApiKey, EmailAppendRequest emailAppendRequest)
        {
            Stakkd.Client.ApiResponse<EmailAppendResponse> localVarResponse = AppendEmailPostWithHttpInfo(contentType, xApiKey, emailAppendRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Stakkd.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="xApiKey"></param>
        /// <param name="emailAppendRequest"></param>
        /// <returns>ApiResponse of EmailAppendResponse</returns>
        public Stakkd.Client.ApiResponse<EmailAppendResponse> AppendEmailPostWithHttpInfo(string contentType, string xApiKey, EmailAppendRequest emailAppendRequest)
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
            {
                throw new Stakkd.Client.ApiException(400, "Missing required parameter 'contentType' when calling AppendApi->AppendEmailPost");
            }

            // verify the required parameter 'xApiKey' is set
            if (xApiKey == null)
            {
                throw new Stakkd.Client.ApiException(400, "Missing required parameter 'xApiKey' when calling AppendApi->AppendEmailPost");
            }

            // verify the required parameter 'emailAppendRequest' is set
            if (emailAppendRequest == null)
            {
                throw new Stakkd.Client.ApiException(400, "Missing required parameter 'emailAppendRequest' when calling AppendApi->AppendEmailPost");
            }

            Stakkd.Client.RequestOptions localVarRequestOptions = new Stakkd.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Stakkd.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Stakkd.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.HeaderParameters.Add("Content-Type", Stakkd.Client.ClientUtils.ParameterToString(contentType)); // header parameter
            localVarRequestOptions.HeaderParameters.Add("x-api-key", Stakkd.Client.ClientUtils.ParameterToString(xApiKey)); // header parameter
            localVarRequestOptions.Data = emailAppendRequest;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<EmailAppendResponse>("/append/email", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AppendEmailPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Stakkd.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="xApiKey"></param>
        /// <param name="emailAppendRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EmailAppendResponse</returns>
        public async System.Threading.Tasks.Task<EmailAppendResponse> AppendEmailPostAsync(string contentType, string xApiKey, EmailAppendRequest emailAppendRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Stakkd.Client.ApiResponse<EmailAppendResponse> localVarResponse = await AppendEmailPostWithHttpInfoAsync(contentType, xApiKey, emailAppendRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Stakkd.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="xApiKey"></param>
        /// <param name="emailAppendRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EmailAppendResponse)</returns>
        public async System.Threading.Tasks.Task<Stakkd.Client.ApiResponse<EmailAppendResponse>> AppendEmailPostWithHttpInfoAsync(string contentType, string xApiKey, EmailAppendRequest emailAppendRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
            {
                throw new Stakkd.Client.ApiException(400, "Missing required parameter 'contentType' when calling AppendApi->AppendEmailPost");
            }

            // verify the required parameter 'xApiKey' is set
            if (xApiKey == null)
            {
                throw new Stakkd.Client.ApiException(400, "Missing required parameter 'xApiKey' when calling AppendApi->AppendEmailPost");
            }

            // verify the required parameter 'emailAppendRequest' is set
            if (emailAppendRequest == null)
            {
                throw new Stakkd.Client.ApiException(400, "Missing required parameter 'emailAppendRequest' when calling AppendApi->AppendEmailPost");
            }


            Stakkd.Client.RequestOptions localVarRequestOptions = new Stakkd.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Stakkd.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Stakkd.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.HeaderParameters.Add("Content-Type", Stakkd.Client.ClientUtils.ParameterToString(contentType)); // header parameter
            localVarRequestOptions.HeaderParameters.Add("x-api-key", Stakkd.Client.ClientUtils.ParameterToString(xApiKey)); // header parameter
            localVarRequestOptions.Data = emailAppendRequest;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<EmailAppendResponse>("/append/email", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AppendEmailPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Stakkd.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="xApiKey"></param>
        /// <param name="mobileAppendRequest"></param>
        /// <returns>MobileAppendResponse</returns>
        public MobileAppendResponse AppendMobilePost(string contentType, string xApiKey, MobileAppendRequest mobileAppendRequest)
        {
            Stakkd.Client.ApiResponse<MobileAppendResponse> localVarResponse = AppendMobilePostWithHttpInfo(contentType, xApiKey, mobileAppendRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Stakkd.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="xApiKey"></param>
        /// <param name="mobileAppendRequest"></param>
        /// <returns>ApiResponse of MobileAppendResponse</returns>
        public Stakkd.Client.ApiResponse<MobileAppendResponse> AppendMobilePostWithHttpInfo(string contentType, string xApiKey, MobileAppendRequest mobileAppendRequest)
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
            {
                throw new Stakkd.Client.ApiException(400, "Missing required parameter 'contentType' when calling AppendApi->AppendMobilePost");
            }

            // verify the required parameter 'xApiKey' is set
            if (xApiKey == null)
            {
                throw new Stakkd.Client.ApiException(400, "Missing required parameter 'xApiKey' when calling AppendApi->AppendMobilePost");
            }

            // verify the required parameter 'mobileAppendRequest' is set
            if (mobileAppendRequest == null)
            {
                throw new Stakkd.Client.ApiException(400, "Missing required parameter 'mobileAppendRequest' when calling AppendApi->AppendMobilePost");
            }

            Stakkd.Client.RequestOptions localVarRequestOptions = new Stakkd.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Stakkd.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Stakkd.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.HeaderParameters.Add("Content-Type", Stakkd.Client.ClientUtils.ParameterToString(contentType)); // header parameter
            localVarRequestOptions.HeaderParameters.Add("x-api-key", Stakkd.Client.ClientUtils.ParameterToString(xApiKey)); // header parameter
            localVarRequestOptions.Data = mobileAppendRequest;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<MobileAppendResponse>("/append/mobile", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AppendMobilePost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Stakkd.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="xApiKey"></param>
        /// <param name="mobileAppendRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MobileAppendResponse</returns>
        public async System.Threading.Tasks.Task<MobileAppendResponse> AppendMobilePostAsync(string contentType, string xApiKey, MobileAppendRequest mobileAppendRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Stakkd.Client.ApiResponse<MobileAppendResponse> localVarResponse = await AppendMobilePostWithHttpInfoAsync(contentType, xApiKey, mobileAppendRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Stakkd.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="xApiKey"></param>
        /// <param name="mobileAppendRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MobileAppendResponse)</returns>
        public async System.Threading.Tasks.Task<Stakkd.Client.ApiResponse<MobileAppendResponse>> AppendMobilePostWithHttpInfoAsync(string contentType, string xApiKey, MobileAppendRequest mobileAppendRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
            {
                throw new Stakkd.Client.ApiException(400, "Missing required parameter 'contentType' when calling AppendApi->AppendMobilePost");
            }

            // verify the required parameter 'xApiKey' is set
            if (xApiKey == null)
            {
                throw new Stakkd.Client.ApiException(400, "Missing required parameter 'xApiKey' when calling AppendApi->AppendMobilePost");
            }

            // verify the required parameter 'mobileAppendRequest' is set
            if (mobileAppendRequest == null)
            {
                throw new Stakkd.Client.ApiException(400, "Missing required parameter 'mobileAppendRequest' when calling AppendApi->AppendMobilePost");
            }


            Stakkd.Client.RequestOptions localVarRequestOptions = new Stakkd.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Stakkd.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Stakkd.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.HeaderParameters.Add("Content-Type", Stakkd.Client.ClientUtils.ParameterToString(contentType)); // header parameter
            localVarRequestOptions.HeaderParameters.Add("x-api-key", Stakkd.Client.ClientUtils.ParameterToString(xApiKey)); // header parameter
            localVarRequestOptions.Data = mobileAppendRequest;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<MobileAppendResponse>("/append/mobile", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AppendMobilePost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Stakkd.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="xApiKey"></param>
        /// <param name="phoneAppendRequest"></param>
        /// <returns>PhoneAppendResponse</returns>
        public PhoneAppendResponse AppendPhonePost(string contentType, string xApiKey, PhoneAppendRequest phoneAppendRequest)
        {
            Stakkd.Client.ApiResponse<PhoneAppendResponse> localVarResponse = AppendPhonePostWithHttpInfo(contentType, xApiKey, phoneAppendRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Stakkd.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="xApiKey"></param>
        /// <param name="phoneAppendRequest"></param>
        /// <returns>ApiResponse of PhoneAppendResponse</returns>
        public Stakkd.Client.ApiResponse<PhoneAppendResponse> AppendPhonePostWithHttpInfo(string contentType, string xApiKey, PhoneAppendRequest phoneAppendRequest)
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
            {
                throw new Stakkd.Client.ApiException(400, "Missing required parameter 'contentType' when calling AppendApi->AppendPhonePost");
            }

            // verify the required parameter 'xApiKey' is set
            if (xApiKey == null)
            {
                throw new Stakkd.Client.ApiException(400, "Missing required parameter 'xApiKey' when calling AppendApi->AppendPhonePost");
            }

            // verify the required parameter 'phoneAppendRequest' is set
            if (phoneAppendRequest == null)
            {
                throw new Stakkd.Client.ApiException(400, "Missing required parameter 'phoneAppendRequest' when calling AppendApi->AppendPhonePost");
            }

            Stakkd.Client.RequestOptions localVarRequestOptions = new Stakkd.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Stakkd.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Stakkd.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.HeaderParameters.Add("Content-Type", Stakkd.Client.ClientUtils.ParameterToString(contentType)); // header parameter
            localVarRequestOptions.HeaderParameters.Add("x-api-key", Stakkd.Client.ClientUtils.ParameterToString(xApiKey)); // header parameter
            localVarRequestOptions.Data = phoneAppendRequest;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<PhoneAppendResponse>("/append/phone", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AppendPhonePost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Stakkd.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="xApiKey"></param>
        /// <param name="phoneAppendRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PhoneAppendResponse</returns>
        public async System.Threading.Tasks.Task<PhoneAppendResponse> AppendPhonePostAsync(string contentType, string xApiKey, PhoneAppendRequest phoneAppendRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Stakkd.Client.ApiResponse<PhoneAppendResponse> localVarResponse = await AppendPhonePostWithHttpInfoAsync(contentType, xApiKey, phoneAppendRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Stakkd.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="xApiKey"></param>
        /// <param name="phoneAppendRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PhoneAppendResponse)</returns>
        public async System.Threading.Tasks.Task<Stakkd.Client.ApiResponse<PhoneAppendResponse>> AppendPhonePostWithHttpInfoAsync(string contentType, string xApiKey, PhoneAppendRequest phoneAppendRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
            {
                throw new Stakkd.Client.ApiException(400, "Missing required parameter 'contentType' when calling AppendApi->AppendPhonePost");
            }

            // verify the required parameter 'xApiKey' is set
            if (xApiKey == null)
            {
                throw new Stakkd.Client.ApiException(400, "Missing required parameter 'xApiKey' when calling AppendApi->AppendPhonePost");
            }

            // verify the required parameter 'phoneAppendRequest' is set
            if (phoneAppendRequest == null)
            {
                throw new Stakkd.Client.ApiException(400, "Missing required parameter 'phoneAppendRequest' when calling AppendApi->AppendPhonePost");
            }


            Stakkd.Client.RequestOptions localVarRequestOptions = new Stakkd.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Stakkd.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Stakkd.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.HeaderParameters.Add("Content-Type", Stakkd.Client.ClientUtils.ParameterToString(contentType)); // header parameter
            localVarRequestOptions.HeaderParameters.Add("x-api-key", Stakkd.Client.ClientUtils.ParameterToString(xApiKey)); // header parameter
            localVarRequestOptions.Data = phoneAppendRequest;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<PhoneAppendResponse>("/append/phone", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AppendPhonePost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Stakkd.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="xApiKey"></param>
        /// <param name="vehicleAppendRequest"></param>
        /// <returns>VehicleAppendResponse</returns>
        public VehicleAppendResponse AppendVehiclePost(string contentType, string xApiKey, VehicleAppendRequest vehicleAppendRequest)
        {
            Stakkd.Client.ApiResponse<VehicleAppendResponse> localVarResponse = AppendVehiclePostWithHttpInfo(contentType, xApiKey, vehicleAppendRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Stakkd.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="xApiKey"></param>
        /// <param name="vehicleAppendRequest"></param>
        /// <returns>ApiResponse of VehicleAppendResponse</returns>
        public Stakkd.Client.ApiResponse<VehicleAppendResponse> AppendVehiclePostWithHttpInfo(string contentType, string xApiKey, VehicleAppendRequest vehicleAppendRequest)
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
            {
                throw new Stakkd.Client.ApiException(400, "Missing required parameter 'contentType' when calling AppendApi->AppendVehiclePost");
            }

            // verify the required parameter 'xApiKey' is set
            if (xApiKey == null)
            {
                throw new Stakkd.Client.ApiException(400, "Missing required parameter 'xApiKey' when calling AppendApi->AppendVehiclePost");
            }

            // verify the required parameter 'vehicleAppendRequest' is set
            if (vehicleAppendRequest == null)
            {
                throw new Stakkd.Client.ApiException(400, "Missing required parameter 'vehicleAppendRequest' when calling AppendApi->AppendVehiclePost");
            }

            Stakkd.Client.RequestOptions localVarRequestOptions = new Stakkd.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Stakkd.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Stakkd.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.HeaderParameters.Add("Content-Type", Stakkd.Client.ClientUtils.ParameterToString(contentType)); // header parameter
            localVarRequestOptions.HeaderParameters.Add("x-api-key", Stakkd.Client.ClientUtils.ParameterToString(xApiKey)); // header parameter
            localVarRequestOptions.Data = vehicleAppendRequest;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<VehicleAppendResponse>("/append/vehicle", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AppendVehiclePost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Stakkd.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="xApiKey"></param>
        /// <param name="vehicleAppendRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of VehicleAppendResponse</returns>
        public async System.Threading.Tasks.Task<VehicleAppendResponse> AppendVehiclePostAsync(string contentType, string xApiKey, VehicleAppendRequest vehicleAppendRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Stakkd.Client.ApiResponse<VehicleAppendResponse> localVarResponse = await AppendVehiclePostWithHttpInfoAsync(contentType, xApiKey, vehicleAppendRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Stakkd.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="xApiKey"></param>
        /// <param name="vehicleAppendRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (VehicleAppendResponse)</returns>
        public async System.Threading.Tasks.Task<Stakkd.Client.ApiResponse<VehicleAppendResponse>> AppendVehiclePostWithHttpInfoAsync(string contentType, string xApiKey, VehicleAppendRequest vehicleAppendRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
            {
                throw new Stakkd.Client.ApiException(400, "Missing required parameter 'contentType' when calling AppendApi->AppendVehiclePost");
            }

            // verify the required parameter 'xApiKey' is set
            if (xApiKey == null)
            {
                throw new Stakkd.Client.ApiException(400, "Missing required parameter 'xApiKey' when calling AppendApi->AppendVehiclePost");
            }

            // verify the required parameter 'vehicleAppendRequest' is set
            if (vehicleAppendRequest == null)
            {
                throw new Stakkd.Client.ApiException(400, "Missing required parameter 'vehicleAppendRequest' when calling AppendApi->AppendVehiclePost");
            }


            Stakkd.Client.RequestOptions localVarRequestOptions = new Stakkd.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Stakkd.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Stakkd.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.HeaderParameters.Add("Content-Type", Stakkd.Client.ClientUtils.ParameterToString(contentType)); // header parameter
            localVarRequestOptions.HeaderParameters.Add("x-api-key", Stakkd.Client.ClientUtils.ParameterToString(xApiKey)); // header parameter
            localVarRequestOptions.Data = vehicleAppendRequest;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<VehicleAppendResponse>("/append/vehicle", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AppendVehiclePost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
