/*
 * Stakkd API
 *
 * # Introduction The Stakkd platform provides comprehensive data services that meet the business objectives of organizations ranging from Fortune 500 companies to startups. Our clients work in an array of industries, including insurance, financial, legal, travel, hospitality, retail, health, media, and telecommunications.  The Stakkd API is documented using the Open API 3.0.1 standard.  All endpoints are available at https://api.stakkd.io/v1. Detailed documentation for each endpoint is below, including the full URL for the endpoint.  # Account Types The API supports two different account types, each with different permissions.  ## Paid Account Paid accounts provide unlimited access to all of the URIs.  ## Trial Account Trial Accounts have a limited number of queries to the APIs. Keep in mind that queries which do not return results still count against the Trial Account query limits. Trial Accounts are temporary, but can be upgraded or extended by contacting [support@stakkd.io](mailto:support@stakkd.io) 
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Stakkd.Client;
using Stakkd.Stakkd.model;

namespace Stakkd.Stakkd
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ILookupApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Stakkd.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="xApiKey"></param>
        /// <param name="emailLookupRequest"></param>
        /// <returns>LookupResponse</returns>
        LookupResponse LookupEmailPost(string contentType, string xApiKey, EmailLookupRequest emailLookupRequest);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Stakkd.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="xApiKey"></param>
        /// <param name="emailLookupRequest"></param>
        /// <returns>ApiResponse of LookupResponse</returns>
        ApiResponse<LookupResponse> LookupEmailPostWithHttpInfo(string contentType, string xApiKey, EmailLookupRequest emailLookupRequest);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Stakkd.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="xApiKey"></param>
        /// <param name="ipLookupRequest"></param>
        /// <returns>IpLookupResponse</returns>
        IpLookupResponse LookupIpPost(string contentType, string xApiKey, IpLookupRequest ipLookupRequest);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Stakkd.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="xApiKey"></param>
        /// <param name="ipLookupRequest"></param>
        /// <returns>ApiResponse of IpLookupResponse</returns>
        ApiResponse<IpLookupResponse> LookupIpPostWithHttpInfo(string contentType, string xApiKey, IpLookupRequest ipLookupRequest);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Stakkd.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="xApiKey"></param>
        /// <param name="phoneLookupRequest"></param>
        /// <returns>LookupResponse</returns>
        LookupResponse LookupMobilePost(string contentType, string xApiKey, PhoneLookupRequest phoneLookupRequest);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Stakkd.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="xApiKey"></param>
        /// <param name="phoneLookupRequest"></param>
        /// <returns>ApiResponse of LookupResponse</returns>
        ApiResponse<LookupResponse> LookupMobilePostWithHttpInfo(string contentType, string xApiKey, PhoneLookupRequest phoneLookupRequest);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Stakkd.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="xApiKey"></param>
        /// <param name="phoneLookupRequest"></param>
        /// <returns>LookupResponse</returns>
        LookupResponse LookupPhonePost(string contentType, string xApiKey, PhoneLookupRequest phoneLookupRequest);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Stakkd.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="xApiKey"></param>
        /// <param name="phoneLookupRequest"></param>
        /// <returns>ApiResponse of LookupResponse</returns>
        ApiResponse<LookupResponse> LookupPhonePostWithHttpInfo(string contentType, string xApiKey, PhoneLookupRequest phoneLookupRequest);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Stakkd.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="xApiKey"></param>
        /// <param name="skipTracingLookupRequest"></param>
        /// <returns>SkipTracingLookupResponse</returns>
        SkipTracingLookupResponse LookupSkipTracingPost(string contentType, string xApiKey, SkipTracingLookupRequest skipTracingLookupRequest);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Stakkd.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="xApiKey"></param>
        /// <param name="skipTracingLookupRequest"></param>
        /// <returns>ApiResponse of SkipTracingLookupResponse</returns>
        ApiResponse<SkipTracingLookupResponse> LookupSkipTracingPostWithHttpInfo(string contentType, string xApiKey, SkipTracingLookupRequest skipTracingLookupRequest);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ILookupApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Stakkd.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="xApiKey"></param>
        /// <param name="emailLookupRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of LookupResponse</returns>
        System.Threading.Tasks.Task<LookupResponse> LookupEmailPostAsync(string contentType, string xApiKey, EmailLookupRequest emailLookupRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Stakkd.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="xApiKey"></param>
        /// <param name="emailLookupRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (LookupResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<LookupResponse>> LookupEmailPostWithHttpInfoAsync(string contentType, string xApiKey, EmailLookupRequest emailLookupRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Stakkd.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="xApiKey"></param>
        /// <param name="ipLookupRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of IpLookupResponse</returns>
        System.Threading.Tasks.Task<IpLookupResponse> LookupIpPostAsync(string contentType, string xApiKey, IpLookupRequest ipLookupRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Stakkd.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="xApiKey"></param>
        /// <param name="ipLookupRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (IpLookupResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<IpLookupResponse>> LookupIpPostWithHttpInfoAsync(string contentType, string xApiKey, IpLookupRequest ipLookupRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Stakkd.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="xApiKey"></param>
        /// <param name="phoneLookupRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of LookupResponse</returns>
        System.Threading.Tasks.Task<LookupResponse> LookupMobilePostAsync(string contentType, string xApiKey, PhoneLookupRequest phoneLookupRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Stakkd.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="xApiKey"></param>
        /// <param name="phoneLookupRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (LookupResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<LookupResponse>> LookupMobilePostWithHttpInfoAsync(string contentType, string xApiKey, PhoneLookupRequest phoneLookupRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Stakkd.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="xApiKey"></param>
        /// <param name="phoneLookupRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of LookupResponse</returns>
        System.Threading.Tasks.Task<LookupResponse> LookupPhonePostAsync(string contentType, string xApiKey, PhoneLookupRequest phoneLookupRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Stakkd.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="xApiKey"></param>
        /// <param name="phoneLookupRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (LookupResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<LookupResponse>> LookupPhonePostWithHttpInfoAsync(string contentType, string xApiKey, PhoneLookupRequest phoneLookupRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Stakkd.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="xApiKey"></param>
        /// <param name="skipTracingLookupRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SkipTracingLookupResponse</returns>
        System.Threading.Tasks.Task<SkipTracingLookupResponse> LookupSkipTracingPostAsync(string contentType, string xApiKey, SkipTracingLookupRequest skipTracingLookupRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Stakkd.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="xApiKey"></param>
        /// <param name="skipTracingLookupRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SkipTracingLookupResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SkipTracingLookupResponse>> LookupSkipTracingPostWithHttpInfoAsync(string contentType, string xApiKey, SkipTracingLookupRequest skipTracingLookupRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ILookupApi : ILookupApiSync, ILookupApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class LookupApi : ILookupApi
    {
        private Stakkd.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="LookupApi"/> class.
        /// </summary>
        /// <returns></returns>
        public LookupApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="LookupApi"/> class.
        /// </summary>
        /// <returns></returns>
        public LookupApi(string basePath)
        {
            this.Configuration = Stakkd.Client.Configuration.MergeConfigurations(
                Stakkd.Client.GlobalConfiguration.Instance,
                new Stakkd.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Stakkd.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Stakkd.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Stakkd.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="LookupApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public LookupApi(Stakkd.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Stakkd.Client.Configuration.MergeConfigurations(
                Stakkd.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Stakkd.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Stakkd.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Stakkd.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="LookupApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public LookupApi(Stakkd.Client.ISynchronousClient client, Stakkd.Client.IAsynchronousClient asyncClient, Stakkd.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Stakkd.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Stakkd.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Stakkd.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Stakkd.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Stakkd.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Stakkd.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="xApiKey"></param>
        /// <param name="emailLookupRequest"></param>
        /// <returns>LookupResponse</returns>
        public LookupResponse LookupEmailPost(string contentType, string xApiKey, EmailLookupRequest emailLookupRequest)
        {
            Stakkd.Client.ApiResponse<LookupResponse> localVarResponse = LookupEmailPostWithHttpInfo(contentType, xApiKey, emailLookupRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Stakkd.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="xApiKey"></param>
        /// <param name="emailLookupRequest"></param>
        /// <returns>ApiResponse of LookupResponse</returns>
        public Stakkd.Client.ApiResponse<LookupResponse> LookupEmailPostWithHttpInfo(string contentType, string xApiKey, EmailLookupRequest emailLookupRequest)
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
            {
                throw new Stakkd.Client.ApiException(400, "Missing required parameter 'contentType' when calling LookupApi->LookupEmailPost");
            }

            // verify the required parameter 'xApiKey' is set
            if (xApiKey == null)
            {
                throw new Stakkd.Client.ApiException(400, "Missing required parameter 'xApiKey' when calling LookupApi->LookupEmailPost");
            }

            // verify the required parameter 'emailLookupRequest' is set
            if (emailLookupRequest == null)
            {
                throw new Stakkd.Client.ApiException(400, "Missing required parameter 'emailLookupRequest' when calling LookupApi->LookupEmailPost");
            }

            Stakkd.Client.RequestOptions localVarRequestOptions = new Stakkd.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Stakkd.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Stakkd.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.HeaderParameters.Add("Content-Type", Stakkd.Client.ClientUtils.ParameterToString(contentType)); // header parameter
            localVarRequestOptions.HeaderParameters.Add("x-api-key", Stakkd.Client.ClientUtils.ParameterToString(xApiKey)); // header parameter
            localVarRequestOptions.Data = emailLookupRequest;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<LookupResponse>("/lookup/email", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("LookupEmailPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Stakkd.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="xApiKey"></param>
        /// <param name="emailLookupRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of LookupResponse</returns>
        public async System.Threading.Tasks.Task<LookupResponse> LookupEmailPostAsync(string contentType, string xApiKey, EmailLookupRequest emailLookupRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Stakkd.Client.ApiResponse<LookupResponse> localVarResponse = await LookupEmailPostWithHttpInfoAsync(contentType, xApiKey, emailLookupRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Stakkd.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="xApiKey"></param>
        /// <param name="emailLookupRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (LookupResponse)</returns>
        public async System.Threading.Tasks.Task<Stakkd.Client.ApiResponse<LookupResponse>> LookupEmailPostWithHttpInfoAsync(string contentType, string xApiKey, EmailLookupRequest emailLookupRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
            {
                throw new Stakkd.Client.ApiException(400, "Missing required parameter 'contentType' when calling LookupApi->LookupEmailPost");
            }

            // verify the required parameter 'xApiKey' is set
            if (xApiKey == null)
            {
                throw new Stakkd.Client.ApiException(400, "Missing required parameter 'xApiKey' when calling LookupApi->LookupEmailPost");
            }

            // verify the required parameter 'emailLookupRequest' is set
            if (emailLookupRequest == null)
            {
                throw new Stakkd.Client.ApiException(400, "Missing required parameter 'emailLookupRequest' when calling LookupApi->LookupEmailPost");
            }


            Stakkd.Client.RequestOptions localVarRequestOptions = new Stakkd.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Stakkd.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Stakkd.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.HeaderParameters.Add("Content-Type", Stakkd.Client.ClientUtils.ParameterToString(contentType)); // header parameter
            localVarRequestOptions.HeaderParameters.Add("x-api-key", Stakkd.Client.ClientUtils.ParameterToString(xApiKey)); // header parameter
            localVarRequestOptions.Data = emailLookupRequest;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<LookupResponse>("/lookup/email", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("LookupEmailPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Stakkd.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="xApiKey"></param>
        /// <param name="ipLookupRequest"></param>
        /// <returns>IpLookupResponse</returns>
        public IpLookupResponse LookupIpPost(string contentType, string xApiKey, IpLookupRequest ipLookupRequest)
        {
            Stakkd.Client.ApiResponse<IpLookupResponse> localVarResponse = LookupIpPostWithHttpInfo(contentType, xApiKey, ipLookupRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Stakkd.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="xApiKey"></param>
        /// <param name="ipLookupRequest"></param>
        /// <returns>ApiResponse of IpLookupResponse</returns>
        public Stakkd.Client.ApiResponse<IpLookupResponse> LookupIpPostWithHttpInfo(string contentType, string xApiKey, IpLookupRequest ipLookupRequest)
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
            {
                throw new Stakkd.Client.ApiException(400, "Missing required parameter 'contentType' when calling LookupApi->LookupIpPost");
            }

            // verify the required parameter 'xApiKey' is set
            if (xApiKey == null)
            {
                throw new Stakkd.Client.ApiException(400, "Missing required parameter 'xApiKey' when calling LookupApi->LookupIpPost");
            }

            // verify the required parameter 'ipLookupRequest' is set
            if (ipLookupRequest == null)
            {
                throw new Stakkd.Client.ApiException(400, "Missing required parameter 'ipLookupRequest' when calling LookupApi->LookupIpPost");
            }

            Stakkd.Client.RequestOptions localVarRequestOptions = new Stakkd.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Stakkd.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Stakkd.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.HeaderParameters.Add("Content-Type", Stakkd.Client.ClientUtils.ParameterToString(contentType)); // header parameter
            localVarRequestOptions.HeaderParameters.Add("x-api-key", Stakkd.Client.ClientUtils.ParameterToString(xApiKey)); // header parameter
            localVarRequestOptions.Data = ipLookupRequest;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<IpLookupResponse>("/lookup/ip", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("LookupIpPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Stakkd.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="xApiKey"></param>
        /// <param name="ipLookupRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of IpLookupResponse</returns>
        public async System.Threading.Tasks.Task<IpLookupResponse> LookupIpPostAsync(string contentType, string xApiKey, IpLookupRequest ipLookupRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Stakkd.Client.ApiResponse<IpLookupResponse> localVarResponse = await LookupIpPostWithHttpInfoAsync(contentType, xApiKey, ipLookupRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Stakkd.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="xApiKey"></param>
        /// <param name="ipLookupRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (IpLookupResponse)</returns>
        public async System.Threading.Tasks.Task<Stakkd.Client.ApiResponse<IpLookupResponse>> LookupIpPostWithHttpInfoAsync(string contentType, string xApiKey, IpLookupRequest ipLookupRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
            {
                throw new Stakkd.Client.ApiException(400, "Missing required parameter 'contentType' when calling LookupApi->LookupIpPost");
            }

            // verify the required parameter 'xApiKey' is set
            if (xApiKey == null)
            {
                throw new Stakkd.Client.ApiException(400, "Missing required parameter 'xApiKey' when calling LookupApi->LookupIpPost");
            }

            // verify the required parameter 'ipLookupRequest' is set
            if (ipLookupRequest == null)
            {
                throw new Stakkd.Client.ApiException(400, "Missing required parameter 'ipLookupRequest' when calling LookupApi->LookupIpPost");
            }


            Stakkd.Client.RequestOptions localVarRequestOptions = new Stakkd.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Stakkd.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Stakkd.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.HeaderParameters.Add("Content-Type", Stakkd.Client.ClientUtils.ParameterToString(contentType)); // header parameter
            localVarRequestOptions.HeaderParameters.Add("x-api-key", Stakkd.Client.ClientUtils.ParameterToString(xApiKey)); // header parameter
            localVarRequestOptions.Data = ipLookupRequest;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<IpLookupResponse>("/lookup/ip", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("LookupIpPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Stakkd.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="xApiKey"></param>
        /// <param name="phoneLookupRequest"></param>
        /// <returns>LookupResponse</returns>
        public LookupResponse LookupMobilePost(string contentType, string xApiKey, PhoneLookupRequest phoneLookupRequest)
        {
            Stakkd.Client.ApiResponse<LookupResponse> localVarResponse = LookupMobilePostWithHttpInfo(contentType, xApiKey, phoneLookupRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Stakkd.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="xApiKey"></param>
        /// <param name="phoneLookupRequest"></param>
        /// <returns>ApiResponse of LookupResponse</returns>
        public Stakkd.Client.ApiResponse<LookupResponse> LookupMobilePostWithHttpInfo(string contentType, string xApiKey, PhoneLookupRequest phoneLookupRequest)
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
            {
                throw new Stakkd.Client.ApiException(400, "Missing required parameter 'contentType' when calling LookupApi->LookupMobilePost");
            }

            // verify the required parameter 'xApiKey' is set
            if (xApiKey == null)
            {
                throw new Stakkd.Client.ApiException(400, "Missing required parameter 'xApiKey' when calling LookupApi->LookupMobilePost");
            }

            // verify the required parameter 'phoneLookupRequest' is set
            if (phoneLookupRequest == null)
            {
                throw new Stakkd.Client.ApiException(400, "Missing required parameter 'phoneLookupRequest' when calling LookupApi->LookupMobilePost");
            }

            Stakkd.Client.RequestOptions localVarRequestOptions = new Stakkd.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Stakkd.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Stakkd.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.HeaderParameters.Add("Content-Type", Stakkd.Client.ClientUtils.ParameterToString(contentType)); // header parameter
            localVarRequestOptions.HeaderParameters.Add("x-api-key", Stakkd.Client.ClientUtils.ParameterToString(xApiKey)); // header parameter
            localVarRequestOptions.Data = phoneLookupRequest;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<LookupResponse>("/lookup/mobile", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("LookupMobilePost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Stakkd.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="xApiKey"></param>
        /// <param name="phoneLookupRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of LookupResponse</returns>
        public async System.Threading.Tasks.Task<LookupResponse> LookupMobilePostAsync(string contentType, string xApiKey, PhoneLookupRequest phoneLookupRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Stakkd.Client.ApiResponse<LookupResponse> localVarResponse = await LookupMobilePostWithHttpInfoAsync(contentType, xApiKey, phoneLookupRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Stakkd.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="xApiKey"></param>
        /// <param name="phoneLookupRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (LookupResponse)</returns>
        public async System.Threading.Tasks.Task<Stakkd.Client.ApiResponse<LookupResponse>> LookupMobilePostWithHttpInfoAsync(string contentType, string xApiKey, PhoneLookupRequest phoneLookupRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
            {
                throw new Stakkd.Client.ApiException(400, "Missing required parameter 'contentType' when calling LookupApi->LookupMobilePost");
            }

            // verify the required parameter 'xApiKey' is set
            if (xApiKey == null)
            {
                throw new Stakkd.Client.ApiException(400, "Missing required parameter 'xApiKey' when calling LookupApi->LookupMobilePost");
            }

            // verify the required parameter 'phoneLookupRequest' is set
            if (phoneLookupRequest == null)
            {
                throw new Stakkd.Client.ApiException(400, "Missing required parameter 'phoneLookupRequest' when calling LookupApi->LookupMobilePost");
            }


            Stakkd.Client.RequestOptions localVarRequestOptions = new Stakkd.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Stakkd.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Stakkd.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.HeaderParameters.Add("Content-Type", Stakkd.Client.ClientUtils.ParameterToString(contentType)); // header parameter
            localVarRequestOptions.HeaderParameters.Add("x-api-key", Stakkd.Client.ClientUtils.ParameterToString(xApiKey)); // header parameter
            localVarRequestOptions.Data = phoneLookupRequest;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<LookupResponse>("/lookup/mobile", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("LookupMobilePost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Stakkd.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="xApiKey"></param>
        /// <param name="phoneLookupRequest"></param>
        /// <returns>LookupResponse</returns>
        public LookupResponse LookupPhonePost(string contentType, string xApiKey, PhoneLookupRequest phoneLookupRequest)
        {
            Stakkd.Client.ApiResponse<LookupResponse> localVarResponse = LookupPhonePostWithHttpInfo(contentType, xApiKey, phoneLookupRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Stakkd.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="xApiKey"></param>
        /// <param name="phoneLookupRequest"></param>
        /// <returns>ApiResponse of LookupResponse</returns>
        public Stakkd.Client.ApiResponse<LookupResponse> LookupPhonePostWithHttpInfo(string contentType, string xApiKey, PhoneLookupRequest phoneLookupRequest)
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
            {
                throw new Stakkd.Client.ApiException(400, "Missing required parameter 'contentType' when calling LookupApi->LookupPhonePost");
            }

            // verify the required parameter 'xApiKey' is set
            if (xApiKey == null)
            {
                throw new Stakkd.Client.ApiException(400, "Missing required parameter 'xApiKey' when calling LookupApi->LookupPhonePost");
            }

            // verify the required parameter 'phoneLookupRequest' is set
            if (phoneLookupRequest == null)
            {
                throw new Stakkd.Client.ApiException(400, "Missing required parameter 'phoneLookupRequest' when calling LookupApi->LookupPhonePost");
            }

            Stakkd.Client.RequestOptions localVarRequestOptions = new Stakkd.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Stakkd.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Stakkd.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.HeaderParameters.Add("Content-Type", Stakkd.Client.ClientUtils.ParameterToString(contentType)); // header parameter
            localVarRequestOptions.HeaderParameters.Add("x-api-key", Stakkd.Client.ClientUtils.ParameterToString(xApiKey)); // header parameter
            localVarRequestOptions.Data = phoneLookupRequest;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<LookupResponse>("/lookup/phone", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("LookupPhonePost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Stakkd.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="xApiKey"></param>
        /// <param name="phoneLookupRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of LookupResponse</returns>
        public async System.Threading.Tasks.Task<LookupResponse> LookupPhonePostAsync(string contentType, string xApiKey, PhoneLookupRequest phoneLookupRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Stakkd.Client.ApiResponse<LookupResponse> localVarResponse = await LookupPhonePostWithHttpInfoAsync(contentType, xApiKey, phoneLookupRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Stakkd.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="xApiKey"></param>
        /// <param name="phoneLookupRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (LookupResponse)</returns>
        public async System.Threading.Tasks.Task<Stakkd.Client.ApiResponse<LookupResponse>> LookupPhonePostWithHttpInfoAsync(string contentType, string xApiKey, PhoneLookupRequest phoneLookupRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
            {
                throw new Stakkd.Client.ApiException(400, "Missing required parameter 'contentType' when calling LookupApi->LookupPhonePost");
            }

            // verify the required parameter 'xApiKey' is set
            if (xApiKey == null)
            {
                throw new Stakkd.Client.ApiException(400, "Missing required parameter 'xApiKey' when calling LookupApi->LookupPhonePost");
            }

            // verify the required parameter 'phoneLookupRequest' is set
            if (phoneLookupRequest == null)
            {
                throw new Stakkd.Client.ApiException(400, "Missing required parameter 'phoneLookupRequest' when calling LookupApi->LookupPhonePost");
            }


            Stakkd.Client.RequestOptions localVarRequestOptions = new Stakkd.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Stakkd.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Stakkd.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.HeaderParameters.Add("Content-Type", Stakkd.Client.ClientUtils.ParameterToString(contentType)); // header parameter
            localVarRequestOptions.HeaderParameters.Add("x-api-key", Stakkd.Client.ClientUtils.ParameterToString(xApiKey)); // header parameter
            localVarRequestOptions.Data = phoneLookupRequest;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<LookupResponse>("/lookup/phone", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("LookupPhonePost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Stakkd.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="xApiKey"></param>
        /// <param name="skipTracingLookupRequest"></param>
        /// <returns>SkipTracingLookupResponse</returns>
        public SkipTracingLookupResponse LookupSkipTracingPost(string contentType, string xApiKey, SkipTracingLookupRequest skipTracingLookupRequest)
        {
            Stakkd.Client.ApiResponse<SkipTracingLookupResponse> localVarResponse = LookupSkipTracingPostWithHttpInfo(contentType, xApiKey, skipTracingLookupRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Stakkd.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="xApiKey"></param>
        /// <param name="skipTracingLookupRequest"></param>
        /// <returns>ApiResponse of SkipTracingLookupResponse</returns>
        public Stakkd.Client.ApiResponse<SkipTracingLookupResponse> LookupSkipTracingPostWithHttpInfo(string contentType, string xApiKey, SkipTracingLookupRequest skipTracingLookupRequest)
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
            {
                throw new Stakkd.Client.ApiException(400, "Missing required parameter 'contentType' when calling LookupApi->LookupSkipTracingPost");
            }

            // verify the required parameter 'xApiKey' is set
            if (xApiKey == null)
            {
                throw new Stakkd.Client.ApiException(400, "Missing required parameter 'xApiKey' when calling LookupApi->LookupSkipTracingPost");
            }

            // verify the required parameter 'skipTracingLookupRequest' is set
            if (skipTracingLookupRequest == null)
            {
                throw new Stakkd.Client.ApiException(400, "Missing required parameter 'skipTracingLookupRequest' when calling LookupApi->LookupSkipTracingPost");
            }

            Stakkd.Client.RequestOptions localVarRequestOptions = new Stakkd.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Stakkd.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Stakkd.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.HeaderParameters.Add("Content-Type", Stakkd.Client.ClientUtils.ParameterToString(contentType)); // header parameter
            localVarRequestOptions.HeaderParameters.Add("x-api-key", Stakkd.Client.ClientUtils.ParameterToString(xApiKey)); // header parameter
            localVarRequestOptions.Data = skipTracingLookupRequest;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<SkipTracingLookupResponse>("/lookup/skip-tracing", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("LookupSkipTracingPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Stakkd.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="xApiKey"></param>
        /// <param name="skipTracingLookupRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SkipTracingLookupResponse</returns>
        public async System.Threading.Tasks.Task<SkipTracingLookupResponse> LookupSkipTracingPostAsync(string contentType, string xApiKey, SkipTracingLookupRequest skipTracingLookupRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Stakkd.Client.ApiResponse<SkipTracingLookupResponse> localVarResponse = await LookupSkipTracingPostWithHttpInfoAsync(contentType, xApiKey, skipTracingLookupRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Stakkd.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="xApiKey"></param>
        /// <param name="skipTracingLookupRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SkipTracingLookupResponse)</returns>
        public async System.Threading.Tasks.Task<Stakkd.Client.ApiResponse<SkipTracingLookupResponse>> LookupSkipTracingPostWithHttpInfoAsync(string contentType, string xApiKey, SkipTracingLookupRequest skipTracingLookupRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
            {
                throw new Stakkd.Client.ApiException(400, "Missing required parameter 'contentType' when calling LookupApi->LookupSkipTracingPost");
            }

            // verify the required parameter 'xApiKey' is set
            if (xApiKey == null)
            {
                throw new Stakkd.Client.ApiException(400, "Missing required parameter 'xApiKey' when calling LookupApi->LookupSkipTracingPost");
            }

            // verify the required parameter 'skipTracingLookupRequest' is set
            if (skipTracingLookupRequest == null)
            {
                throw new Stakkd.Client.ApiException(400, "Missing required parameter 'skipTracingLookupRequest' when calling LookupApi->LookupSkipTracingPost");
            }


            Stakkd.Client.RequestOptions localVarRequestOptions = new Stakkd.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Stakkd.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Stakkd.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.HeaderParameters.Add("Content-Type", Stakkd.Client.ClientUtils.ParameterToString(contentType)); // header parameter
            localVarRequestOptions.HeaderParameters.Add("x-api-key", Stakkd.Client.ClientUtils.ParameterToString(xApiKey)); // header parameter
            localVarRequestOptions.Data = skipTracingLookupRequest;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<SkipTracingLookupResponse>("/lookup/skip-tracing", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("LookupSkipTracingPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
