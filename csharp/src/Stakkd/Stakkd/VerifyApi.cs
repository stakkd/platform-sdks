/*
 * Stakkd API
 *
 * # Introduction The Stakkd platform provides comprehensive data services that meet the business objectives of organizations ranging from Fortune 500 companies to startups. Our clients work in an array of industries, including insurance, financial, legal, travel, hospitality, retail, health, media, and telecommunications.  The Stakkd API is documented using the Open API 3.0.1 standard.  All endpoints are available at https://api.stakkd.io/v1. Detailed documentation for each endpoint is below, including the full URL for the endpoint.  # Account Types The API supports two different account types, each with different permissions.  ## Paid Account Paid accounts provide unlimited access to all of the URIs.  ## Trial Account Trial Accounts have a limited number of queries to the APIs. Keep in mind that queries which do not return results still count against the Trial Account query limits. Trial Accounts are temporary, but can be upgraded or extended by contacting [support@stakkd.io](mailto:support@stakkd.io) 
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Stakkd.Client;
using Stakkd.Stakkd.model;

namespace Stakkd.Stakkd
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IVerifyApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Stakkd.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="xApiKey"></param>
        /// <param name="disconnectVerifyRequest"></param>
        /// <returns>DisconnectVerifyResponse</returns>
        DisconnectVerifyResponse VerifyDisconnectPost(string contentType, string xApiKey, DisconnectVerifyRequest disconnectVerifyRequest);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Stakkd.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="xApiKey"></param>
        /// <param name="disconnectVerifyRequest"></param>
        /// <returns>ApiResponse of DisconnectVerifyResponse</returns>
        ApiResponse<DisconnectVerifyResponse> VerifyDisconnectPostWithHttpInfo(string contentType, string xApiKey, DisconnectVerifyRequest disconnectVerifyRequest);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Stakkd.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="xApiKey"></param>
        /// <param name="emailVerifyRequest"></param>
        /// <returns>EmailVerifyResponse</returns>
        EmailVerifyResponse VerifyEmailPost(string contentType, string xApiKey, EmailVerifyRequest emailVerifyRequest);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Stakkd.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="xApiKey"></param>
        /// <param name="emailVerifyRequest"></param>
        /// <returns>ApiResponse of EmailVerifyResponse</returns>
        ApiResponse<EmailVerifyResponse> VerifyEmailPostWithHttpInfo(string contentType, string xApiKey, EmailVerifyRequest emailVerifyRequest);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Stakkd.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="xApiKey"></param>
        /// <param name="phoneVerifyRequest"></param>
        /// <returns>PhoneVerifyResponse</returns>
        PhoneVerifyResponse VerifyPhonePost(string contentType, string xApiKey, PhoneVerifyRequest phoneVerifyRequest);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Stakkd.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="xApiKey"></param>
        /// <param name="phoneVerifyRequest"></param>
        /// <returns>ApiResponse of PhoneVerifyResponse</returns>
        ApiResponse<PhoneVerifyResponse> VerifyPhonePostWithHttpInfo(string contentType, string xApiKey, PhoneVerifyRequest phoneVerifyRequest);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Stakkd.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="xApiKey"></param>
        /// <param name="tcpaVerifyRequest"></param>
        /// <returns>TcpaVerifyResponse</returns>
        TcpaVerifyResponse VerifyTcpaPost(string contentType, string xApiKey, TcpaVerifyRequest tcpaVerifyRequest);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Stakkd.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="xApiKey"></param>
        /// <param name="tcpaVerifyRequest"></param>
        /// <returns>ApiResponse of TcpaVerifyResponse</returns>
        ApiResponse<TcpaVerifyResponse> VerifyTcpaPostWithHttpInfo(string contentType, string xApiKey, TcpaVerifyRequest tcpaVerifyRequest);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IVerifyApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Stakkd.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="xApiKey"></param>
        /// <param name="disconnectVerifyRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DisconnectVerifyResponse</returns>
        System.Threading.Tasks.Task<DisconnectVerifyResponse> VerifyDisconnectPostAsync(string contentType, string xApiKey, DisconnectVerifyRequest disconnectVerifyRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Stakkd.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="xApiKey"></param>
        /// <param name="disconnectVerifyRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DisconnectVerifyResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<DisconnectVerifyResponse>> VerifyDisconnectPostWithHttpInfoAsync(string contentType, string xApiKey, DisconnectVerifyRequest disconnectVerifyRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Stakkd.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="xApiKey"></param>
        /// <param name="emailVerifyRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EmailVerifyResponse</returns>
        System.Threading.Tasks.Task<EmailVerifyResponse> VerifyEmailPostAsync(string contentType, string xApiKey, EmailVerifyRequest emailVerifyRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Stakkd.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="xApiKey"></param>
        /// <param name="emailVerifyRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EmailVerifyResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<EmailVerifyResponse>> VerifyEmailPostWithHttpInfoAsync(string contentType, string xApiKey, EmailVerifyRequest emailVerifyRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Stakkd.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="xApiKey"></param>
        /// <param name="phoneVerifyRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PhoneVerifyResponse</returns>
        System.Threading.Tasks.Task<PhoneVerifyResponse> VerifyPhonePostAsync(string contentType, string xApiKey, PhoneVerifyRequest phoneVerifyRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Stakkd.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="xApiKey"></param>
        /// <param name="phoneVerifyRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PhoneVerifyResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<PhoneVerifyResponse>> VerifyPhonePostWithHttpInfoAsync(string contentType, string xApiKey, PhoneVerifyRequest phoneVerifyRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Stakkd.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="xApiKey"></param>
        /// <param name="tcpaVerifyRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TcpaVerifyResponse</returns>
        System.Threading.Tasks.Task<TcpaVerifyResponse> VerifyTcpaPostAsync(string contentType, string xApiKey, TcpaVerifyRequest tcpaVerifyRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Stakkd.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="xApiKey"></param>
        /// <param name="tcpaVerifyRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TcpaVerifyResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TcpaVerifyResponse>> VerifyTcpaPostWithHttpInfoAsync(string contentType, string xApiKey, TcpaVerifyRequest tcpaVerifyRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IVerifyApi : IVerifyApiSync, IVerifyApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class VerifyApi : IVerifyApi
    {
        private Stakkd.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="VerifyApi"/> class.
        /// </summary>
        /// <returns></returns>
        public VerifyApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="VerifyApi"/> class.
        /// </summary>
        /// <returns></returns>
        public VerifyApi(string basePath)
        {
            this.Configuration = Stakkd.Client.Configuration.MergeConfigurations(
                Stakkd.Client.GlobalConfiguration.Instance,
                new Stakkd.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Stakkd.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Stakkd.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Stakkd.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="VerifyApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public VerifyApi(Stakkd.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Stakkd.Client.Configuration.MergeConfigurations(
                Stakkd.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Stakkd.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Stakkd.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Stakkd.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="VerifyApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public VerifyApi(Stakkd.Client.ISynchronousClient client, Stakkd.Client.IAsynchronousClient asyncClient, Stakkd.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Stakkd.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Stakkd.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Stakkd.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Stakkd.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Stakkd.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Stakkd.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="xApiKey"></param>
        /// <param name="disconnectVerifyRequest"></param>
        /// <returns>DisconnectVerifyResponse</returns>
        public DisconnectVerifyResponse VerifyDisconnectPost(string contentType, string xApiKey, DisconnectVerifyRequest disconnectVerifyRequest)
        {
            Stakkd.Client.ApiResponse<DisconnectVerifyResponse> localVarResponse = VerifyDisconnectPostWithHttpInfo(contentType, xApiKey, disconnectVerifyRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Stakkd.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="xApiKey"></param>
        /// <param name="disconnectVerifyRequest"></param>
        /// <returns>ApiResponse of DisconnectVerifyResponse</returns>
        public Stakkd.Client.ApiResponse<DisconnectVerifyResponse> VerifyDisconnectPostWithHttpInfo(string contentType, string xApiKey, DisconnectVerifyRequest disconnectVerifyRequest)
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
            {
                throw new Stakkd.Client.ApiException(400, "Missing required parameter 'contentType' when calling VerifyApi->VerifyDisconnectPost");
            }

            // verify the required parameter 'xApiKey' is set
            if (xApiKey == null)
            {
                throw new Stakkd.Client.ApiException(400, "Missing required parameter 'xApiKey' when calling VerifyApi->VerifyDisconnectPost");
            }

            // verify the required parameter 'disconnectVerifyRequest' is set
            if (disconnectVerifyRequest == null)
            {
                throw new Stakkd.Client.ApiException(400, "Missing required parameter 'disconnectVerifyRequest' when calling VerifyApi->VerifyDisconnectPost");
            }

            Stakkd.Client.RequestOptions localVarRequestOptions = new Stakkd.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Stakkd.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Stakkd.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.HeaderParameters.Add("Content-Type", Stakkd.Client.ClientUtils.ParameterToString(contentType)); // header parameter
            localVarRequestOptions.HeaderParameters.Add("x-api-key", Stakkd.Client.ClientUtils.ParameterToString(xApiKey)); // header parameter
            localVarRequestOptions.Data = disconnectVerifyRequest;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<DisconnectVerifyResponse>("/verify/disconnect", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("VerifyDisconnectPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Stakkd.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="xApiKey"></param>
        /// <param name="disconnectVerifyRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DisconnectVerifyResponse</returns>
        public async System.Threading.Tasks.Task<DisconnectVerifyResponse> VerifyDisconnectPostAsync(string contentType, string xApiKey, DisconnectVerifyRequest disconnectVerifyRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Stakkd.Client.ApiResponse<DisconnectVerifyResponse> localVarResponse = await VerifyDisconnectPostWithHttpInfoAsync(contentType, xApiKey, disconnectVerifyRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Stakkd.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="xApiKey"></param>
        /// <param name="disconnectVerifyRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DisconnectVerifyResponse)</returns>
        public async System.Threading.Tasks.Task<Stakkd.Client.ApiResponse<DisconnectVerifyResponse>> VerifyDisconnectPostWithHttpInfoAsync(string contentType, string xApiKey, DisconnectVerifyRequest disconnectVerifyRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
            {
                throw new Stakkd.Client.ApiException(400, "Missing required parameter 'contentType' when calling VerifyApi->VerifyDisconnectPost");
            }

            // verify the required parameter 'xApiKey' is set
            if (xApiKey == null)
            {
                throw new Stakkd.Client.ApiException(400, "Missing required parameter 'xApiKey' when calling VerifyApi->VerifyDisconnectPost");
            }

            // verify the required parameter 'disconnectVerifyRequest' is set
            if (disconnectVerifyRequest == null)
            {
                throw new Stakkd.Client.ApiException(400, "Missing required parameter 'disconnectVerifyRequest' when calling VerifyApi->VerifyDisconnectPost");
            }


            Stakkd.Client.RequestOptions localVarRequestOptions = new Stakkd.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Stakkd.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Stakkd.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.HeaderParameters.Add("Content-Type", Stakkd.Client.ClientUtils.ParameterToString(contentType)); // header parameter
            localVarRequestOptions.HeaderParameters.Add("x-api-key", Stakkd.Client.ClientUtils.ParameterToString(xApiKey)); // header parameter
            localVarRequestOptions.Data = disconnectVerifyRequest;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<DisconnectVerifyResponse>("/verify/disconnect", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("VerifyDisconnectPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Stakkd.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="xApiKey"></param>
        /// <param name="emailVerifyRequest"></param>
        /// <returns>EmailVerifyResponse</returns>
        public EmailVerifyResponse VerifyEmailPost(string contentType, string xApiKey, EmailVerifyRequest emailVerifyRequest)
        {
            Stakkd.Client.ApiResponse<EmailVerifyResponse> localVarResponse = VerifyEmailPostWithHttpInfo(contentType, xApiKey, emailVerifyRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Stakkd.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="xApiKey"></param>
        /// <param name="emailVerifyRequest"></param>
        /// <returns>ApiResponse of EmailVerifyResponse</returns>
        public Stakkd.Client.ApiResponse<EmailVerifyResponse> VerifyEmailPostWithHttpInfo(string contentType, string xApiKey, EmailVerifyRequest emailVerifyRequest)
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
            {
                throw new Stakkd.Client.ApiException(400, "Missing required parameter 'contentType' when calling VerifyApi->VerifyEmailPost");
            }

            // verify the required parameter 'xApiKey' is set
            if (xApiKey == null)
            {
                throw new Stakkd.Client.ApiException(400, "Missing required parameter 'xApiKey' when calling VerifyApi->VerifyEmailPost");
            }

            // verify the required parameter 'emailVerifyRequest' is set
            if (emailVerifyRequest == null)
            {
                throw new Stakkd.Client.ApiException(400, "Missing required parameter 'emailVerifyRequest' when calling VerifyApi->VerifyEmailPost");
            }

            Stakkd.Client.RequestOptions localVarRequestOptions = new Stakkd.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Stakkd.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Stakkd.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.HeaderParameters.Add("Content-Type", Stakkd.Client.ClientUtils.ParameterToString(contentType)); // header parameter
            localVarRequestOptions.HeaderParameters.Add("x-api-key", Stakkd.Client.ClientUtils.ParameterToString(xApiKey)); // header parameter
            localVarRequestOptions.Data = emailVerifyRequest;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<EmailVerifyResponse>("/verify/email", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("VerifyEmailPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Stakkd.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="xApiKey"></param>
        /// <param name="emailVerifyRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EmailVerifyResponse</returns>
        public async System.Threading.Tasks.Task<EmailVerifyResponse> VerifyEmailPostAsync(string contentType, string xApiKey, EmailVerifyRequest emailVerifyRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Stakkd.Client.ApiResponse<EmailVerifyResponse> localVarResponse = await VerifyEmailPostWithHttpInfoAsync(contentType, xApiKey, emailVerifyRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Stakkd.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="xApiKey"></param>
        /// <param name="emailVerifyRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EmailVerifyResponse)</returns>
        public async System.Threading.Tasks.Task<Stakkd.Client.ApiResponse<EmailVerifyResponse>> VerifyEmailPostWithHttpInfoAsync(string contentType, string xApiKey, EmailVerifyRequest emailVerifyRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
            {
                throw new Stakkd.Client.ApiException(400, "Missing required parameter 'contentType' when calling VerifyApi->VerifyEmailPost");
            }

            // verify the required parameter 'xApiKey' is set
            if (xApiKey == null)
            {
                throw new Stakkd.Client.ApiException(400, "Missing required parameter 'xApiKey' when calling VerifyApi->VerifyEmailPost");
            }

            // verify the required parameter 'emailVerifyRequest' is set
            if (emailVerifyRequest == null)
            {
                throw new Stakkd.Client.ApiException(400, "Missing required parameter 'emailVerifyRequest' when calling VerifyApi->VerifyEmailPost");
            }


            Stakkd.Client.RequestOptions localVarRequestOptions = new Stakkd.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Stakkd.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Stakkd.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.HeaderParameters.Add("Content-Type", Stakkd.Client.ClientUtils.ParameterToString(contentType)); // header parameter
            localVarRequestOptions.HeaderParameters.Add("x-api-key", Stakkd.Client.ClientUtils.ParameterToString(xApiKey)); // header parameter
            localVarRequestOptions.Data = emailVerifyRequest;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<EmailVerifyResponse>("/verify/email", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("VerifyEmailPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Stakkd.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="xApiKey"></param>
        /// <param name="phoneVerifyRequest"></param>
        /// <returns>PhoneVerifyResponse</returns>
        public PhoneVerifyResponse VerifyPhonePost(string contentType, string xApiKey, PhoneVerifyRequest phoneVerifyRequest)
        {
            Stakkd.Client.ApiResponse<PhoneVerifyResponse> localVarResponse = VerifyPhonePostWithHttpInfo(contentType, xApiKey, phoneVerifyRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Stakkd.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="xApiKey"></param>
        /// <param name="phoneVerifyRequest"></param>
        /// <returns>ApiResponse of PhoneVerifyResponse</returns>
        public Stakkd.Client.ApiResponse<PhoneVerifyResponse> VerifyPhonePostWithHttpInfo(string contentType, string xApiKey, PhoneVerifyRequest phoneVerifyRequest)
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
            {
                throw new Stakkd.Client.ApiException(400, "Missing required parameter 'contentType' when calling VerifyApi->VerifyPhonePost");
            }

            // verify the required parameter 'xApiKey' is set
            if (xApiKey == null)
            {
                throw new Stakkd.Client.ApiException(400, "Missing required parameter 'xApiKey' when calling VerifyApi->VerifyPhonePost");
            }

            // verify the required parameter 'phoneVerifyRequest' is set
            if (phoneVerifyRequest == null)
            {
                throw new Stakkd.Client.ApiException(400, "Missing required parameter 'phoneVerifyRequest' when calling VerifyApi->VerifyPhonePost");
            }

            Stakkd.Client.RequestOptions localVarRequestOptions = new Stakkd.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Stakkd.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Stakkd.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.HeaderParameters.Add("Content-Type", Stakkd.Client.ClientUtils.ParameterToString(contentType)); // header parameter
            localVarRequestOptions.HeaderParameters.Add("x-api-key", Stakkd.Client.ClientUtils.ParameterToString(xApiKey)); // header parameter
            localVarRequestOptions.Data = phoneVerifyRequest;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<PhoneVerifyResponse>("/verify/phone", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("VerifyPhonePost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Stakkd.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="xApiKey"></param>
        /// <param name="phoneVerifyRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PhoneVerifyResponse</returns>
        public async System.Threading.Tasks.Task<PhoneVerifyResponse> VerifyPhonePostAsync(string contentType, string xApiKey, PhoneVerifyRequest phoneVerifyRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Stakkd.Client.ApiResponse<PhoneVerifyResponse> localVarResponse = await VerifyPhonePostWithHttpInfoAsync(contentType, xApiKey, phoneVerifyRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Stakkd.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="xApiKey"></param>
        /// <param name="phoneVerifyRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PhoneVerifyResponse)</returns>
        public async System.Threading.Tasks.Task<Stakkd.Client.ApiResponse<PhoneVerifyResponse>> VerifyPhonePostWithHttpInfoAsync(string contentType, string xApiKey, PhoneVerifyRequest phoneVerifyRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
            {
                throw new Stakkd.Client.ApiException(400, "Missing required parameter 'contentType' when calling VerifyApi->VerifyPhonePost");
            }

            // verify the required parameter 'xApiKey' is set
            if (xApiKey == null)
            {
                throw new Stakkd.Client.ApiException(400, "Missing required parameter 'xApiKey' when calling VerifyApi->VerifyPhonePost");
            }

            // verify the required parameter 'phoneVerifyRequest' is set
            if (phoneVerifyRequest == null)
            {
                throw new Stakkd.Client.ApiException(400, "Missing required parameter 'phoneVerifyRequest' when calling VerifyApi->VerifyPhonePost");
            }


            Stakkd.Client.RequestOptions localVarRequestOptions = new Stakkd.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Stakkd.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Stakkd.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.HeaderParameters.Add("Content-Type", Stakkd.Client.ClientUtils.ParameterToString(contentType)); // header parameter
            localVarRequestOptions.HeaderParameters.Add("x-api-key", Stakkd.Client.ClientUtils.ParameterToString(xApiKey)); // header parameter
            localVarRequestOptions.Data = phoneVerifyRequest;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<PhoneVerifyResponse>("/verify/phone", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("VerifyPhonePost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Stakkd.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="xApiKey"></param>
        /// <param name="tcpaVerifyRequest"></param>
        /// <returns>TcpaVerifyResponse</returns>
        public TcpaVerifyResponse VerifyTcpaPost(string contentType, string xApiKey, TcpaVerifyRequest tcpaVerifyRequest)
        {
            Stakkd.Client.ApiResponse<TcpaVerifyResponse> localVarResponse = VerifyTcpaPostWithHttpInfo(contentType, xApiKey, tcpaVerifyRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Stakkd.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="xApiKey"></param>
        /// <param name="tcpaVerifyRequest"></param>
        /// <returns>ApiResponse of TcpaVerifyResponse</returns>
        public Stakkd.Client.ApiResponse<TcpaVerifyResponse> VerifyTcpaPostWithHttpInfo(string contentType, string xApiKey, TcpaVerifyRequest tcpaVerifyRequest)
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
            {
                throw new Stakkd.Client.ApiException(400, "Missing required parameter 'contentType' when calling VerifyApi->VerifyTcpaPost");
            }

            // verify the required parameter 'xApiKey' is set
            if (xApiKey == null)
            {
                throw new Stakkd.Client.ApiException(400, "Missing required parameter 'xApiKey' when calling VerifyApi->VerifyTcpaPost");
            }

            // verify the required parameter 'tcpaVerifyRequest' is set
            if (tcpaVerifyRequest == null)
            {
                throw new Stakkd.Client.ApiException(400, "Missing required parameter 'tcpaVerifyRequest' when calling VerifyApi->VerifyTcpaPost");
            }

            Stakkd.Client.RequestOptions localVarRequestOptions = new Stakkd.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Stakkd.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Stakkd.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.HeaderParameters.Add("Content-Type", Stakkd.Client.ClientUtils.ParameterToString(contentType)); // header parameter
            localVarRequestOptions.HeaderParameters.Add("x-api-key", Stakkd.Client.ClientUtils.ParameterToString(xApiKey)); // header parameter
            localVarRequestOptions.Data = tcpaVerifyRequest;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<TcpaVerifyResponse>("/verify/tcpa", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("VerifyTcpaPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Stakkd.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="xApiKey"></param>
        /// <param name="tcpaVerifyRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TcpaVerifyResponse</returns>
        public async System.Threading.Tasks.Task<TcpaVerifyResponse> VerifyTcpaPostAsync(string contentType, string xApiKey, TcpaVerifyRequest tcpaVerifyRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Stakkd.Client.ApiResponse<TcpaVerifyResponse> localVarResponse = await VerifyTcpaPostWithHttpInfoAsync(contentType, xApiKey, tcpaVerifyRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Stakkd.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"></param>
        /// <param name="xApiKey"></param>
        /// <param name="tcpaVerifyRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TcpaVerifyResponse)</returns>
        public async System.Threading.Tasks.Task<Stakkd.Client.ApiResponse<TcpaVerifyResponse>> VerifyTcpaPostWithHttpInfoAsync(string contentType, string xApiKey, TcpaVerifyRequest tcpaVerifyRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
            {
                throw new Stakkd.Client.ApiException(400, "Missing required parameter 'contentType' when calling VerifyApi->VerifyTcpaPost");
            }

            // verify the required parameter 'xApiKey' is set
            if (xApiKey == null)
            {
                throw new Stakkd.Client.ApiException(400, "Missing required parameter 'xApiKey' when calling VerifyApi->VerifyTcpaPost");
            }

            // verify the required parameter 'tcpaVerifyRequest' is set
            if (tcpaVerifyRequest == null)
            {
                throw new Stakkd.Client.ApiException(400, "Missing required parameter 'tcpaVerifyRequest' when calling VerifyApi->VerifyTcpaPost");
            }


            Stakkd.Client.RequestOptions localVarRequestOptions = new Stakkd.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Stakkd.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Stakkd.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.HeaderParameters.Add("Content-Type", Stakkd.Client.ClientUtils.ParameterToString(contentType)); // header parameter
            localVarRequestOptions.HeaderParameters.Add("x-api-key", Stakkd.Client.ClientUtils.ParameterToString(xApiKey)); // header parameter
            localVarRequestOptions.Data = tcpaVerifyRequest;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<TcpaVerifyResponse>("/verify/tcpa", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("VerifyTcpaPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
