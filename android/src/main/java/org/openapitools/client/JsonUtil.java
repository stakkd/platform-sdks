/**
 * Stakkd API
 * # Introduction The Stakkd platform provides comprehensive data services that meet the business objectives of organizations ranging from Fortune 500 companies to startups. Our clients work in an array of industries, including insurance, financial, legal, travel, hospitality, retail, health, media, and telecommunications.  The Stakkd API is documented using the Open API 3.0.1 standard.  All endpoints are available at https://api.stakkd.io/v1. Detailed documentation for each endpoint is below, including the full URL for the endpoint.  # Account Types The API supports two different account types, each with different permissions.  ## Paid Account Paid accounts provide unlimited access to all of the URIs.  ## Trial Account Trial Accounts have a limited number of queries to the APIs. Keep in mind that queries which do not return results still count against the Trial Account query limits. Trial Accounts are temporary, but can be upgraded or extended by contacting [support@stakkd.io](mailto:support@stakkd.io) 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.openapitools.client;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonParseException;
import com.google.gson.reflect.TypeToken;
import java.lang.reflect.Type;
import java.util.List;
import java.util.Date;
import com.stakkd.model.*;

public class JsonUtil {
  public static GsonBuilder gsonBuilder;

  static {
    gsonBuilder = new GsonBuilder();
    gsonBuilder.serializeNulls();
    gsonBuilder.setDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSZ");
    gsonBuilder.registerTypeAdapter(Date.class, new JsonDeserializer<Date>() {
      public Date deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context) throws JsonParseException {
        return new Date(json.getAsJsonPrimitive().getAsLong());
      }
    });
  }

  public static Gson getGson() {
    return gsonBuilder.create();
  }

  public static String serialize(Object obj){
    return getGson().toJson(obj);
  }

  public static <T> T deserializeToList(String jsonString, Class cls){
    return getGson().fromJson(jsonString, getListTypeForDeserialization(cls));
  }

  public static <T> T deserializeToObject(String jsonString, Class cls){
    return getGson().fromJson(jsonString, getTypeForDeserialization(cls));
  }

  public static Type getListTypeForDeserialization(Class cls) {
    String className = cls.getSimpleName();
    
    if ("AddressStandardizeRequest".equalsIgnoreCase(className)) {
      return new TypeToken<List<AddressStandardizeRequest>>(){}.getType();
    }
    
    if ("AddressStandardizeResponse".equalsIgnoreCase(className)) {
      return new TypeToken<List<AddressStandardizeResponse>>(){}.getType();
    }
    
    if ("DemographicsAppendRequest".equalsIgnoreCase(className)) {
      return new TypeToken<List<DemographicsAppendRequest>>(){}.getType();
    }
    
    if ("DemographicsAppendResponse".equalsIgnoreCase(className)) {
      return new TypeToken<List<DemographicsAppendResponse>>(){}.getType();
    }
    
    if ("DemographicsAppendResponseDemographics".equalsIgnoreCase(className)) {
      return new TypeToken<List<DemographicsAppendResponseDemographics>>(){}.getType();
    }
    
    if ("DemographicsAppendResponseDemographicsFamily".equalsIgnoreCase(className)) {
      return new TypeToken<List<DemographicsAppendResponseDemographicsFamily>>(){}.getType();
    }
    
    if ("DemographicsAppendResponseDemographicsFamilyChildren".equalsIgnoreCase(className)) {
      return new TypeToken<List<DemographicsAppendResponseDemographicsFamilyChildren>>(){}.getType();
    }
    
    if ("DemographicsAppendResponseDemographicsPerson".equalsIgnoreCase(className)) {
      return new TypeToken<List<DemographicsAppendResponseDemographicsPerson>>(){}.getType();
    }
    
    if ("DemographicsAppendResponseDemographicsPersonEducation".equalsIgnoreCase(className)) {
      return new TypeToken<List<DemographicsAppendResponseDemographicsPersonEducation>>(){}.getType();
    }
    
    if ("DemographicsAppendResponseDemographicsPersonFinances".equalsIgnoreCase(className)) {
      return new TypeToken<List<DemographicsAppendResponseDemographicsPersonFinances>>(){}.getType();
    }
    
    if ("DemographicsAppendResponseDemographicsPersonLanguage".equalsIgnoreCase(className)) {
      return new TypeToken<List<DemographicsAppendResponseDemographicsPersonLanguage>>(){}.getType();
    }
    
    if ("DemographicsAppendResponseDemographicsPersonRace".equalsIgnoreCase(className)) {
      return new TypeToken<List<DemographicsAppendResponseDemographicsPersonRace>>(){}.getType();
    }
    
    if ("DemographicsAppendResponseDemographicsPersonWorkerType".equalsIgnoreCase(className)) {
      return new TypeToken<List<DemographicsAppendResponseDemographicsPersonWorkerType>>(){}.getType();
    }
    
    if ("DemographicsAppendResponseDemographicsResidence".equalsIgnoreCase(className)) {
      return new TypeToken<List<DemographicsAppendResponseDemographicsResidence>>(){}.getType();
    }
    
    if ("DemographicsAppendResponseDemographicsResidenceDwelling".equalsIgnoreCase(className)) {
      return new TypeToken<List<DemographicsAppendResponseDemographicsResidenceDwelling>>(){}.getType();
    }
    
    if ("DemographicsAppendResponseDemographicsVehicle".equalsIgnoreCase(className)) {
      return new TypeToken<List<DemographicsAppendResponseDemographicsVehicle>>(){}.getType();
    }
    
    if ("DemographicsAppendResponseLifeStyles".equalsIgnoreCase(className)) {
      return new TypeToken<List<DemographicsAppendResponseLifeStyles>>(){}.getType();
    }
    
    if ("DemographicsAppendResponseLifeStylesApparel".equalsIgnoreCase(className)) {
      return new TypeToken<List<DemographicsAppendResponseLifeStylesApparel>>(){}.getType();
    }
    
    if ("DemographicsAppendResponseLifeStylesBook".equalsIgnoreCase(className)) {
      return new TypeToken<List<DemographicsAppendResponseLifeStylesBook>>(){}.getType();
    }
    
    if ("DemographicsAppendResponseLifeStylesInterests".equalsIgnoreCase(className)) {
      return new TypeToken<List<DemographicsAppendResponseLifeStylesInterests>>(){}.getType();
    }
    
    if ("DemographicsAppendResponsePhones".equalsIgnoreCase(className)) {
      return new TypeToken<List<DemographicsAppendResponsePhones>>(){}.getType();
    }
    
    if ("DisconnectVerifyRequest".equalsIgnoreCase(className)) {
      return new TypeToken<List<DisconnectVerifyRequest>>(){}.getType();
    }
    
    if ("DisconnectVerifyResponse".equalsIgnoreCase(className)) {
      return new TypeToken<List<DisconnectVerifyResponse>>(){}.getType();
    }
    
    if ("DisconnectVerifyResponsePhone".equalsIgnoreCase(className)) {
      return new TypeToken<List<DisconnectVerifyResponsePhone>>(){}.getType();
    }
    
    if ("EmailAppendRequest".equalsIgnoreCase(className)) {
      return new TypeToken<List<EmailAppendRequest>>(){}.getType();
    }
    
    if ("EmailAppendResponse".equalsIgnoreCase(className)) {
      return new TypeToken<List<EmailAppendResponse>>(){}.getType();
    }
    
    if ("EmailLookupRequest".equalsIgnoreCase(className)) {
      return new TypeToken<List<EmailLookupRequest>>(){}.getType();
    }
    
    if ("EmailVerifyRequest".equalsIgnoreCase(className)) {
      return new TypeToken<List<EmailVerifyRequest>>(){}.getType();
    }
    
    if ("EmailVerifyResponse".equalsIgnoreCase(className)) {
      return new TypeToken<List<EmailVerifyResponse>>(){}.getType();
    }
    
    if ("IpLookupRequest".equalsIgnoreCase(className)) {
      return new TypeToken<List<IpLookupRequest>>(){}.getType();
    }
    
    if ("IpLookupResponse".equalsIgnoreCase(className)) {
      return new TypeToken<List<IpLookupResponse>>(){}.getType();
    }
    
    if ("IpLookupResponseAddress".equalsIgnoreCase(className)) {
      return new TypeToken<List<IpLookupResponseAddress>>(){}.getType();
    }
    
    if ("LookupResponse".equalsIgnoreCase(className)) {
      return new TypeToken<List<LookupResponse>>(){}.getType();
    }
    
    if ("LookupResponseAddress".equalsIgnoreCase(className)) {
      return new TypeToken<List<LookupResponseAddress>>(){}.getType();
    }
    
    if ("MobileAppendRequest".equalsIgnoreCase(className)) {
      return new TypeToken<List<MobileAppendRequest>>(){}.getType();
    }
    
    if ("MobileAppendResponse".equalsIgnoreCase(className)) {
      return new TypeToken<List<MobileAppendResponse>>(){}.getType();
    }
    
    if ("PhoneAppendRequest".equalsIgnoreCase(className)) {
      return new TypeToken<List<PhoneAppendRequest>>(){}.getType();
    }
    
    if ("PhoneAppendResponse".equalsIgnoreCase(className)) {
      return new TypeToken<List<PhoneAppendResponse>>(){}.getType();
    }
    
    if ("PhoneLookupRequest".equalsIgnoreCase(className)) {
      return new TypeToken<List<PhoneLookupRequest>>(){}.getType();
    }
    
    if ("PhoneVerifyRequest".equalsIgnoreCase(className)) {
      return new TypeToken<List<PhoneVerifyRequest>>(){}.getType();
    }
    
    if ("PhoneVerifyResponse".equalsIgnoreCase(className)) {
      return new TypeToken<List<PhoneVerifyResponse>>(){}.getType();
    }
    
    if ("PhoneVerifyResponsePhone".equalsIgnoreCase(className)) {
      return new TypeToken<List<PhoneVerifyResponsePhone>>(){}.getType();
    }
    
    if ("SkipTracingLookupRequest".equalsIgnoreCase(className)) {
      return new TypeToken<List<SkipTracingLookupRequest>>(){}.getType();
    }
    
    if ("SkipTracingLookupResponse".equalsIgnoreCase(className)) {
      return new TypeToken<List<SkipTracingLookupResponse>>(){}.getType();
    }
    
    if ("SkipTracingLookupResponseAddresses".equalsIgnoreCase(className)) {
      return new TypeToken<List<SkipTracingLookupResponseAddresses>>(){}.getType();
    }
    
    if ("SkipTracingLookupResponseDemographics".equalsIgnoreCase(className)) {
      return new TypeToken<List<SkipTracingLookupResponseDemographics>>(){}.getType();
    }
    
    if ("SkipTracingLookupResponseNames".equalsIgnoreCase(className)) {
      return new TypeToken<List<SkipTracingLookupResponseNames>>(){}.getType();
    }
    
    if ("SkipTracingLookupResponseNamesAliases".equalsIgnoreCase(className)) {
      return new TypeToken<List<SkipTracingLookupResponseNamesAliases>>(){}.getType();
    }
    
    if ("TcpaVerifyRequest".equalsIgnoreCase(className)) {
      return new TypeToken<List<TcpaVerifyRequest>>(){}.getType();
    }
    
    if ("TcpaVerifyResponse".equalsIgnoreCase(className)) {
      return new TypeToken<List<TcpaVerifyResponse>>(){}.getType();
    }
    
    if ("VehicleAppendRequest".equalsIgnoreCase(className)) {
      return new TypeToken<List<VehicleAppendRequest>>(){}.getType();
    }
    
    if ("VehicleAppendResponse".equalsIgnoreCase(className)) {
      return new TypeToken<List<VehicleAppendResponse>>(){}.getType();
    }
    
    if ("VehicleAppendResponseVehicles".equalsIgnoreCase(className)) {
      return new TypeToken<List<VehicleAppendResponseVehicles>>(){}.getType();
    }
    
    return new TypeToken<List<Object>>(){}.getType();
  }

  public static Type getTypeForDeserialization(Class cls) {
    String className = cls.getSimpleName();
    
    if ("AddressStandardizeRequest".equalsIgnoreCase(className)) {
      return new TypeToken<AddressStandardizeRequest>(){}.getType();
    }
    
    if ("AddressStandardizeResponse".equalsIgnoreCase(className)) {
      return new TypeToken<AddressStandardizeResponse>(){}.getType();
    }
    
    if ("DemographicsAppendRequest".equalsIgnoreCase(className)) {
      return new TypeToken<DemographicsAppendRequest>(){}.getType();
    }
    
    if ("DemographicsAppendResponse".equalsIgnoreCase(className)) {
      return new TypeToken<DemographicsAppendResponse>(){}.getType();
    }
    
    if ("DemographicsAppendResponseDemographics".equalsIgnoreCase(className)) {
      return new TypeToken<DemographicsAppendResponseDemographics>(){}.getType();
    }
    
    if ("DemographicsAppendResponseDemographicsFamily".equalsIgnoreCase(className)) {
      return new TypeToken<DemographicsAppendResponseDemographicsFamily>(){}.getType();
    }
    
    if ("DemographicsAppendResponseDemographicsFamilyChildren".equalsIgnoreCase(className)) {
      return new TypeToken<DemographicsAppendResponseDemographicsFamilyChildren>(){}.getType();
    }
    
    if ("DemographicsAppendResponseDemographicsPerson".equalsIgnoreCase(className)) {
      return new TypeToken<DemographicsAppendResponseDemographicsPerson>(){}.getType();
    }
    
    if ("DemographicsAppendResponseDemographicsPersonEducation".equalsIgnoreCase(className)) {
      return new TypeToken<DemographicsAppendResponseDemographicsPersonEducation>(){}.getType();
    }
    
    if ("DemographicsAppendResponseDemographicsPersonFinances".equalsIgnoreCase(className)) {
      return new TypeToken<DemographicsAppendResponseDemographicsPersonFinances>(){}.getType();
    }
    
    if ("DemographicsAppendResponseDemographicsPersonLanguage".equalsIgnoreCase(className)) {
      return new TypeToken<DemographicsAppendResponseDemographicsPersonLanguage>(){}.getType();
    }
    
    if ("DemographicsAppendResponseDemographicsPersonRace".equalsIgnoreCase(className)) {
      return new TypeToken<DemographicsAppendResponseDemographicsPersonRace>(){}.getType();
    }
    
    if ("DemographicsAppendResponseDemographicsPersonWorkerType".equalsIgnoreCase(className)) {
      return new TypeToken<DemographicsAppendResponseDemographicsPersonWorkerType>(){}.getType();
    }
    
    if ("DemographicsAppendResponseDemographicsResidence".equalsIgnoreCase(className)) {
      return new TypeToken<DemographicsAppendResponseDemographicsResidence>(){}.getType();
    }
    
    if ("DemographicsAppendResponseDemographicsResidenceDwelling".equalsIgnoreCase(className)) {
      return new TypeToken<DemographicsAppendResponseDemographicsResidenceDwelling>(){}.getType();
    }
    
    if ("DemographicsAppendResponseDemographicsVehicle".equalsIgnoreCase(className)) {
      return new TypeToken<DemographicsAppendResponseDemographicsVehicle>(){}.getType();
    }
    
    if ("DemographicsAppendResponseLifeStyles".equalsIgnoreCase(className)) {
      return new TypeToken<DemographicsAppendResponseLifeStyles>(){}.getType();
    }
    
    if ("DemographicsAppendResponseLifeStylesApparel".equalsIgnoreCase(className)) {
      return new TypeToken<DemographicsAppendResponseLifeStylesApparel>(){}.getType();
    }
    
    if ("DemographicsAppendResponseLifeStylesBook".equalsIgnoreCase(className)) {
      return new TypeToken<DemographicsAppendResponseLifeStylesBook>(){}.getType();
    }
    
    if ("DemographicsAppendResponseLifeStylesInterests".equalsIgnoreCase(className)) {
      return new TypeToken<DemographicsAppendResponseLifeStylesInterests>(){}.getType();
    }
    
    if ("DemographicsAppendResponsePhones".equalsIgnoreCase(className)) {
      return new TypeToken<DemographicsAppendResponsePhones>(){}.getType();
    }
    
    if ("DisconnectVerifyRequest".equalsIgnoreCase(className)) {
      return new TypeToken<DisconnectVerifyRequest>(){}.getType();
    }
    
    if ("DisconnectVerifyResponse".equalsIgnoreCase(className)) {
      return new TypeToken<DisconnectVerifyResponse>(){}.getType();
    }
    
    if ("DisconnectVerifyResponsePhone".equalsIgnoreCase(className)) {
      return new TypeToken<DisconnectVerifyResponsePhone>(){}.getType();
    }
    
    if ("EmailAppendRequest".equalsIgnoreCase(className)) {
      return new TypeToken<EmailAppendRequest>(){}.getType();
    }
    
    if ("EmailAppendResponse".equalsIgnoreCase(className)) {
      return new TypeToken<EmailAppendResponse>(){}.getType();
    }
    
    if ("EmailLookupRequest".equalsIgnoreCase(className)) {
      return new TypeToken<EmailLookupRequest>(){}.getType();
    }
    
    if ("EmailVerifyRequest".equalsIgnoreCase(className)) {
      return new TypeToken<EmailVerifyRequest>(){}.getType();
    }
    
    if ("EmailVerifyResponse".equalsIgnoreCase(className)) {
      return new TypeToken<EmailVerifyResponse>(){}.getType();
    }
    
    if ("IpLookupRequest".equalsIgnoreCase(className)) {
      return new TypeToken<IpLookupRequest>(){}.getType();
    }
    
    if ("IpLookupResponse".equalsIgnoreCase(className)) {
      return new TypeToken<IpLookupResponse>(){}.getType();
    }
    
    if ("IpLookupResponseAddress".equalsIgnoreCase(className)) {
      return new TypeToken<IpLookupResponseAddress>(){}.getType();
    }
    
    if ("LookupResponse".equalsIgnoreCase(className)) {
      return new TypeToken<LookupResponse>(){}.getType();
    }
    
    if ("LookupResponseAddress".equalsIgnoreCase(className)) {
      return new TypeToken<LookupResponseAddress>(){}.getType();
    }
    
    if ("MobileAppendRequest".equalsIgnoreCase(className)) {
      return new TypeToken<MobileAppendRequest>(){}.getType();
    }
    
    if ("MobileAppendResponse".equalsIgnoreCase(className)) {
      return new TypeToken<MobileAppendResponse>(){}.getType();
    }
    
    if ("PhoneAppendRequest".equalsIgnoreCase(className)) {
      return new TypeToken<PhoneAppendRequest>(){}.getType();
    }
    
    if ("PhoneAppendResponse".equalsIgnoreCase(className)) {
      return new TypeToken<PhoneAppendResponse>(){}.getType();
    }
    
    if ("PhoneLookupRequest".equalsIgnoreCase(className)) {
      return new TypeToken<PhoneLookupRequest>(){}.getType();
    }
    
    if ("PhoneVerifyRequest".equalsIgnoreCase(className)) {
      return new TypeToken<PhoneVerifyRequest>(){}.getType();
    }
    
    if ("PhoneVerifyResponse".equalsIgnoreCase(className)) {
      return new TypeToken<PhoneVerifyResponse>(){}.getType();
    }
    
    if ("PhoneVerifyResponsePhone".equalsIgnoreCase(className)) {
      return new TypeToken<PhoneVerifyResponsePhone>(){}.getType();
    }
    
    if ("SkipTracingLookupRequest".equalsIgnoreCase(className)) {
      return new TypeToken<SkipTracingLookupRequest>(){}.getType();
    }
    
    if ("SkipTracingLookupResponse".equalsIgnoreCase(className)) {
      return new TypeToken<SkipTracingLookupResponse>(){}.getType();
    }
    
    if ("SkipTracingLookupResponseAddresses".equalsIgnoreCase(className)) {
      return new TypeToken<SkipTracingLookupResponseAddresses>(){}.getType();
    }
    
    if ("SkipTracingLookupResponseDemographics".equalsIgnoreCase(className)) {
      return new TypeToken<SkipTracingLookupResponseDemographics>(){}.getType();
    }
    
    if ("SkipTracingLookupResponseNames".equalsIgnoreCase(className)) {
      return new TypeToken<SkipTracingLookupResponseNames>(){}.getType();
    }
    
    if ("SkipTracingLookupResponseNamesAliases".equalsIgnoreCase(className)) {
      return new TypeToken<SkipTracingLookupResponseNamesAliases>(){}.getType();
    }
    
    if ("TcpaVerifyRequest".equalsIgnoreCase(className)) {
      return new TypeToken<TcpaVerifyRequest>(){}.getType();
    }
    
    if ("TcpaVerifyResponse".equalsIgnoreCase(className)) {
      return new TypeToken<TcpaVerifyResponse>(){}.getType();
    }
    
    if ("VehicleAppendRequest".equalsIgnoreCase(className)) {
      return new TypeToken<VehicleAppendRequest>(){}.getType();
    }
    
    if ("VehicleAppendResponse".equalsIgnoreCase(className)) {
      return new TypeToken<VehicleAppendResponse>(){}.getType();
    }
    
    if ("VehicleAppendResponseVehicles".equalsIgnoreCase(className)) {
      return new TypeToken<VehicleAppendResponseVehicles>(){}.getType();
    }
    
    return new TypeToken<Object>(){}.getType();
  }

};
