/**
 * Stakkd API
 * # Introduction The Stakkd platform provides comprehensive data services that meet the business objectives of organizations ranging from Fortune 500 companies to startups. Our clients work in an array of industries, including insurance, financial, legal, travel, hospitality, retail, health, media, and telecommunications.  The Stakkd API is documented using the Open API 3.0.1 standard.  All endpoints are available at https://api.stakkd.io/v1. Detailed documentation for each endpoint is below, including the full URL for the endpoint.  # Account Types The API supports two different account types, each with different permissions.  ## Paid Account Paid accounts provide unlimited access to all of the URIs.  ## Trial Account Trial Accounts have a limited number of queries to the APIs. Keep in mind that queries which do not return results still count against the Trial Account query limits. Trial Accounts are temporary, but can be upgraded or extended by contacting [support@stakkd.io](mailto:support@stakkd.io) 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.stakkd.model;

import com.stakkd.model.DemographicsAppendResponseDemographicsResidenceDwelling;
import io.swagger.annotations.*;
import com.google.gson.annotations.SerializedName;

@ApiModel(description = "")
public class DemographicsAppendResponseDemographicsResidence {
  
  public enum HomeownerEnum {
     TENANT,  OWNER, 
  };
  @SerializedName("homeowner")
  private HomeownerEnum homeowner = null;
  @SerializedName("hasPool")
  private Boolean hasPool = null;
  public enum EstimatedMarketValueEnum {
     A,  B,  C,  D,  E,  F,  G,  H,  I,  J,  K,  L,  M,  N,  O,  P,  Q,  R,  S, 
  };
  @SerializedName("estimatedMarketValue")
  private EstimatedMarketValueEnum estimatedMarketValue = null;
  @SerializedName("lengthOfResidence")
  private Integer lengthOfResidence = null;
  @SerializedName("yearHomeBuilt")
  private Integer yearHomeBuilt = null;
  public enum MedianHouseValueEnum {
     A,  B,  C,  D,  E,  F,  G,  H,  I, 
  };
  @SerializedName("medianHouseValue")
  private MedianHouseValueEnum medianHouseValue = null;
  @SerializedName("dwelling")
  private DemographicsAppendResponseDemographicsResidenceDwelling dwelling = null;
  @SerializedName("isMobileHome")
  private Boolean isMobileHome = null;
  @SerializedName("hasFireplace")
  private Boolean hasFireplace = null;

  /**
   * Indicates whether the person is the owner or a tenant of the residence.
   **/
  @ApiModelProperty(value = "Indicates whether the person is the owner or a tenant of the residence.")
  public HomeownerEnum getHomeowner() {
    return homeowner;
  }
  public void setHomeowner(HomeownerEnum homeowner) {
    this.homeowner = homeowner;
  }

  /**
   * Indicates whether the residence is flagged as having a pool.
   **/
  @ApiModelProperty(value = "Indicates whether the residence is flagged as having a pool.")
  public Boolean getHasPool() {
    return hasPool;
  }
  public void setHasPool(Boolean hasPool) {
    this.hasPool = hasPool;
  }

  /**
   * The estimated market value of the residence, where A = $1, 000 - $24, 999; B = $25, 000 - $49, 999; C = $50, 000 - $74, 999; D = $75, 000 - $99, 999; E = $100, 000 - $124, 999; F = $125, 000 - $149, 999; G = $150, 000 - $174, 999; H = $175, 000 - $199, 999; I = $200, 000 - $224, 999; J = $225, 000 - $249, 999; K = $250, 000 - $274, 999; L = $275, 000 - $299, 999; M = $300, 000 - $349, 999; N = $350, 000 - $399, 999; O = $400, 000 - $449, 999; P = $450, 000 - $499, 999; Q = $500, 000 - $749, 999; R = $750, 000 - $999, 999; S = > $999,999.
   **/
  @ApiModelProperty(value = "The estimated market value of the residence, where A = $1, 000 - $24, 999; B = $25, 000 - $49, 999; C = $50, 000 - $74, 999; D = $75, 000 - $99, 999; E = $100, 000 - $124, 999; F = $125, 000 - $149, 999; G = $150, 000 - $174, 999; H = $175, 000 - $199, 999; I = $200, 000 - $224, 999; J = $225, 000 - $249, 999; K = $250, 000 - $274, 999; L = $275, 000 - $299, 999; M = $300, 000 - $349, 999; N = $350, 000 - $399, 999; O = $400, 000 - $449, 999; P = $450, 000 - $499, 999; Q = $500, 000 - $749, 999; R = $750, 000 - $999, 999; S = > $999,999.")
  public EstimatedMarketValueEnum getEstimatedMarketValue() {
    return estimatedMarketValue;
  }
  public void setEstimatedMarketValue(EstimatedMarketValueEnum estimatedMarketValue) {
    this.estimatedMarketValue = estimatedMarketValue;
  }

  /**
   * The number of years the person has lived at the residence.
   **/
  @ApiModelProperty(value = "The number of years the person has lived at the residence.")
  public Integer getLengthOfResidence() {
    return lengthOfResidence;
  }
  public void setLengthOfResidence(Integer lengthOfResidence) {
    this.lengthOfResidence = lengthOfResidence;
  }

  /**
   * The year the residence was built.
   **/
  @ApiModelProperty(value = "The year the residence was built.")
  public Integer getYearHomeBuilt() {
    return yearHomeBuilt;
  }
  public void setYearHomeBuilt(Integer yearHomeBuilt) {
    this.yearHomeBuilt = yearHomeBuilt;
  }

  /**
   * The median value of the residence, where A = < $50, 000; B = $50, 000 - $99, 999; C = $100, 000 - $149, 999; D = $150, 000 - $249, 999; E = $250, 000 - $349, 999; F = $350, 000 - $499, 999; G = $500, 000 - $749, 999; H = $750, 000 - $999, 999; I = > $999,999.
   **/
  @ApiModelProperty(value = "The median value of the residence, where A = < $50, 000; B = $50, 000 - $99, 999; C = $100, 000 - $149, 999; D = $150, 000 - $249, 999; E = $250, 000 - $349, 999; F = $350, 000 - $499, 999; G = $500, 000 - $749, 999; H = $750, 000 - $999, 999; I = > $999,999.")
  public MedianHouseValueEnum getMedianHouseValue() {
    return medianHouseValue;
  }
  public void setMedianHouseValue(MedianHouseValueEnum medianHouseValue) {
    this.medianHouseValue = medianHouseValue;
  }

  /**
   **/
  @ApiModelProperty(value = "")
  public DemographicsAppendResponseDemographicsResidenceDwelling getDwelling() {
    return dwelling;
  }
  public void setDwelling(DemographicsAppendResponseDemographicsResidenceDwelling dwelling) {
    this.dwelling = dwelling;
  }

  /**
   * Indicates whether the residence is flagged as a mobile home.
   **/
  @ApiModelProperty(value = "Indicates whether the residence is flagged as a mobile home.")
  public Boolean getIsMobileHome() {
    return isMobileHome;
  }
  public void setIsMobileHome(Boolean isMobileHome) {
    this.isMobileHome = isMobileHome;
  }

  /**
   * Indicates whether the residence is flagged as having a fireplace.
   **/
  @ApiModelProperty(value = "Indicates whether the residence is flagged as having a fireplace.")
  public Boolean getHasFireplace() {
    return hasFireplace;
  }
  public void setHasFireplace(Boolean hasFireplace) {
    this.hasFireplace = hasFireplace;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DemographicsAppendResponseDemographicsResidence demographicsAppendResponseDemographicsResidence = (DemographicsAppendResponseDemographicsResidence) o;
    return (this.homeowner == null ? demographicsAppendResponseDemographicsResidence.homeowner == null : this.homeowner.equals(demographicsAppendResponseDemographicsResidence.homeowner)) &&
        (this.hasPool == null ? demographicsAppendResponseDemographicsResidence.hasPool == null : this.hasPool.equals(demographicsAppendResponseDemographicsResidence.hasPool)) &&
        (this.estimatedMarketValue == null ? demographicsAppendResponseDemographicsResidence.estimatedMarketValue == null : this.estimatedMarketValue.equals(demographicsAppendResponseDemographicsResidence.estimatedMarketValue)) &&
        (this.lengthOfResidence == null ? demographicsAppendResponseDemographicsResidence.lengthOfResidence == null : this.lengthOfResidence.equals(demographicsAppendResponseDemographicsResidence.lengthOfResidence)) &&
        (this.yearHomeBuilt == null ? demographicsAppendResponseDemographicsResidence.yearHomeBuilt == null : this.yearHomeBuilt.equals(demographicsAppendResponseDemographicsResidence.yearHomeBuilt)) &&
        (this.medianHouseValue == null ? demographicsAppendResponseDemographicsResidence.medianHouseValue == null : this.medianHouseValue.equals(demographicsAppendResponseDemographicsResidence.medianHouseValue)) &&
        (this.dwelling == null ? demographicsAppendResponseDemographicsResidence.dwelling == null : this.dwelling.equals(demographicsAppendResponseDemographicsResidence.dwelling)) &&
        (this.isMobileHome == null ? demographicsAppendResponseDemographicsResidence.isMobileHome == null : this.isMobileHome.equals(demographicsAppendResponseDemographicsResidence.isMobileHome)) &&
        (this.hasFireplace == null ? demographicsAppendResponseDemographicsResidence.hasFireplace == null : this.hasFireplace.equals(demographicsAppendResponseDemographicsResidence.hasFireplace));
  }

  @Override
  public int hashCode() {
    int result = 17;
    result = 31 * result + (this.homeowner == null ? 0: this.homeowner.hashCode());
    result = 31 * result + (this.hasPool == null ? 0: this.hasPool.hashCode());
    result = 31 * result + (this.estimatedMarketValue == null ? 0: this.estimatedMarketValue.hashCode());
    result = 31 * result + (this.lengthOfResidence == null ? 0: this.lengthOfResidence.hashCode());
    result = 31 * result + (this.yearHomeBuilt == null ? 0: this.yearHomeBuilt.hashCode());
    result = 31 * result + (this.medianHouseValue == null ? 0: this.medianHouseValue.hashCode());
    result = 31 * result + (this.dwelling == null ? 0: this.dwelling.hashCode());
    result = 31 * result + (this.isMobileHome == null ? 0: this.isMobileHome.hashCode());
    result = 31 * result + (this.hasFireplace == null ? 0: this.hasFireplace.hashCode());
    return result;
  }

  @Override
  public String toString()  {
    StringBuilder sb = new StringBuilder();
    sb.append("class DemographicsAppendResponseDemographicsResidence {\n");
    
    sb.append("  homeowner: ").append(homeowner).append("\n");
    sb.append("  hasPool: ").append(hasPool).append("\n");
    sb.append("  estimatedMarketValue: ").append(estimatedMarketValue).append("\n");
    sb.append("  lengthOfResidence: ").append(lengthOfResidence).append("\n");
    sb.append("  yearHomeBuilt: ").append(yearHomeBuilt).append("\n");
    sb.append("  medianHouseValue: ").append(medianHouseValue).append("\n");
    sb.append("  dwelling: ").append(dwelling).append("\n");
    sb.append("  isMobileHome: ").append(isMobileHome).append("\n");
    sb.append("  hasFireplace: ").append(hasFireplace).append("\n");
    sb.append("}\n");
    return sb.toString();
  }
}
