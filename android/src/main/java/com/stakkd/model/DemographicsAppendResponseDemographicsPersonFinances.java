/**
 * Stakkd API
 * # Introduction The Stakkd platform provides comprehensive data services that meet the business objectives of organizations ranging from Fortune 500 companies to startups. Our clients work in an array of industries, including insurance, financial, legal, travel, hospitality, retail, health, media, and telecommunications.  The Stakkd API is documented using the Open API 3.0.1 standard.  All endpoints are available at https://api.stakkd.io/v1. Detailed documentation for each endpoint is below, including the full URL for the endpoint.  # Account Types The API supports two different account types, each with different permissions.  ## Paid Account Paid accounts provide unlimited access to all of the URIs.  ## Trial Account Trial Accounts have a limited number of queries to the APIs. Keep in mind that queries which do not return results still count against the Trial Account query limits. Trial Accounts are temporary, but can be upgraded or extended by contacting [support@stakkd.io](mailto:support@stakkd.io) 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.stakkd.model;

import io.swagger.annotations.*;
import com.google.gson.annotations.SerializedName;

@ApiModel(description = "")
public class DemographicsAppendResponseDemographicsPersonFinances {
  
  public enum EstimatedIncomeEnum {
     A,  B,  C,  D,  E,  F,  G,  H,  I, 
  };
  @SerializedName("estimatedIncome")
  private EstimatedIncomeEnum estimatedIncome = null;
  public enum EstimatedNetWorthEnum {
     A,  B,  C,  D,  E,  F,  G,  H, 
  };
  @SerializedName("estimatedNetWorth")
  private EstimatedNetWorthEnum estimatedNetWorth = null;
  @SerializedName("isCharityDonar")
  private Boolean isCharityDonar = null;
  @SerializedName("usesCreditCard")
  private Boolean usesCreditCard = null;

  /**
   * The estimated income of the person, where: A = < $20, 000; B = $20, 000 - $29, 999; C = $30, 000 - $39, 999; D = $40, 000 - $49, 999; E = $50, 000 - $74, 999; F = $75, 000 - $99, 999; G = $100, 000 - $124, 999; H = $125, 000 - $149, 999; I = > $149,999.
   **/
  @ApiModelProperty(value = "The estimated income of the person, where: A = < $20, 000; B = $20, 000 - $29, 999; C = $30, 000 - $39, 999; D = $40, 000 - $49, 999; E = $50, 000 - $74, 999; F = $75, 000 - $99, 999; G = $100, 000 - $124, 999; H = $125, 000 - $149, 999; I = > $149,999.")
  public EstimatedIncomeEnum getEstimatedIncome() {
    return estimatedIncome;
  }
  public void setEstimatedIncome(EstimatedIncomeEnum estimatedIncome) {
    this.estimatedIncome = estimatedIncome;
  }

  /**
   * The estimated net worth of the person, where: A = < $5k; B = $5k - $19k; C = $20k - $49k; D = $50k - $80k; E = $81k - $99k; F = $100k - $249k; G = $250k - $499k; H = > $500k.
   **/
  @ApiModelProperty(value = "The estimated net worth of the person, where: A = < $5k; B = $5k - $19k; C = $20k - $49k; D = $50k - $80k; E = $81k - $99k; F = $100k - $249k; G = $250k - $499k; H = > $500k.")
  public EstimatedNetWorthEnum getEstimatedNetWorth() {
    return estimatedNetWorth;
  }
  public void setEstimatedNetWorth(EstimatedNetWorthEnum estimatedNetWorth) {
    this.estimatedNetWorth = estimatedNetWorth;
  }

  /**
   * Indicates whether the person is flagged as a charity donar.
   **/
  @ApiModelProperty(value = "Indicates whether the person is flagged as a charity donar.")
  public Boolean getIsCharityDonar() {
    return isCharityDonar;
  }
  public void setIsCharityDonar(Boolean isCharityDonar) {
    this.isCharityDonar = isCharityDonar;
  }

  /**
   * Indicates whether the person is flagged as a credit card user.
   **/
  @ApiModelProperty(value = "Indicates whether the person is flagged as a credit card user.")
  public Boolean getUsesCreditCard() {
    return usesCreditCard;
  }
  public void setUsesCreditCard(Boolean usesCreditCard) {
    this.usesCreditCard = usesCreditCard;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DemographicsAppendResponseDemographicsPersonFinances demographicsAppendResponseDemographicsPersonFinances = (DemographicsAppendResponseDemographicsPersonFinances) o;
    return (this.estimatedIncome == null ? demographicsAppendResponseDemographicsPersonFinances.estimatedIncome == null : this.estimatedIncome.equals(demographicsAppendResponseDemographicsPersonFinances.estimatedIncome)) &&
        (this.estimatedNetWorth == null ? demographicsAppendResponseDemographicsPersonFinances.estimatedNetWorth == null : this.estimatedNetWorth.equals(demographicsAppendResponseDemographicsPersonFinances.estimatedNetWorth)) &&
        (this.isCharityDonar == null ? demographicsAppendResponseDemographicsPersonFinances.isCharityDonar == null : this.isCharityDonar.equals(demographicsAppendResponseDemographicsPersonFinances.isCharityDonar)) &&
        (this.usesCreditCard == null ? demographicsAppendResponseDemographicsPersonFinances.usesCreditCard == null : this.usesCreditCard.equals(demographicsAppendResponseDemographicsPersonFinances.usesCreditCard));
  }

  @Override
  public int hashCode() {
    int result = 17;
    result = 31 * result + (this.estimatedIncome == null ? 0: this.estimatedIncome.hashCode());
    result = 31 * result + (this.estimatedNetWorth == null ? 0: this.estimatedNetWorth.hashCode());
    result = 31 * result + (this.isCharityDonar == null ? 0: this.isCharityDonar.hashCode());
    result = 31 * result + (this.usesCreditCard == null ? 0: this.usesCreditCard.hashCode());
    return result;
  }

  @Override
  public String toString()  {
    StringBuilder sb = new StringBuilder();
    sb.append("class DemographicsAppendResponseDemographicsPersonFinances {\n");
    
    sb.append("  estimatedIncome: ").append(estimatedIncome).append("\n");
    sb.append("  estimatedNetWorth: ").append(estimatedNetWorth).append("\n");
    sb.append("  isCharityDonar: ").append(isCharityDonar).append("\n");
    sb.append("  usesCreditCard: ").append(usesCreditCard).append("\n");
    sb.append("}\n");
    return sb.toString();
  }
}
